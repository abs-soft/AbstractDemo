UObject* UAbstractBlueprintFunctionLibrary::GetAbsClassVarObject(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UObject** result = abstractBasedObject->GetInternal()->GetClassVar<UObject*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarObject(UObject* target, FString label, UObject* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UObject*>(TCHAR_TO_UTF8(*label), value);
    }
}

UField* UAbstractBlueprintFunctionLibrary::GetAbsClassVarField(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UField** result = abstractBasedObject->GetInternal()->GetClassVar<UField*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarField(UObject* target, FString label, UField* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UField*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMetaData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMetaData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMetaData** result = abstractBasedObject->GetInternal()->GetClassVar<UMetaData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMetaData(UObject* target, FString label, UMetaData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMetaData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPackage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPackage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPackage** result = abstractBasedObject->GetInternal()->GetClassVar<UPackage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPackage(UObject* target, FString label, UPackage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPackage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPackageMap* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPackageMap(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPackageMap** result = abstractBasedObject->GetInternal()->GetClassVar<UPackageMap*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPackageMap(UObject* target, FString label, UPackageMap* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPackageMap*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnum* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnum(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnum** result = abstractBasedObject->GetInternal()->GetClassVar<UEnum*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnum(UObject* target, FString label, UEnum* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnum*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStruct* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStruct(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStruct** result = abstractBasedObject->GetInternal()->GetClassVar<UStruct*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStruct(UObject* target, FString label, UStruct* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStruct*>(TCHAR_TO_UTF8(*label), value);
    }
}

UFunction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarFunction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UFunction** result = abstractBasedObject->GetInternal()->GetClassVar<UFunction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarFunction(UObject* target, FString label, UFunction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UFunction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UScriptStruct* UAbstractBlueprintFunctionLibrary::GetAbsClassVarScriptStruct(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UScriptStruct** result = abstractBasedObject->GetInternal()->GetClassVar<UScriptStruct*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarScriptStruct(UObject* target, FString label, UScriptStruct* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UScriptStruct*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBodySetupCore* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBodySetupCore(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBodySetupCore** result = abstractBasedObject->GetInternal()->GetClassVar<UBodySetupCore*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBodySetupCore(UObject* target, FString label, UBodySetupCore* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBodySetupCore*>(TCHAR_TO_UTF8(*label), value);
    }
}

UChaosPhysicalMaterial* UAbstractBlueprintFunctionLibrary::GetAbsClassVarChaosPhysicalMaterial(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UChaosPhysicalMaterial** result = abstractBasedObject->GetInternal()->GetClassVar<UChaosPhysicalMaterial*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarChaosPhysicalMaterial(UObject* target, FString label, UChaosPhysicalMaterial* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UChaosPhysicalMaterial*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicalMaterial* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicalMaterial(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicalMaterial** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicalMaterial*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicalMaterial(UObject* target, FString label, UPhysicalMaterial* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicalMaterial*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsSettingsCore* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsSettingsCore(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsSettingsCore** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsSettingsCore*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsSettingsCore(UObject* target, FString label, UPhysicsSettingsCore* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsSettingsCore*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAsyncTaskDownloadImage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAsyncTaskDownloadImage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAsyncTaskDownloadImage** result = abstractBasedObject->GetInternal()->GetClassVar<UAsyncTaskDownloadImage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAsyncTaskDownloadImage(UObject* target, FString label, UAsyncTaskDownloadImage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAsyncTaskDownloadImage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDragDropOperation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDragDropOperation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDragDropOperation** result = abstractBasedObject->GetInternal()->GetClassVar<UDragDropOperation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDragDropOperation(UObject* target, FString label, UDragDropOperation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDragDropOperation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGameViewportSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameViewportSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGameViewportSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UGameViewportSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameViewportSubsystem(UObject* target, FString label, UGameViewportSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGameViewportSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UListViewDesignerPreviewItem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarListViewDesignerPreviewItem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UListViewDesignerPreviewItem** result = abstractBasedObject->GetInternal()->GetClassVar<UListViewDesignerPreviewItem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarListViewDesignerPreviewItem(UObject* target, FString label, UListViewDesignerPreviewItem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UListViewDesignerPreviewItem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMovieScene2DTransformPropertySystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMovieScene2DTransformPropertySystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMovieScene2DTransformPropertySystem** result = abstractBasedObject->GetInternal()->GetClassVar<UMovieScene2DTransformPropertySystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMovieScene2DTransformPropertySystem(UObject* target, FString label, UMovieScene2DTransformPropertySystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMovieScene2DTransformPropertySystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMovieScene2DTransformSection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMovieScene2DTransformSection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMovieScene2DTransformSection** result = abstractBasedObject->GetInternal()->GetClassVar<UMovieScene2DTransformSection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMovieScene2DTransformSection(UObject* target, FString label, UMovieScene2DTransformSection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMovieScene2DTransformSection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMovieScene2DTransformTrack* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMovieScene2DTransformTrack(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMovieScene2DTransformTrack** result = abstractBasedObject->GetInternal()->GetClassVar<UMovieScene2DTransformTrack*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMovieScene2DTransformTrack(UObject* target, FString label, UMovieScene2DTransformTrack* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMovieScene2DTransformTrack*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMovieSceneMarginPropertySystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMovieSceneMarginPropertySystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMovieSceneMarginPropertySystem** result = abstractBasedObject->GetInternal()->GetClassVar<UMovieSceneMarginPropertySystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMovieSceneMarginPropertySystem(UObject* target, FString label, UMovieSceneMarginPropertySystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMovieSceneMarginPropertySystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMovieSceneMarginSection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMovieSceneMarginSection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMovieSceneMarginSection** result = abstractBasedObject->GetInternal()->GetClassVar<UMovieSceneMarginSection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMovieSceneMarginSection(UObject* target, FString label, UMovieSceneMarginSection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMovieSceneMarginSection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMovieSceneMarginTrack* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMovieSceneMarginTrack(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMovieSceneMarginTrack** result = abstractBasedObject->GetInternal()->GetClassVar<UMovieSceneMarginTrack*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMovieSceneMarginTrack(UObject* target, FString label, UMovieSceneMarginTrack* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMovieSceneMarginTrack*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMovieSceneWidgetMaterialSystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMovieSceneWidgetMaterialSystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMovieSceneWidgetMaterialSystem** result = abstractBasedObject->GetInternal()->GetClassVar<UMovieSceneWidgetMaterialSystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMovieSceneWidgetMaterialSystem(UObject* target, FString label, UMovieSceneWidgetMaterialSystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMovieSceneWidgetMaterialSystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMovieSceneWidgetMaterialTrack* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMovieSceneWidgetMaterialTrack(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMovieSceneWidgetMaterialTrack** result = abstractBasedObject->GetInternal()->GetClassVar<UMovieSceneWidgetMaterialTrack*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMovieSceneWidgetMaterialTrack(UObject* target, FString label, UMovieSceneWidgetMaterialTrack* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMovieSceneWidgetMaterialTrack*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPropertyBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPropertyBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPropertyBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UPropertyBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPropertyBinding(UObject* target, FString label, UPropertyBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPropertyBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

URichTextBlockDecorator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRichTextBlockDecorator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URichTextBlockDecorator** result = abstractBasedObject->GetInternal()->GetClassVar<URichTextBlockDecorator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRichTextBlockDecorator(UObject* target, FString label, URichTextBlockDecorator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URichTextBlockDecorator*>(TCHAR_TO_UTF8(*label), value);
    }
}

USlateAccessibleWidgetData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSlateAccessibleWidgetData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USlateAccessibleWidgetData** result = abstractBasedObject->GetInternal()->GetClassVar<USlateAccessibleWidgetData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSlateAccessibleWidgetData(UObject* target, FString label, USlateAccessibleWidgetData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USlateAccessibleWidgetData*>(TCHAR_TO_UTF8(*label), value);
    }
}

USlateBlueprintLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSlateBlueprintLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USlateBlueprintLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<USlateBlueprintLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSlateBlueprintLibrary(UObject* target, FString label, USlateBlueprintLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USlateBlueprintLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

USlateVectorArtData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSlateVectorArtData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USlateVectorArtData** result = abstractBasedObject->GetInternal()->GetClassVar<USlateVectorArtData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSlateVectorArtData(UObject* target, FString label, USlateVectorArtData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USlateVectorArtData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUMGSequencePlayer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUMGSequencePlayer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUMGSequencePlayer** result = abstractBasedObject->GetInternal()->GetClassVar<UUMGSequencePlayer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUMGSequencePlayer(UObject* target, FString label, UUMGSequencePlayer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUMGSequencePlayer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUMGSequenceTickManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUMGSequenceTickManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUMGSequenceTickManager** result = abstractBasedObject->GetInternal()->GetClassVar<UUMGSequenceTickManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUMGSequenceTickManager(UObject* target, FString label, UUMGSequenceTickManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUMGSequenceTickManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUserListEntryLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUserListEntryLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUserListEntryLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UUserListEntryLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUserListEntryLibrary(UObject* target, FString label, UUserListEntryLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUserListEntryLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUserObjectListEntryLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUserObjectListEntryLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUserObjectListEntryLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UUserObjectListEntryLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUserObjectListEntryLibrary(UObject* target, FString label, UUserObjectListEntryLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUserObjectListEntryLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUserWidgetBlueprint* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUserWidgetBlueprint(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUserWidgetBlueprint** result = abstractBasedObject->GetInternal()->GetClassVar<UUserWidgetBlueprint*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUserWidgetBlueprint(UObject* target, FString label, UUserWidgetBlueprint* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUserWidgetBlueprint*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUserWidgetExtension* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUserWidgetExtension(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUserWidgetExtension** result = abstractBasedObject->GetInternal()->GetClassVar<UUserWidgetExtension*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUserWidgetExtension(UObject* target, FString label, UUserWidgetExtension* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUserWidgetExtension*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVisual* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVisual(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVisual** result = abstractBasedObject->GetInternal()->GetClassVar<UVisual*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVisual(UObject* target, FString label, UVisual* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVisual*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetAnimation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetAnimation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetAnimation** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetAnimation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetAnimation(UObject* target, FString label, UWidgetAnimation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetAnimation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetAnimationDelegateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetAnimationDelegateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetAnimationDelegateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetAnimationDelegateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetAnimationDelegateBinding(UObject* target, FString label, UWidgetAnimationDelegateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetAnimationDelegateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetAnimationPlayCallbackProxy* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetAnimationPlayCallbackProxy(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetAnimationPlayCallbackProxy** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetAnimationPlayCallbackProxy*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetAnimationPlayCallbackProxy(UObject* target, FString label, UWidgetAnimationPlayCallbackProxy* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetAnimationPlayCallbackProxy*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetBlueprintGeneratedClassExtension* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetBlueprintGeneratedClassExtension(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetBlueprintGeneratedClassExtension** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetBlueprintGeneratedClassExtension*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetBlueprintGeneratedClassExtension(UObject* target, FString label, UWidgetBlueprintGeneratedClassExtension* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetBlueprintGeneratedClassExtension*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetBlueprintLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetBlueprintLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetBlueprintLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetBlueprintLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetBlueprintLibrary(UObject* target, FString label, UWidgetBlueprintLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetBlueprintLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetComponent(UObject* target, FString label, UWidgetComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetInteractionComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetInteractionComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetInteractionComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetInteractionComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetInteractionComponent(UObject* target, FString label, UWidgetInteractionComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetInteractionComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetLayoutLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetLayoutLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetLayoutLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetLayoutLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetLayoutLibrary(UObject* target, FString label, UWidgetLayoutLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetLayoutLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetNavigation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetNavigation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetNavigation** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetNavigation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetNavigation(UObject* target, FString label, UWidgetNavigation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetNavigation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetTree* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetTree(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetTree** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetTree*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetTree(UObject* target, FString label, UWidgetTree* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetTree*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBoolBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBoolBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBoolBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UBoolBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBoolBinding(UObject* target, FString label, UBoolBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBoolBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBrushBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBrushBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBrushBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UBrushBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBrushBinding(UObject* target, FString label, UBrushBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBrushBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCheckedStateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCheckedStateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCheckedStateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UCheckedStateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCheckedStateBinding(UObject* target, FString label, UCheckedStateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCheckedStateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UColorBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarColorBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UColorBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UColorBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarColorBinding(UObject* target, FString label, UColorBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UColorBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UFloatBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarFloatBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UFloatBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UFloatBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarFloatBinding(UObject* target, FString label, UFloatBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UFloatBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInt32Binding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInt32Binding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInt32Binding** result = abstractBasedObject->GetInternal()->GetClassVar<UInt32Binding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInt32Binding(UObject* target, FString label, UInt32Binding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInt32Binding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMouseCursorBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMouseCursorBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMouseCursorBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UMouseCursorBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMouseCursorBinding(UObject* target, FString label, UMouseCursorBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMouseCursorBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UTextBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextBinding(UObject* target, FString label, UTextBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVisibilityBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVisibilityBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVisibilityBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UVisibilityBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVisibilityBinding(UObject* target, FString label, UVisibilityBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVisibilityBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetBinding(UObject* target, FString label, UWidgetBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

URichTextBlockImageDecorator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRichTextBlockImageDecorator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URichTextBlockImageDecorator** result = abstractBasedObject->GetInternal()->GetClassVar<URichTextBlockImageDecorator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRichTextBlockImageDecorator(UObject* target, FString label, URichTextBlockImageDecorator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URichTextBlockImageDecorator*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetFieldNotificationExtension* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetFieldNotificationExtension(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetFieldNotificationExtension** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetFieldNotificationExtension*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetFieldNotificationExtension(UObject* target, FString label, UWidgetFieldNotificationExtension* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetFieldNotificationExtension*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPanelSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPanelSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPanelSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UPanelSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPanelSlot(UObject* target, FString label, UPanelSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPanelSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidget* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidget(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidget** result = abstractBasedObject->GetInternal()->GetClassVar<UWidget*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidget(UObject* target, FString label, UWidget* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidget*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBackgroundBlurSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBackgroundBlurSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBackgroundBlurSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UBackgroundBlurSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBackgroundBlurSlot(UObject* target, FString label, UBackgroundBlurSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBackgroundBlurSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBorderSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBorderSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBorderSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UBorderSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBorderSlot(UObject* target, FString label, UBorderSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBorderSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UButtonSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarButtonSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UButtonSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UButtonSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarButtonSlot(UObject* target, FString label, UButtonSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UButtonSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCanvasPanelSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCanvasPanelSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCanvasPanelSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UCanvasPanelSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCanvasPanelSlot(UObject* target, FString label, UCanvasPanelSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCanvasPanelSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGridSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGridSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGridSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UGridSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGridSlot(UObject* target, FString label, UGridSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGridSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHorizontalBoxSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHorizontalBoxSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHorizontalBoxSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UHorizontalBoxSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHorizontalBoxSlot(UObject* target, FString label, UHorizontalBoxSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHorizontalBoxSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UOverlaySlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarOverlaySlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UOverlaySlot** result = abstractBasedObject->GetInternal()->GetClassVar<UOverlaySlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarOverlaySlot(UObject* target, FString label, UOverlaySlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UOverlaySlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

USafeZoneSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSafeZoneSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USafeZoneSlot** result = abstractBasedObject->GetInternal()->GetClassVar<USafeZoneSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSafeZoneSlot(UObject* target, FString label, USafeZoneSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USafeZoneSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UScaleBoxSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarScaleBoxSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UScaleBoxSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UScaleBoxSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarScaleBoxSlot(UObject* target, FString label, UScaleBoxSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UScaleBoxSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UScrollBoxSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarScrollBoxSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UScrollBoxSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UScrollBoxSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarScrollBoxSlot(UObject* target, FString label, UScrollBoxSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UScrollBoxSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

USizeBoxSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSizeBoxSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USizeBoxSlot** result = abstractBasedObject->GetInternal()->GetClassVar<USizeBoxSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSizeBoxSlot(UObject* target, FString label, USizeBoxSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USizeBoxSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStackBoxSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStackBoxSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStackBoxSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UStackBoxSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStackBoxSlot(UObject* target, FString label, UStackBoxSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStackBoxSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUniformGridSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUniformGridSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUniformGridSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UUniformGridSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUniformGridSlot(UObject* target, FString label, UUniformGridSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUniformGridSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVerticalBoxSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVerticalBoxSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVerticalBoxSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UVerticalBoxSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVerticalBoxSlot(UObject* target, FString label, UVerticalBoxSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVerticalBoxSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetSwitcherSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetSwitcherSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetSwitcherSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetSwitcherSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetSwitcherSlot(UObject* target, FString label, UWidgetSwitcherSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetSwitcherSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWindowTitleBarAreaSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWindowTitleBarAreaSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWindowTitleBarAreaSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UWindowTitleBarAreaSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWindowTitleBarAreaSlot(UObject* target, FString label, UWindowTitleBarAreaSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWindowTitleBarAreaSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWrapBoxSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWrapBoxSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWrapBoxSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UWrapBoxSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWrapBoxSlot(UObject* target, FString label, UWrapBoxSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWrapBoxSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCircularThrobber* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCircularThrobber(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCircularThrobber** result = abstractBasedObject->GetInternal()->GetClassVar<UCircularThrobber*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCircularThrobber(UObject* target, FString label, UCircularThrobber* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCircularThrobber*>(TCHAR_TO_UTF8(*label), value);
    }
}

UComboBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarComboBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UComboBox** result = abstractBasedObject->GetInternal()->GetClassVar<UComboBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarComboBox(UObject* target, FString label, UComboBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UComboBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UComboBoxKey* UAbstractBlueprintFunctionLibrary::GetAbsClassVarComboBoxKey(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UComboBoxKey** result = abstractBasedObject->GetInternal()->GetClassVar<UComboBoxKey*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarComboBoxKey(UObject* target, FString label, UComboBoxKey* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UComboBoxKey*>(TCHAR_TO_UTF8(*label), value);
    }
}

UComboBoxString* UAbstractBlueprintFunctionLibrary::GetAbsClassVarComboBoxString(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UComboBoxString** result = abstractBasedObject->GetInternal()->GetClassVar<UComboBoxString*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarComboBoxString(UObject* target, FString label, UComboBoxString* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UComboBoxString*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDynamicEntryBoxBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDynamicEntryBoxBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDynamicEntryBoxBase** result = abstractBasedObject->GetInternal()->GetClassVar<UDynamicEntryBoxBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDynamicEntryBoxBase(UObject* target, FString label, UDynamicEntryBoxBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDynamicEntryBoxBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEditableText* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEditableText(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEditableText** result = abstractBasedObject->GetInternal()->GetClassVar<UEditableText*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEditableText(UObject* target, FString label, UEditableText* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEditableText*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEditableTextBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEditableTextBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEditableTextBox** result = abstractBasedObject->GetInternal()->GetClassVar<UEditableTextBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEditableTextBox(UObject* target, FString label, UEditableTextBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEditableTextBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UExpandableArea* UAbstractBlueprintFunctionLibrary::GetAbsClassVarExpandableArea(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UExpandableArea** result = abstractBasedObject->GetInternal()->GetClassVar<UExpandableArea*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarExpandableArea(UObject* target, FString label, UExpandableArea* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UExpandableArea*>(TCHAR_TO_UTF8(*label), value);
    }
}

UImage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarImage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UImage** result = abstractBasedObject->GetInternal()->GetClassVar<UImage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarImage(UObject* target, FString label, UImage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UImage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputKeySelector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputKeySelector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputKeySelector** result = abstractBasedObject->GetInternal()->GetClassVar<UInputKeySelector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputKeySelector(UObject* target, FString label, UInputKeySelector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputKeySelector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UListViewBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarListViewBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UListViewBase** result = abstractBasedObject->GetInternal()->GetClassVar<UListViewBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarListViewBase(UObject* target, FString label, UListViewBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UListViewBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNativeWidgetHost* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNativeWidgetHost(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNativeWidgetHost** result = abstractBasedObject->GetInternal()->GetClassVar<UNativeWidgetHost*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNativeWidgetHost(UObject* target, FString label, UNativeWidgetHost* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNativeWidgetHost*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPanelWidget* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPanelWidget(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPanelWidget** result = abstractBasedObject->GetInternal()->GetClassVar<UPanelWidget*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPanelWidget(UObject* target, FString label, UPanelWidget* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPanelWidget*>(TCHAR_TO_UTF8(*label), value);
    }
}

UProgressBar* UAbstractBlueprintFunctionLibrary::GetAbsClassVarProgressBar(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UProgressBar** result = abstractBasedObject->GetInternal()->GetClassVar<UProgressBar*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarProgressBar(UObject* target, FString label, UProgressBar* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UProgressBar*>(TCHAR_TO_UTF8(*label), value);
    }
}

UScrollBar* UAbstractBlueprintFunctionLibrary::GetAbsClassVarScrollBar(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UScrollBar** result = abstractBasedObject->GetInternal()->GetClassVar<UScrollBar*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarScrollBar(UObject* target, FString label, UScrollBar* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UScrollBar*>(TCHAR_TO_UTF8(*label), value);
    }
}

USlider* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSlider(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USlider** result = abstractBasedObject->GetInternal()->GetClassVar<USlider*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSlider(UObject* target, FString label, USlider* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USlider*>(TCHAR_TO_UTF8(*label), value);
    }
}

USpacer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSpacer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USpacer** result = abstractBasedObject->GetInternal()->GetClassVar<USpacer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSpacer(UObject* target, FString label, USpacer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USpacer*>(TCHAR_TO_UTF8(*label), value);
    }
}

USpinBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSpinBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USpinBox** result = abstractBasedObject->GetInternal()->GetClassVar<USpinBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSpinBox(UObject* target, FString label, USpinBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USpinBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextLayoutWidget* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextLayoutWidget(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextLayoutWidget** result = abstractBasedObject->GetInternal()->GetClassVar<UTextLayoutWidget*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextLayoutWidget(UObject* target, FString label, UTextLayoutWidget* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextLayoutWidget*>(TCHAR_TO_UTF8(*label), value);
    }
}

UThrobber* UAbstractBlueprintFunctionLibrary::GetAbsClassVarThrobber(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UThrobber** result = abstractBasedObject->GetInternal()->GetClassVar<UThrobber*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarThrobber(UObject* target, FString label, UThrobber* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UThrobber*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUserWidget* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUserWidget(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUserWidget** result = abstractBasedObject->GetInternal()->GetClassVar<UUserWidget*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUserWidget(UObject* target, FString label, UUserWidget* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUserWidget*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDynamicEntryBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDynamicEntryBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDynamicEntryBox** result = abstractBasedObject->GetInternal()->GetClassVar<UDynamicEntryBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDynamicEntryBox(UObject* target, FString label, UDynamicEntryBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDynamicEntryBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UListView* UAbstractBlueprintFunctionLibrary::GetAbsClassVarListView(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UListView** result = abstractBasedObject->GetInternal()->GetClassVar<UListView*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarListView(UObject* target, FString label, UListView* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UListView*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTileView* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTileView(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTileView** result = abstractBasedObject->GetInternal()->GetClassVar<UTileView*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTileView(UObject* target, FString label, UTileView* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTileView*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTreeView* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTreeView(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTreeView** result = abstractBasedObject->GetInternal()->GetClassVar<UTreeView*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTreeView(UObject* target, FString label, UTreeView* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTreeView*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCanvasPanel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCanvasPanel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCanvasPanel** result = abstractBasedObject->GetInternal()->GetClassVar<UCanvasPanel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCanvasPanel(UObject* target, FString label, UCanvasPanel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCanvasPanel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UContentWidget* UAbstractBlueprintFunctionLibrary::GetAbsClassVarContentWidget(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UContentWidget** result = abstractBasedObject->GetInternal()->GetClassVar<UContentWidget*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarContentWidget(UObject* target, FString label, UContentWidget* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UContentWidget*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGridPanel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGridPanel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGridPanel** result = abstractBasedObject->GetInternal()->GetClassVar<UGridPanel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGridPanel(UObject* target, FString label, UGridPanel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGridPanel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHorizontalBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHorizontalBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHorizontalBox** result = abstractBasedObject->GetInternal()->GetClassVar<UHorizontalBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHorizontalBox(UObject* target, FString label, UHorizontalBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHorizontalBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UOverlay* UAbstractBlueprintFunctionLibrary::GetAbsClassVarOverlay(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UOverlay** result = abstractBasedObject->GetInternal()->GetClassVar<UOverlay*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarOverlay(UObject* target, FString label, UOverlay* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UOverlay*>(TCHAR_TO_UTF8(*label), value);
    }
}

UScrollBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarScrollBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UScrollBox** result = abstractBasedObject->GetInternal()->GetClassVar<UScrollBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarScrollBox(UObject* target, FString label, UScrollBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UScrollBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStackBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStackBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStackBox** result = abstractBasedObject->GetInternal()->GetClassVar<UStackBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStackBox(UObject* target, FString label, UStackBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStackBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUniformGridPanel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUniformGridPanel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUniformGridPanel** result = abstractBasedObject->GetInternal()->GetClassVar<UUniformGridPanel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUniformGridPanel(UObject* target, FString label, UUniformGridPanel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUniformGridPanel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVerticalBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVerticalBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVerticalBox** result = abstractBasedObject->GetInternal()->GetClassVar<UVerticalBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVerticalBox(UObject* target, FString label, UVerticalBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVerticalBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWidgetSwitcher* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWidgetSwitcher(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWidgetSwitcher** result = abstractBasedObject->GetInternal()->GetClassVar<UWidgetSwitcher*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWidgetSwitcher(UObject* target, FString label, UWidgetSwitcher* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWidgetSwitcher*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWrapBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWrapBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWrapBox** result = abstractBasedObject->GetInternal()->GetClassVar<UWrapBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWrapBox(UObject* target, FString label, UWrapBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWrapBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBackgroundBlur* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBackgroundBlur(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBackgroundBlur** result = abstractBasedObject->GetInternal()->GetClassVar<UBackgroundBlur*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBackgroundBlur(UObject* target, FString label, UBackgroundBlur* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBackgroundBlur*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBorder* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBorder(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBorder** result = abstractBasedObject->GetInternal()->GetClassVar<UBorder*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBorder(UObject* target, FString label, UBorder* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBorder*>(TCHAR_TO_UTF8(*label), value);
    }
}

UButton* UAbstractBlueprintFunctionLibrary::GetAbsClassVarButton(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UButton** result = abstractBasedObject->GetInternal()->GetClassVar<UButton*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarButton(UObject* target, FString label, UButton* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UButton*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCheckBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCheckBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCheckBox** result = abstractBasedObject->GetInternal()->GetClassVar<UCheckBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCheckBox(UObject* target, FString label, UCheckBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCheckBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInvalidationBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInvalidationBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInvalidationBox** result = abstractBasedObject->GetInternal()->GetClassVar<UInvalidationBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInvalidationBox(UObject* target, FString label, UInvalidationBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInvalidationBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMenuAnchor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMenuAnchor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMenuAnchor** result = abstractBasedObject->GetInternal()->GetClassVar<UMenuAnchor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMenuAnchor(UObject* target, FString label, UMenuAnchor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMenuAnchor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNamedSlot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNamedSlot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNamedSlot** result = abstractBasedObject->GetInternal()->GetClassVar<UNamedSlot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNamedSlot(UObject* target, FString label, UNamedSlot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNamedSlot*>(TCHAR_TO_UTF8(*label), value);
    }
}

URetainerBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRetainerBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URetainerBox** result = abstractBasedObject->GetInternal()->GetClassVar<URetainerBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRetainerBox(UObject* target, FString label, URetainerBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URetainerBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

USafeZone* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSafeZone(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USafeZone** result = abstractBasedObject->GetInternal()->GetClassVar<USafeZone*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSafeZone(UObject* target, FString label, USafeZone* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USafeZone*>(TCHAR_TO_UTF8(*label), value);
    }
}

UScaleBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarScaleBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UScaleBox** result = abstractBasedObject->GetInternal()->GetClassVar<UScaleBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarScaleBox(UObject* target, FString label, UScaleBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UScaleBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

USizeBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSizeBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USizeBox** result = abstractBasedObject->GetInternal()->GetClassVar<USizeBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSizeBox(UObject* target, FString label, USizeBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USizeBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UViewport* UAbstractBlueprintFunctionLibrary::GetAbsClassVarViewport(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UViewport** result = abstractBasedObject->GetInternal()->GetClassVar<UViewport*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarViewport(UObject* target, FString label, UViewport* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UViewport*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWindowTitleBarArea* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWindowTitleBarArea(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWindowTitleBarArea** result = abstractBasedObject->GetInternal()->GetClassVar<UWindowTitleBarArea*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWindowTitleBarArea(UObject* target, FString label, UWindowTitleBarArea* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWindowTitleBarArea*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMultiLineEditableText* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMultiLineEditableText(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMultiLineEditableText** result = abstractBasedObject->GetInternal()->GetClassVar<UMultiLineEditableText*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMultiLineEditableText(UObject* target, FString label, UMultiLineEditableText* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMultiLineEditableText*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMultiLineEditableTextBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMultiLineEditableTextBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMultiLineEditableTextBox** result = abstractBasedObject->GetInternal()->GetClassVar<UMultiLineEditableTextBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMultiLineEditableTextBox(UObject* target, FString label, UMultiLineEditableTextBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMultiLineEditableTextBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

URichTextBlock* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRichTextBlock(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URichTextBlock** result = abstractBasedObject->GetInternal()->GetClassVar<URichTextBlock*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRichTextBlock(UObject* target, FString label, URichTextBlock* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URichTextBlock*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextBlock* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextBlock(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextBlock** result = abstractBasedObject->GetInternal()->GetClassVar<UTextBlock*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextBlock(UObject* target, FString label, UTextBlock* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextBlock*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCrowdManagerBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCrowdManagerBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCrowdManagerBase** result = abstractBasedObject->GetInternal()->GetClassVar<UCrowdManagerBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCrowdManagerBase(UObject* target, FString label, UCrowdManagerBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCrowdManagerBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavArea* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavArea(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavArea** result = abstractBasedObject->GetInternal()->GetClassVar<UNavArea*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavArea(UObject* target, FString label, UNavArea* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavArea*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavCollision* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavCollision(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavCollision** result = abstractBasedObject->GetInternal()->GetClassVar<UNavCollision*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavCollision(UObject* target, FString label, UNavCollision* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavCollision*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavigationData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavigationData** result = abstractBasedObject->GetInternal()->GetClassVar<ANavigationData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationData(UObject* target, FString label, ANavigationData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavigationData*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavigationGraphNode* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationGraphNode(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavigationGraphNode** result = abstractBasedObject->GetInternal()->GetClassVar<ANavigationGraphNode*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationGraphNode(UObject* target, FString label, ANavigationGraphNode* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavigationGraphNode*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavigationGraphNodeComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationGraphNodeComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavigationGraphNodeComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavigationGraphNodeComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationGraphNodeComponent(UObject* target, FString label, UNavigationGraphNodeComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavigationGraphNodeComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavigationInvokerComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationInvokerComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavigationInvokerComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavigationInvokerComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationInvokerComponent(UObject* target, FString label, UNavigationInvokerComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavigationInvokerComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavigationPath* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationPath(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavigationPath** result = abstractBasedObject->GetInternal()->GetClassVar<UNavigationPath*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationPath(UObject* target, FString label, UNavigationPath* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavigationPath*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavigationQueryFilter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationQueryFilter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavigationQueryFilter** result = abstractBasedObject->GetInternal()->GetClassVar<UNavigationQueryFilter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationQueryFilter(UObject* target, FString label, UNavigationQueryFilter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavigationQueryFilter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavigationSystemModuleConfig* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationSystemModuleConfig(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavigationSystemModuleConfig** result = abstractBasedObject->GetInternal()->GetClassVar<UNavigationSystemModuleConfig*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationSystemModuleConfig(UObject* target, FString label, UNavigationSystemModuleConfig* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavigationSystemModuleConfig*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavigationSystemV1* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationSystemV1(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavigationSystemV1** result = abstractBasedObject->GetInternal()->GetClassVar<UNavigationSystemV1*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationSystemV1(UObject* target, FString label, UNavigationSystemV1* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavigationSystemV1*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavigationTestingActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationTestingActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavigationTestingActor** result = abstractBasedObject->GetInternal()->GetClassVar<ANavigationTestingActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationTestingActor(UObject* target, FString label, ANavigationTestingActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavigationTestingActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavLinkComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavLinkComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavLinkComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavLinkComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavLinkComponent(UObject* target, FString label, UNavLinkComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavLinkComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavLinkRenderingComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavLinkRenderingComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavLinkRenderingComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavLinkRenderingComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavLinkRenderingComponent(UObject* target, FString label, UNavLinkRenderingComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavLinkRenderingComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavLinkTrivial* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavLinkTrivial(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavLinkTrivial** result = abstractBasedObject->GetInternal()->GetClassVar<UNavLinkTrivial*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavLinkTrivial(UObject* target, FString label, UNavLinkTrivial* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavLinkTrivial*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavMeshBoundsVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavMeshBoundsVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavMeshBoundsVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ANavMeshBoundsVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavMeshBoundsVolume(UObject* target, FString label, ANavMeshBoundsVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavMeshBoundsVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavMeshRenderingComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavMeshRenderingComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavMeshRenderingComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavMeshRenderingComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavMeshRenderingComponent(UObject* target, FString label, UNavMeshRenderingComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavMeshRenderingComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavModifierVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavModifierVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavModifierVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ANavModifierVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavModifierVolume(UObject* target, FString label, ANavModifierVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavModifierVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavRelevantComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavRelevantComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavRelevantComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavRelevantComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavRelevantComponent(UObject* target, FString label, UNavRelevantComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavRelevantComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavSystemConfigOverride* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavSystemConfigOverride(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavSystemConfigOverride** result = abstractBasedObject->GetInternal()->GetClassVar<ANavSystemConfigOverride*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavSystemConfigOverride(UObject* target, FString label, ANavSystemConfigOverride* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavSystemConfigOverride*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavTestRenderingComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavTestRenderingComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavTestRenderingComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavTestRenderingComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavTestRenderingComponent(UObject* target, FString label, UNavTestRenderingComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavTestRenderingComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

URecastNavMeshDataChunk* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRecastNavMeshDataChunk(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URecastNavMeshDataChunk** result = abstractBasedObject->GetInternal()->GetClassVar<URecastNavMeshDataChunk*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRecastNavMeshDataChunk(UObject* target, FString label, URecastNavMeshDataChunk* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URecastNavMeshDataChunk*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavArea_Default* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavArea_Default(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavArea_Default** result = abstractBasedObject->GetInternal()->GetClassVar<UNavArea_Default*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavArea_Default(UObject* target, FString label, UNavArea_Default* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavArea_Default*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavArea_LowHeight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavArea_LowHeight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavArea_LowHeight** result = abstractBasedObject->GetInternal()->GetClassVar<UNavArea_LowHeight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavArea_LowHeight(UObject* target, FString label, UNavArea_LowHeight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavArea_LowHeight*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavArea_Null* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavArea_Null(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavArea_Null** result = abstractBasedObject->GetInternal()->GetClassVar<UNavArea_Null*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavArea_Null(UObject* target, FString label, UNavArea_Null* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavArea_Null*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavArea_Obstacle* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavArea_Obstacle(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavArea_Obstacle** result = abstractBasedObject->GetInternal()->GetClassVar<UNavArea_Obstacle*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavArea_Obstacle(UObject* target, FString label, UNavArea_Obstacle* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavArea_Obstacle*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavAreaMeta* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavAreaMeta(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavAreaMeta** result = abstractBasedObject->GetInternal()->GetClassVar<UNavAreaMeta*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavAreaMeta(UObject* target, FString label, UNavAreaMeta* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavAreaMeta*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavAreaMeta_SwitchByAgent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavAreaMeta_SwitchByAgent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavAreaMeta_SwitchByAgent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavAreaMeta_SwitchByAgent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavAreaMeta_SwitchByAgent(UObject* target, FString label, UNavAreaMeta_SwitchByAgent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavAreaMeta_SwitchByAgent*>(TCHAR_TO_UTF8(*label), value);
    }
}

AAbstractNavData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAbstractNavData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AAbstractNavData** result = abstractBasedObject->GetInternal()->GetClassVar<AAbstractNavData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAbstractNavData(UObject* target, FString label, AAbstractNavData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AAbstractNavData*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavigationGraph* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationGraph(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavigationGraph** result = abstractBasedObject->GetInternal()->GetClassVar<ANavigationGraph*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationGraph(UObject* target, FString label, ANavigationGraph* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavigationGraph*>(TCHAR_TO_UTF8(*label), value);
    }
}

ARecastNavMesh* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRecastNavMesh(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ARecastNavMesh** result = abstractBasedObject->GetInternal()->GetClassVar<ARecastNavMesh*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRecastNavMesh(UObject* target, FString label, ARecastNavMesh* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ARecastNavMesh*>(TCHAR_TO_UTF8(*label), value);
    }
}

URecastFilter_UseDefaultArea* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRecastFilter_UseDefaultArea(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URecastFilter_UseDefaultArea** result = abstractBasedObject->GetInternal()->GetClassVar<URecastFilter_UseDefaultArea*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRecastFilter_UseDefaultArea(UObject* target, FString label, URecastFilter_UseDefaultArea* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URecastFilter_UseDefaultArea*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavLinkCustomComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavLinkCustomComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavLinkCustomComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavLinkCustomComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavLinkCustomComponent(UObject* target, FString label, UNavLinkCustomComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavLinkCustomComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavModifierComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavModifierComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavModifierComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavModifierComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavModifierComponent(UObject* target, FString label, UNavModifierComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavModifierComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIAsyncTaskBlueprintProxy* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIAsyncTaskBlueprintProxy(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIAsyncTaskBlueprintProxy** result = abstractBasedObject->GetInternal()->GetClassVar<UAIAsyncTaskBlueprintProxy*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIAsyncTaskBlueprintProxy(UObject* target, FString label, UAIAsyncTaskBlueprintProxy* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIAsyncTaskBlueprintProxy*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIBlueprintHelperLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIBlueprintHelperLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIBlueprintHelperLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UAIBlueprintHelperLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIBlueprintHelperLibrary(UObject* target, FString label, UAIBlueprintHelperLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIBlueprintHelperLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

AAIController* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIController(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AAIController** result = abstractBasedObject->GetInternal()->GetClassVar<AAIController*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIController(UObject* target, FString label, AAIController* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AAIController*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIDataProvider* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIDataProvider(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIDataProvider** result = abstractBasedObject->GetInternal()->GetClassVar<UAIDataProvider*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIDataProvider(UObject* target, FString label, UAIDataProvider* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIDataProvider*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIHotSpotManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIHotSpotManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIHotSpotManager** result = abstractBasedObject->GetInternal()->GetClassVar<UAIHotSpotManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIHotSpotManager(UObject* target, FString label, UAIHotSpotManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIHotSpotManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIPerceptionComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIPerceptionComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIPerceptionComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UAIPerceptionComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIPerceptionComponent(UObject* target, FString label, UAIPerceptionComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIPerceptionComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIPerceptionStimuliSourceComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIPerceptionStimuliSourceComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIPerceptionStimuliSourceComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UAIPerceptionStimuliSourceComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIPerceptionStimuliSourceComponent(UObject* target, FString label, UAIPerceptionStimuliSourceComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIPerceptionStimuliSourceComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIResource_Logic* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIResource_Logic(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIResource_Logic** result = abstractBasedObject->GetInternal()->GetClassVar<UAIResource_Logic*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIResource_Logic(UObject* target, FString label, UAIResource_Logic* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIResource_Logic*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIResource_Movement* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIResource_Movement(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIResource_Movement** result = abstractBasedObject->GetInternal()->GetClassVar<UAIResource_Movement*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIResource_Movement(UObject* target, FString label, UAIResource_Movement* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIResource_Movement*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISense* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISense(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISense** result = abstractBasedObject->GetInternal()->GetClassVar<UAISense*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISense(UObject* target, FString label, UAISense* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISense*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseBlueprintListener* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseBlueprintListener(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseBlueprintListener** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseBlueprintListener*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseBlueprintListener(UObject* target, FString label, UAISenseBlueprintListener* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseBlueprintListener*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseConfig* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseConfig(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseConfig** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseConfig*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseConfig(UObject* target, FString label, UAISenseConfig* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseConfig*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseEvent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseEvent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseEvent** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseEvent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseEvent(UObject* target, FString label, UAISenseEvent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseEvent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UAISubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISubsystem(UObject* target, FString label, UAISubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISystem** result = abstractBasedObject->GetInternal()->GetClassVar<UAISystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISystem(UObject* target, FString label, UAISystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAITask* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAITask(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAITask** result = abstractBasedObject->GetInternal()->GetClassVar<UAITask*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAITask(UObject* target, FString label, UAITask* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAITask*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBehaviorTree* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBehaviorTree(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBehaviorTree** result = abstractBasedObject->GetInternal()->GetClassVar<UBehaviorTree*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBehaviorTree(UObject* target, FString label, UBehaviorTree* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBehaviorTree*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBehaviorTreeManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBehaviorTreeManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBehaviorTreeManager** result = abstractBasedObject->GetInternal()->GetClassVar<UBehaviorTreeManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBehaviorTreeManager(UObject* target, FString label, UBehaviorTreeManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBehaviorTreeManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBehaviorTreeTypes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBehaviorTreeTypes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBehaviorTreeTypes** result = abstractBasedObject->GetInternal()->GetClassVar<UBehaviorTreeTypes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBehaviorTreeTypes(UObject* target, FString label, UBehaviorTreeTypes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBehaviorTreeTypes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlackboardComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlackboardComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlackboardComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UBlackboardComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlackboardComponent(UObject* target, FString label, UBlackboardComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlackboardComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlackboardData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlackboardData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlackboardData** result = abstractBasedObject->GetInternal()->GetClassVar<UBlackboardData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlackboardData(UObject* target, FString label, UBlackboardData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlackboardData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlackboardKeyType* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlackboardKeyType(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlackboardKeyType** result = abstractBasedObject->GetInternal()->GetClassVar<UBlackboardKeyType*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlackboardKeyType(UObject* target, FString label, UBlackboardKeyType* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlackboardKeyType*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBrainComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBrainComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBrainComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UBrainComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBrainComponent(UObject* target, FString label, UBrainComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBrainComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTFunctionLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTFunctionLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTFunctionLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UBTFunctionLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTFunctionLibrary(UObject* target, FString label, UBTFunctionLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTFunctionLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTNode* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTNode(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTNode** result = abstractBasedObject->GetInternal()->GetClassVar<UBTNode*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTNode(UObject* target, FString label, UBTNode* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTNode*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCrowdManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCrowdManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCrowdManager** result = abstractBasedObject->GetInternal()->GetClassVar<UCrowdManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCrowdManager(UObject* target, FString label, UCrowdManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCrowdManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQuery* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQuery(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQuery** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQuery*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQuery(UObject* target, FString label, UEnvQuery* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQuery*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryContext* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryContext(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryContext** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryContext*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryContext(UObject* target, FString label, UEnvQueryContext* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryContext*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryDebugHelpers* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryDebugHelpers(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryDebugHelpers** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryDebugHelpers*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryDebugHelpers(UObject* target, FString label, UEnvQueryDebugHelpers* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryDebugHelpers*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryInstanceBlueprintWrapper* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryInstanceBlueprintWrapper(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryInstanceBlueprintWrapper** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryInstanceBlueprintWrapper*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryInstanceBlueprintWrapper(UObject* target, FString label, UEnvQueryInstanceBlueprintWrapper* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryInstanceBlueprintWrapper*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryItemType* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryItemType(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryItemType** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryItemType*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryItemType(UObject* target, FString label, UEnvQueryItemType* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryItemType*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryNode* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryNode(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryNode** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryNode*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryNode(UObject* target, FString label, UEnvQueryNode* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryNode*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryOption* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryOption(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryOption** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryOption*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryOption(UObject* target, FString label, UEnvQueryOption* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryOption*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTypes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTypes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTypes** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTypes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTypes(UObject* target, FString label, UEnvQueryTypes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTypes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEQSRenderingComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEQSRenderingComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEQSRenderingComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UEQSRenderingComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEQSRenderingComponent(UObject* target, FString label, UEQSRenderingComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEQSRenderingComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

AEQSTestingPawn* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEQSTestingPawn(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AEQSTestingPawn** result = abstractBasedObject->GetInternal()->GetClassVar<AEQSTestingPawn*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEQSTestingPawn(UObject* target, FString label, AEQSTestingPawn* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AEQSTestingPawn*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavFilter_AIControllerDefault* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavFilter_AIControllerDefault(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavFilter_AIControllerDefault** result = abstractBasedObject->GetInternal()->GetClassVar<UNavFilter_AIControllerDefault*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavFilter_AIControllerDefault(UObject* target, FString label, UNavFilter_AIControllerDefault* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavFilter_AIControllerDefault*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavLinkProxy* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavLinkProxy(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavLinkProxy** result = abstractBasedObject->GetInternal()->GetClassVar<ANavLinkProxy*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavLinkProxy(UObject* target, FString label, ANavLinkProxy* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavLinkProxy*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavLocalGridManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavLocalGridManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavLocalGridManager** result = abstractBasedObject->GetInternal()->GetClassVar<UNavLocalGridManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavLocalGridManager(UObject* target, FString label, UNavLocalGridManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavLocalGridManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPathFollowingComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPathFollowingComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPathFollowingComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPathFollowingComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPathFollowingComponent(UObject* target, FString label, UPathFollowingComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPathFollowingComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPathFollowingManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPathFollowingManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPathFollowingManager** result = abstractBasedObject->GetInternal()->GetClassVar<UPathFollowingManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPathFollowingManager(UObject* target, FString label, UPathFollowingManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPathFollowingManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnAction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnAction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnAction** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnAction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnAction(UObject* target, FString label, UPawnAction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnAction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnActionsComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnActionsComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnActionsComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnActionsComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnActionsComponent(UObject* target, FString label, UPawnActionsComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnActionsComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnSensingComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnSensingComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnSensingComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnSensingComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnSensingComponent(UObject* target, FString label, UPawnSensingComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnSensingComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVisualLoggerExtension* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVisualLoggerExtension(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVisualLoggerExtension** result = abstractBasedObject->GetInternal()->GetClassVar<UVisualLoggerExtension*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVisualLoggerExtension(UObject* target, FString label, UVisualLoggerExtension* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVisualLoggerExtension*>(TCHAR_TO_UTF8(*label), value);
    }
}

ADetourCrowdAIController* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDetourCrowdAIController(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ADetourCrowdAIController** result = abstractBasedObject->GetInternal()->GetClassVar<ADetourCrowdAIController*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDetourCrowdAIController(UObject* target, FString label, ADetourCrowdAIController* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ADetourCrowdAIController*>(TCHAR_TO_UTF8(*label), value);
    }
}

AGridPathAIController* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGridPathAIController(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AGridPathAIController** result = abstractBasedObject->GetInternal()->GetClassVar<AGridPathAIController*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGridPathAIController(UObject* target, FString label, AGridPathAIController* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AGridPathAIController*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIDataProvider_QueryParams* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIDataProvider_QueryParams(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIDataProvider_QueryParams** result = abstractBasedObject->GetInternal()->GetClassVar<UAIDataProvider_QueryParams*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIDataProvider_QueryParams(UObject* target, FString label, UAIDataProvider_QueryParams* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIDataProvider_QueryParams*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIDataProvider_Random* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIDataProvider_Random(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIDataProvider_Random** result = abstractBasedObject->GetInternal()->GetClassVar<UAIDataProvider_Random*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIDataProvider_Random(UObject* target, FString label, UAIDataProvider_Random* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIDataProvider_Random*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISense_Blueprint* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISense_Blueprint(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISense_Blueprint** result = abstractBasedObject->GetInternal()->GetClassVar<UAISense_Blueprint*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISense_Blueprint(UObject* target, FString label, UAISense_Blueprint* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISense_Blueprint*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISense_Damage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISense_Damage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISense_Damage** result = abstractBasedObject->GetInternal()->GetClassVar<UAISense_Damage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISense_Damage(UObject* target, FString label, UAISense_Damage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISense_Damage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISense_Hearing* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISense_Hearing(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISense_Hearing** result = abstractBasedObject->GetInternal()->GetClassVar<UAISense_Hearing*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISense_Hearing(UObject* target, FString label, UAISense_Hearing* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISense_Hearing*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISense_Prediction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISense_Prediction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISense_Prediction** result = abstractBasedObject->GetInternal()->GetClassVar<UAISense_Prediction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISense_Prediction(UObject* target, FString label, UAISense_Prediction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISense_Prediction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISense_Sight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISense_Sight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISense_Sight** result = abstractBasedObject->GetInternal()->GetClassVar<UAISense_Sight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISense_Sight(UObject* target, FString label, UAISense_Sight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISense_Sight*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISense_Team* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISense_Team(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISense_Team** result = abstractBasedObject->GetInternal()->GetClassVar<UAISense_Team*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISense_Team(UObject* target, FString label, UAISense_Team* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISense_Team*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISense_Touch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISense_Touch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISense_Touch** result = abstractBasedObject->GetInternal()->GetClassVar<UAISense_Touch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISense_Touch(UObject* target, FString label, UAISense_Touch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISense_Touch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseConfig_Blueprint* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseConfig_Blueprint(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseConfig_Blueprint** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseConfig_Blueprint*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseConfig_Blueprint(UObject* target, FString label, UAISenseConfig_Blueprint* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseConfig_Blueprint*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseConfig_Damage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseConfig_Damage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseConfig_Damage** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseConfig_Damage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseConfig_Damage(UObject* target, FString label, UAISenseConfig_Damage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseConfig_Damage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseConfig_Hearing* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseConfig_Hearing(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseConfig_Hearing** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseConfig_Hearing*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseConfig_Hearing(UObject* target, FString label, UAISenseConfig_Hearing* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseConfig_Hearing*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseConfig_Prediction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseConfig_Prediction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseConfig_Prediction** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseConfig_Prediction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseConfig_Prediction(UObject* target, FString label, UAISenseConfig_Prediction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseConfig_Prediction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseConfig_Sight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseConfig_Sight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseConfig_Sight** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseConfig_Sight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseConfig_Sight(UObject* target, FString label, UAISenseConfig_Sight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseConfig_Sight*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseConfig_Team* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseConfig_Team(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseConfig_Team** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseConfig_Team*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseConfig_Team(UObject* target, FString label, UAISenseConfig_Team* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseConfig_Team*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseConfig_Touch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseConfig_Touch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseConfig_Touch** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseConfig_Touch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseConfig_Touch(UObject* target, FString label, UAISenseConfig_Touch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseConfig_Touch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseEvent_Damage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseEvent_Damage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseEvent_Damage** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseEvent_Damage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseEvent_Damage(UObject* target, FString label, UAISenseEvent_Damage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseEvent_Damage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISenseEvent_Hearing* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISenseEvent_Hearing(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISenseEvent_Hearing** result = abstractBasedObject->GetInternal()->GetClassVar<UAISenseEvent_Hearing*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISenseEvent_Hearing(UObject* target, FString label, UAISenseEvent_Hearing* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISenseEvent_Hearing*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAIPerceptionSystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAIPerceptionSystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAIPerceptionSystem** result = abstractBasedObject->GetInternal()->GetClassVar<UAIPerceptionSystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAIPerceptionSystem(UObject* target, FString label, UAIPerceptionSystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAIPerceptionSystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryManager** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryManager(UObject* target, FString label, UEnvQueryManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAITask_LockLogic* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAITask_LockLogic(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAITask_LockLogic** result = abstractBasedObject->GetInternal()->GetClassVar<UAITask_LockLogic*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAITask_LockLogic(UObject* target, FString label, UAITask_LockLogic* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAITask_LockLogic*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAITask_MoveTo* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAITask_MoveTo(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAITask_MoveTo** result = abstractBasedObject->GetInternal()->GetClassVar<UAITask_MoveTo*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAITask_MoveTo(UObject* target, FString label, UAITask_MoveTo* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAITask_MoveTo*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAITask_RunEQS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAITask_RunEQS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAITask_RunEQS** result = abstractBasedObject->GetInternal()->GetClassVar<UAITask_RunEQS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAITask_RunEQS(UObject* target, FString label, UAITask_RunEQS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAITask_RunEQS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlackboardKeyType_Enum* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlackboardKeyType_Enum(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlackboardKeyType_Enum** result = abstractBasedObject->GetInternal()->GetClassVar<UBlackboardKeyType_Enum*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlackboardKeyType_Enum(UObject* target, FString label, UBlackboardKeyType_Enum* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlackboardKeyType_Enum*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlackboardKeyType_NativeEnum* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlackboardKeyType_NativeEnum(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlackboardKeyType_NativeEnum** result = abstractBasedObject->GetInternal()->GetClassVar<UBlackboardKeyType_NativeEnum*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlackboardKeyType_NativeEnum(UObject* target, FString label, UBlackboardKeyType_NativeEnum* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlackboardKeyType_NativeEnum*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBehaviorTreeComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBehaviorTreeComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBehaviorTreeComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UBehaviorTreeComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBehaviorTreeComponent(UObject* target, FString label, UBehaviorTreeComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBehaviorTreeComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTAuxiliaryNode* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTAuxiliaryNode(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTAuxiliaryNode** result = abstractBasedObject->GetInternal()->GetClassVar<UBTAuxiliaryNode*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTAuxiliaryNode(UObject* target, FString label, UBTAuxiliaryNode* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTAuxiliaryNode*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTCompositeNode* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTCompositeNode(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTCompositeNode** result = abstractBasedObject->GetInternal()->GetClassVar<UBTCompositeNode*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTCompositeNode(UObject* target, FString label, UBTCompositeNode* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTCompositeNode*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTaskNode* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTaskNode(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTaskNode** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTaskNode*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTaskNode(UObject* target, FString label, UBTTaskNode* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTaskNode*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator(UObject* target, FString label, UBTDecorator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTService* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTService(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTService** result = abstractBasedObject->GetInternal()->GetClassVar<UBTService*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTService(UObject* target, FString label, UBTService* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTService*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_BlackboardBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_BlackboardBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_BlackboardBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_BlackboardBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_BlackboardBase(UObject* target, FString label, UBTDecorator_BlackboardBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_BlackboardBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_BlueprintBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_BlueprintBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_BlueprintBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_BlueprintBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_BlueprintBase(UObject* target, FString label, UBTDecorator_BlueprintBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_BlueprintBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_CheckGameplayTagsOnActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_CheckGameplayTagsOnActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_CheckGameplayTagsOnActor** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_CheckGameplayTagsOnActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_CheckGameplayTagsOnActor(UObject* target, FString label, UBTDecorator_CheckGameplayTagsOnActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_CheckGameplayTagsOnActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_CompareBBEntries* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_CompareBBEntries(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_CompareBBEntries** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_CompareBBEntries*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_CompareBBEntries(UObject* target, FString label, UBTDecorator_CompareBBEntries* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_CompareBBEntries*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_ConeCheck* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_ConeCheck(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_ConeCheck** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_ConeCheck*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_ConeCheck(UObject* target, FString label, UBTDecorator_ConeCheck* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_ConeCheck*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_Cooldown* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_Cooldown(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_Cooldown** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_Cooldown*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_Cooldown(UObject* target, FString label, UBTDecorator_Cooldown* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_Cooldown*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_DoesPathExist* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_DoesPathExist(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_DoesPathExist** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_DoesPathExist*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_DoesPathExist(UObject* target, FString label, UBTDecorator_DoesPathExist* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_DoesPathExist*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_ForceSuccess* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_ForceSuccess(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_ForceSuccess** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_ForceSuccess*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_ForceSuccess(UObject* target, FString label, UBTDecorator_ForceSuccess* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_ForceSuccess*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_KeepInCone* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_KeepInCone(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_KeepInCone** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_KeepInCone*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_KeepInCone(UObject* target, FString label, UBTDecorator_KeepInCone* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_KeepInCone*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_Loop* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_Loop(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_Loop** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_Loop*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_Loop(UObject* target, FString label, UBTDecorator_Loop* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_Loop*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_ReachedMoveGoal* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_ReachedMoveGoal(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_ReachedMoveGoal** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_ReachedMoveGoal*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_ReachedMoveGoal(UObject* target, FString label, UBTDecorator_ReachedMoveGoal* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_ReachedMoveGoal*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_SetTagCooldown* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_SetTagCooldown(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_SetTagCooldown** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_SetTagCooldown*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_SetTagCooldown(UObject* target, FString label, UBTDecorator_SetTagCooldown* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_SetTagCooldown*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_TagCooldown* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_TagCooldown(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_TagCooldown** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_TagCooldown*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_TagCooldown(UObject* target, FString label, UBTDecorator_TagCooldown* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_TagCooldown*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_TimeLimit* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_TimeLimit(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_TimeLimit** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_TimeLimit*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_TimeLimit(UObject* target, FString label, UBTDecorator_TimeLimit* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_TimeLimit*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_Blackboard* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_Blackboard(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_Blackboard** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_Blackboard*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_Blackboard(UObject* target, FString label, UBTDecorator_Blackboard* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_Blackboard*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_IsAtLocation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_IsAtLocation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_IsAtLocation** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_IsAtLocation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_IsAtLocation(UObject* target, FString label, UBTDecorator_IsAtLocation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_IsAtLocation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_IsBBEntryOfClass* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_IsBBEntryOfClass(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_IsBBEntryOfClass** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_IsBBEntryOfClass*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_IsBBEntryOfClass(UObject* target, FString label, UBTDecorator_IsBBEntryOfClass* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_IsBBEntryOfClass*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTDecorator_ConditionalLoop* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTDecorator_ConditionalLoop(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTDecorator_ConditionalLoop** result = abstractBasedObject->GetInternal()->GetClassVar<UBTDecorator_ConditionalLoop*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTDecorator_ConditionalLoop(UObject* target, FString label, UBTDecorator_ConditionalLoop* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTDecorator_ConditionalLoop*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTService_BlackboardBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTService_BlackboardBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTService_BlackboardBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBTService_BlackboardBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTService_BlackboardBase(UObject* target, FString label, UBTService_BlackboardBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTService_BlackboardBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTService_BlueprintBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTService_BlueprintBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTService_BlueprintBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBTService_BlueprintBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTService_BlueprintBase(UObject* target, FString label, UBTService_BlueprintBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTService_BlueprintBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTService_DefaultFocus* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTService_DefaultFocus(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTService_DefaultFocus** result = abstractBasedObject->GetInternal()->GetClassVar<UBTService_DefaultFocus*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTService_DefaultFocus(UObject* target, FString label, UBTService_DefaultFocus* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTService_DefaultFocus*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTService_RunEQS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTService_RunEQS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTService_RunEQS** result = abstractBasedObject->GetInternal()->GetClassVar<UBTService_RunEQS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTService_RunEQS(UObject* target, FString label, UBTService_RunEQS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTService_RunEQS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTComposite_Selector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTComposite_Selector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTComposite_Selector** result = abstractBasedObject->GetInternal()->GetClassVar<UBTComposite_Selector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTComposite_Selector(UObject* target, FString label, UBTComposite_Selector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTComposite_Selector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTComposite_Sequence* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTComposite_Sequence(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTComposite_Sequence** result = abstractBasedObject->GetInternal()->GetClassVar<UBTComposite_Sequence*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTComposite_Sequence(UObject* target, FString label, UBTComposite_Sequence* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTComposite_Sequence*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTComposite_SimpleParallel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTComposite_SimpleParallel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTComposite_SimpleParallel** result = abstractBasedObject->GetInternal()->GetClassVar<UBTComposite_SimpleParallel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTComposite_SimpleParallel(UObject* target, FString label, UBTComposite_SimpleParallel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTComposite_SimpleParallel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_BlackboardBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_BlackboardBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_BlackboardBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_BlackboardBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_BlackboardBase(UObject* target, FString label, UBTTask_BlackboardBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_BlackboardBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_BlueprintBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_BlueprintBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_BlueprintBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_BlueprintBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_BlueprintBase(UObject* target, FString label, UBTTask_BlueprintBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_BlueprintBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_FinishWithResult* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_FinishWithResult(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_FinishWithResult** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_FinishWithResult*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_FinishWithResult(UObject* target, FString label, UBTTask_FinishWithResult* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_FinishWithResult*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_GameplayTaskBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_GameplayTaskBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_GameplayTaskBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_GameplayTaskBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_GameplayTaskBase(UObject* target, FString label, UBTTask_GameplayTaskBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_GameplayTaskBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_MakeNoise* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_MakeNoise(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_MakeNoise** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_MakeNoise*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_MakeNoise(UObject* target, FString label, UBTTask_MakeNoise* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_MakeNoise*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_PawnActionBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_PawnActionBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_PawnActionBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_PawnActionBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_PawnActionBase(UObject* target, FString label, UBTTask_PawnActionBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_PawnActionBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_PlayAnimation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_PlayAnimation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_PlayAnimation** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_PlayAnimation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_PlayAnimation(UObject* target, FString label, UBTTask_PlayAnimation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_PlayAnimation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_PlaySound* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_PlaySound(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_PlaySound** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_PlaySound*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_PlaySound(UObject* target, FString label, UBTTask_PlaySound* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_PlaySound*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_RunBehavior* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_RunBehavior(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_RunBehavior** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_RunBehavior*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_RunBehavior(UObject* target, FString label, UBTTask_RunBehavior* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_RunBehavior*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_RunBehaviorDynamic* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_RunBehaviorDynamic(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_RunBehaviorDynamic** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_RunBehaviorDynamic*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_RunBehaviorDynamic(UObject* target, FString label, UBTTask_RunBehaviorDynamic* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_RunBehaviorDynamic*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_SetTagCooldown* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_SetTagCooldown(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_SetTagCooldown** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_SetTagCooldown*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_SetTagCooldown(UObject* target, FString label, UBTTask_SetTagCooldown* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_SetTagCooldown*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_Wait* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_Wait(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_Wait** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_Wait*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_Wait(UObject* target, FString label, UBTTask_Wait* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_Wait*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_MoveTo* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_MoveTo(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_MoveTo** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_MoveTo*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_MoveTo(UObject* target, FString label, UBTTask_MoveTo* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_MoveTo*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_RotateToFaceBBEntry* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_RotateToFaceBBEntry(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_RotateToFaceBBEntry** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_RotateToFaceBBEntry*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_RotateToFaceBBEntry(UObject* target, FString label, UBTTask_RotateToFaceBBEntry* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_RotateToFaceBBEntry*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_RunEQSQuery* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_RunEQSQuery(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_RunEQSQuery** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_RunEQSQuery*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_RunEQSQuery(UObject* target, FString label, UBTTask_RunEQSQuery* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_RunEQSQuery*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_MoveDirectlyToward* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_MoveDirectlyToward(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_MoveDirectlyToward** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_MoveDirectlyToward*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_MoveDirectlyToward(UObject* target, FString label, UBTTask_MoveDirectlyToward* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_MoveDirectlyToward*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_PushPawnAction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_PushPawnAction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_PushPawnAction** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_PushPawnAction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_PushPawnAction(UObject* target, FString label, UBTTask_PushPawnAction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_PushPawnAction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_WaitBlackboardTime* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_WaitBlackboardTime(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_WaitBlackboardTime** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_WaitBlackboardTime*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_WaitBlackboardTime(UObject* target, FString label, UBTTask_WaitBlackboardTime* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_WaitBlackboardTime*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryContext_BlueprintBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryContext_BlueprintBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryContext_BlueprintBase** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryContext_BlueprintBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryContext_BlueprintBase(UObject* target, FString label, UEnvQueryContext_BlueprintBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryContext_BlueprintBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryContext_Item* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryContext_Item(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryContext_Item** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryContext_Item*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryContext_Item(UObject* target, FString label, UEnvQueryContext_Item* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryContext_Item*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryContext_Querier* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryContext_Querier(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryContext_Querier** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryContext_Querier*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryContext_Querier(UObject* target, FString label, UEnvQueryContext_Querier* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryContext_Querier*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryItemType_VectorBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryItemType_VectorBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryItemType_VectorBase** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryItemType_VectorBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryItemType_VectorBase(UObject* target, FString label, UEnvQueryItemType_VectorBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryItemType_VectorBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryItemType_ActorBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryItemType_ActorBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryItemType_ActorBase** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryItemType_ActorBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryItemType_ActorBase(UObject* target, FString label, UEnvQueryItemType_ActorBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryItemType_ActorBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryItemType_Direction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryItemType_Direction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryItemType_Direction** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryItemType_Direction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryItemType_Direction(UObject* target, FString label, UEnvQueryItemType_Direction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryItemType_Direction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryItemType_Point* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryItemType_Point(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryItemType_Point** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryItemType_Point*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryItemType_Point(UObject* target, FString label, UEnvQueryItemType_Point* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryItemType_Point*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryItemType_Actor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryItemType_Actor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryItemType_Actor** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryItemType_Actor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryItemType_Actor(UObject* target, FString label, UEnvQueryItemType_Actor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryItemType_Actor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator(UObject* target, FString label, UEnvQueryGenerator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest(UObject* target, FString label, UEnvQueryTest* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_ActorsOfClass* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_ActorsOfClass(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_ActorsOfClass** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_ActorsOfClass*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_ActorsOfClass(UObject* target, FString label, UEnvQueryGenerator_ActorsOfClass* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_ActorsOfClass*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_BlueprintBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_BlueprintBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_BlueprintBase** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_BlueprintBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_BlueprintBase(UObject* target, FString label, UEnvQueryGenerator_BlueprintBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_BlueprintBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_Composite* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_Composite(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_Composite** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_Composite*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_Composite(UObject* target, FString label, UEnvQueryGenerator_Composite* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_Composite*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_CurrentLocation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_CurrentLocation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_CurrentLocation** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_CurrentLocation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_CurrentLocation(UObject* target, FString label, UEnvQueryGenerator_CurrentLocation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_CurrentLocation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_PerceivedActors* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_PerceivedActors(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_PerceivedActors** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_PerceivedActors*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_PerceivedActors(UObject* target, FString label, UEnvQueryGenerator_PerceivedActors* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_PerceivedActors*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_ProjectedPoints* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_ProjectedPoints(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_ProjectedPoints** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_ProjectedPoints*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_ProjectedPoints(UObject* target, FString label, UEnvQueryGenerator_ProjectedPoints* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_ProjectedPoints*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_Cone* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_Cone(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_Cone** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_Cone*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_Cone(UObject* target, FString label, UEnvQueryGenerator_Cone* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_Cone*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_Donut* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_Donut(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_Donut** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_Donut*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_Donut(UObject* target, FString label, UEnvQueryGenerator_Donut* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_Donut*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_OnCircle* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_OnCircle(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_OnCircle** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_OnCircle*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_OnCircle(UObject* target, FString label, UEnvQueryGenerator_OnCircle* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_OnCircle*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_SimpleGrid* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_SimpleGrid(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_SimpleGrid** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_SimpleGrid*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_SimpleGrid(UObject* target, FString label, UEnvQueryGenerator_SimpleGrid* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_SimpleGrid*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryGenerator_PathingGrid* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryGenerator_PathingGrid(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryGenerator_PathingGrid** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryGenerator_PathingGrid*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryGenerator_PathingGrid(UObject* target, FString label, UEnvQueryGenerator_PathingGrid* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryGenerator_PathingGrid*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_Distance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_Distance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_Distance** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_Distance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_Distance(UObject* target, FString label, UEnvQueryTest_Distance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_Distance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_Dot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_Dot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_Dot** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_Dot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_Dot(UObject* target, FString label, UEnvQueryTest_Dot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_Dot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_GameplayTags* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_GameplayTags(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_GameplayTags** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_GameplayTags*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_GameplayTags(UObject* target, FString label, UEnvQueryTest_GameplayTags* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_GameplayTags*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_Overlap* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_Overlap(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_Overlap** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_Overlap*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_Overlap(UObject* target, FString label, UEnvQueryTest_Overlap* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_Overlap*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_Pathfinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_Pathfinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_Pathfinding** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_Pathfinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_Pathfinding(UObject* target, FString label, UEnvQueryTest_Pathfinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_Pathfinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_Project* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_Project(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_Project** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_Project*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_Project(UObject* target, FString label, UEnvQueryTest_Project* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_Project*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_Random* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_Random(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_Random** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_Random*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_Random(UObject* target, FString label, UEnvQueryTest_Random* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_Random*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_Trace* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_Trace(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_Trace** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_Trace*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_Trace(UObject* target, FString label, UEnvQueryTest_Trace* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_Trace*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_Volume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_Volume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_Volume** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_Volume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_Volume(UObject* target, FString label, UEnvQueryTest_Volume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_Volume*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnvQueryTest_PathfindingBatch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnvQueryTest_PathfindingBatch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnvQueryTest_PathfindingBatch** result = abstractBasedObject->GetInternal()->GetClassVar<UEnvQueryTest_PathfindingBatch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnvQueryTest_PathfindingBatch(UObject* target, FString label, UEnvQueryTest_PathfindingBatch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnvQueryTest_PathfindingBatch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCrowdFollowingComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCrowdFollowingComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCrowdFollowingComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UCrowdFollowingComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCrowdFollowingComponent(UObject* target, FString label, UCrowdFollowingComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCrowdFollowingComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGridPathFollowingComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGridPathFollowingComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGridPathFollowingComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UGridPathFollowingComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGridPathFollowingComponent(UObject* target, FString label, UGridPathFollowingComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGridPathFollowingComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnAction_BlueprintBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnAction_BlueprintBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnAction_BlueprintBase** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnAction_BlueprintBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnAction_BlueprintBase(UObject* target, FString label, UPawnAction_BlueprintBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnAction_BlueprintBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnAction_Move* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnAction_Move(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnAction_Move** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnAction_Move*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnAction_Move(UObject* target, FString label, UPawnAction_Move* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnAction_Move*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnAction_Repeat* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnAction_Repeat(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnAction_Repeat** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnAction_Repeat*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnAction_Repeat(UObject* target, FString label, UPawnAction_Repeat* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnAction_Repeat*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnAction_Sequence* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnAction_Sequence(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnAction_Sequence** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnAction_Sequence*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnAction_Sequence(UObject* target, FString label, UPawnAction_Sequence* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnAction_Sequence*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnAction_Wait* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnAction_Wait(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnAction_Wait** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnAction_Wait*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnAction_Wait(UObject* target, FString label, UPawnAction_Wait* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnAction_Wait*>(TCHAR_TO_UTF8(*label), value);
    }
}

AActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AActor** result = abstractBasedObject->GetInternal()->GetClassVar<AActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActor(UObject* target, FString label, AActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UActorComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorComponent(UObject* target, FString label, UActorComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorComponentInstanceDataTransientOuter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorComponentInstanceDataTransientOuter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorComponentInstanceDataTransientOuter** result = abstractBasedObject->GetInternal()->GetClassVar<UActorComponentInstanceDataTransientOuter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorComponentInstanceDataTransientOuter(UObject* target, FString label, UActorComponentInstanceDataTransientOuter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorComponentInstanceDataTransientOuter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorContainer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorContainer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorContainer** result = abstractBasedObject->GetInternal()->GetClassVar<UActorContainer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorContainer(UObject* target, FString label, UActorContainer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorContainer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorDescContainer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorDescContainer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorDescContainer** result = abstractBasedObject->GetInternal()->GetClassVar<UActorDescContainer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorDescContainer(UObject* target, FString label, UActorDescContainer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorDescContainer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorElementAssetDataInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorElementAssetDataInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorElementAssetDataInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UActorElementAssetDataInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorElementAssetDataInterface(UObject* target, FString label, UActorElementAssetDataInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorElementAssetDataInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorElementCounterInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorElementCounterInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorElementCounterInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UActorElementCounterInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorElementCounterInterface(UObject* target, FString label, UActorElementCounterInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorElementCounterInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorElementHierarchyInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorElementHierarchyInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorElementHierarchyInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UActorElementHierarchyInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorElementHierarchyInterface(UObject* target, FString label, UActorElementHierarchyInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorElementHierarchyInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorElementObjectInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorElementObjectInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorElementObjectInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UActorElementObjectInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorElementObjectInterface(UObject* target, FString label, UActorElementObjectInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorElementObjectInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorElementSelectionInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorElementSelectionInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorElementSelectionInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UActorElementSelectionInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorElementSelectionInterface(UObject* target, FString label, UActorElementSelectionInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorElementSelectionInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorElementWorldInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorElementWorldInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorElementWorldInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UActorElementWorldInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorElementWorldInterface(UObject* target, FString label, UActorElementWorldInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorElementWorldInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorFolder* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorFolder(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorFolder** result = abstractBasedObject->GetInternal()->GetClassVar<UActorFolder*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorFolder(UObject* target, FString label, UActorFolder* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorFolder*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorInstanceHandleInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorInstanceHandleInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorInstanceHandleInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UActorInstanceHandleInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorInstanceHandleInterface(UObject* target, FString label, UActorInstanceHandleInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorInstanceHandleInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorReplicationBridge* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorReplicationBridge(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorReplicationBridge** result = abstractBasedObject->GetInternal()->GetClassVar<UActorReplicationBridge*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorReplicationBridge(UObject* target, FString label, UActorReplicationBridge* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorReplicationBridge*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAISystemBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAISystemBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAISystemBase** result = abstractBasedObject->GetInternal()->GetClassVar<UAISystemBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAISystemBase(UObject* target, FString label, UAISystemBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAISystemBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnalysisProperties* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnalysisProperties(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnalysisProperties** result = abstractBasedObject->GetInternal()->GetClassVar<UAnalysisProperties*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnalysisProperties(UObject* target, FString label, UAnalysisProperties* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnalysisProperties*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimationAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimationAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimationAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimationAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimationAsset(UObject* target, FString label, UAnimationAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimationAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimationSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimationSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimationSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimationSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimationSettings(UObject* target, FString label, UAnimationSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimationSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimBlueprintClassSubsystem_PropertyAccess* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimBlueprintClassSubsystem_PropertyAccess(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimBlueprintClassSubsystem_PropertyAccess** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimBlueprintClassSubsystem_PropertyAccess*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimBlueprintClassSubsystem_PropertyAccess(UObject* target, FString label, UAnimBlueprintClassSubsystem_PropertyAccess* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimBlueprintClassSubsystem_PropertyAccess*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimBlueprintGeneratedStruct* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimBlueprintGeneratedStruct(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimBlueprintGeneratedStruct** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimBlueprintGeneratedStruct*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimBlueprintGeneratedStruct(UObject* target, FString label, UAnimBlueprintGeneratedStruct* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimBlueprintGeneratedStruct*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimBoneCompressionCodec* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimBoneCompressionCodec(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimBoneCompressionCodec** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimBoneCompressionCodec*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimBoneCompressionCodec(UObject* target, FString label, UAnimBoneCompressionCodec* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimBoneCompressionCodec*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimBoneCompressionSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimBoneCompressionSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimBoneCompressionSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimBoneCompressionSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimBoneCompressionSettings(UObject* target, FString label, UAnimBoneCompressionSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimBoneCompressionSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCurveCompressionCodec* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCurveCompressionCodec(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCurveCompressionCodec** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCurveCompressionCodec*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCurveCompressionCodec(UObject* target, FString label, UAnimCurveCompressionCodec* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCurveCompressionCodec*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCurveCompressionSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCurveCompressionSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCurveCompressionSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCurveCompressionSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCurveCompressionSettings(UObject* target, FString label, UAnimCurveCompressionSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCurveCompressionSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimDataModel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimDataModel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimDataModel** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimDataModel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimDataModel(UObject* target, FString label, UAnimDataModel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimDataModel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimInstance(UObject* target, FString label, UAnimInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimMetaData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimMetaData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimMetaData** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimMetaData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimMetaData(UObject* target, FString label, UAnimMetaData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimMetaData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimSet* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimSet(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimSet** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimSet*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimSet(UObject* target, FString label, UAnimSet* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimSet*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimStateMachineTypes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimStateMachineTypes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimStateMachineTypes** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimStateMachineTypes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimStateMachineTypes(UObject* target, FString label, UAnimStateMachineTypes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimStateMachineTypes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAssetExportTask* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAssetExportTask(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAssetExportTask** result = abstractBasedObject->GetInternal()->GetClassVar<UAssetExportTask*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAssetExportTask(UObject* target, FString label, UAssetExportTask* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAssetExportTask*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAssetImportData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAssetImportData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAssetImportData** result = abstractBasedObject->GetInternal()->GetClassVar<UAssetImportData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAssetImportData(UObject* target, FString label, UAssetImportData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAssetImportData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAssetManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAssetManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAssetManager** result = abstractBasedObject->GetInternal()->GetClassVar<UAssetManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAssetManager(UObject* target, FString label, UAssetManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAssetManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAssetManagerSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAssetManagerSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAssetManagerSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UAssetManagerSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAssetManagerSettings(UObject* target, FString label, UAssetManagerSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAssetManagerSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAssetMappingTable* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAssetMappingTable(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAssetMappingTable** result = abstractBasedObject->GetInternal()->GetClassVar<UAssetMappingTable*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAssetMappingTable(UObject* target, FString label, UAssetMappingTable* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAssetMappingTable*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAssetUserData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAssetUserData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAssetUserData** result = abstractBasedObject->GetInternal()->GetClassVar<UAssetUserData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAssetUserData(UObject* target, FString label, UAssetUserData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAssetUserData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAsyncPhysicsData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAsyncPhysicsData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAsyncPhysicsData** result = abstractBasedObject->GetInternal()->GetClassVar<UAsyncPhysicsData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAsyncPhysicsData(UObject* target, FString label, UAsyncPhysicsData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAsyncPhysicsData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAudioBus* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAudioBus(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAudioBus** result = abstractBasedObject->GetInternal()->GetClassVar<UAudioBus*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAudioBus(UObject* target, FString label, UAudioBus* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAudioBus*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAudioSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAudioSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAudioSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UAudioSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAudioSettings(UObject* target, FString label, UAudioSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAudioSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAudioSubsystemCollectionRoot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAudioSubsystemCollectionRoot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAudioSubsystemCollectionRoot** result = abstractBasedObject->GetInternal()->GetClassVar<UAudioSubsystemCollectionRoot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAudioSubsystemCollectionRoot(UObject* target, FString label, UAudioSubsystemCollectionRoot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAudioSubsystemCollectionRoot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAutomationTestSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAutomationTestSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAutomationTestSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UAutomationTestSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAutomationTestSettings(UObject* target, FString label, UAutomationTestSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAutomationTestSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAvoidanceManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAvoidanceManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAvoidanceManager** result = abstractBasedObject->GetInternal()->GetClassVar<UAvoidanceManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAvoidanceManager(UObject* target, FString label, UAvoidanceManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAvoidanceManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlendProfile* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlendProfile(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlendProfile** result = abstractBasedObject->GetInternal()->GetClassVar<UBlendProfile*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlendProfile(UObject* target, FString label, UBlendProfile* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlendProfile*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprintAsyncActionBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprintAsyncActionBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprintAsyncActionBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprintAsyncActionBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprintAsyncActionBase(UObject* target, FString label, UBlueprintAsyncActionBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprintAsyncActionBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprintCore* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprintCore(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprintCore** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprintCore*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprintCore(UObject* target, FString label, UBlueprintCore* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprintCore*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprintExtension* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprintExtension(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprintExtension** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprintExtension*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprintExtension(UObject* target, FString label, UBlueprintExtension* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprintExtension*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprintFunctionLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprintFunctionLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprintFunctionLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprintFunctionLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprintFunctionLibrary(UObject* target, FString label, UBlueprintFunctionLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprintFunctionLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprintTypeConversions* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprintTypeConversions(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprintTypeConversions** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprintTypeConversions*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprintTypeConversions(UObject* target, FString label, UBlueprintTypeConversions* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprintTypeConversions*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBodySetup* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBodySetup(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBodySetup** result = abstractBasedObject->GetInternal()->GetClassVar<UBodySetup*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBodySetup(UObject* target, FString label, UBodySetup* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBodySetup*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBoneMaskFilter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBoneMaskFilter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBoneMaskFilter** result = abstractBasedObject->GetInternal()->GetClassVar<UBoneMaskFilter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBoneMaskFilter(UObject* target, FString label, UBoneMaskFilter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBoneMaskFilter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBookmarkBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBookmarkBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBookmarkBase** result = abstractBasedObject->GetInternal()->GetClassVar<UBookmarkBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBookmarkBase(UObject* target, FString label, UBookmarkBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBookmarkBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBrushBuilder* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBrushBuilder(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBrushBuilder** result = abstractBasedObject->GetInternal()->GetClassVar<UBrushBuilder*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBrushBuilder(UObject* target, FString label, UBrushBuilder* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBrushBuilder*>(TCHAR_TO_UTF8(*label), value);
    }
}

UButtonStyleAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarButtonStyleAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UButtonStyleAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UButtonStyleAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarButtonStyleAsset(UObject* target, FString label, UButtonStyleAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UButtonStyleAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCameraModifier* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCameraModifier(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCameraModifier** result = abstractBasedObject->GetInternal()->GetClassVar<UCameraModifier*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCameraModifier(UObject* target, FString label, UCameraModifier* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCameraModifier*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCameraShakeBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCameraShakeBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCameraShakeBase** result = abstractBasedObject->GetInternal()->GetClassVar<UCameraShakeBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCameraShakeBase(UObject* target, FString label, UCameraShakeBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCameraShakeBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCameraShakePattern* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCameraShakePattern(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCameraShakePattern** result = abstractBasedObject->GetInternal()->GetClassVar<UCameraShakePattern*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCameraShakePattern(UObject* target, FString label, UCameraShakePattern* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCameraShakePattern*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCanvas* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCanvas(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCanvas** result = abstractBasedObject->GetInternal()->GetClassVar<UCanvas*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCanvas(UObject* target, FString label, UCanvas* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCanvas*>(TCHAR_TO_UTF8(*label), value);
    }
}

UChannel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarChannel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UChannel** result = abstractBasedObject->GetInternal()->GetClassVar<UChannel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarChannel(UObject* target, FString label, UChannel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UChannel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCheatManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCheatManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCheatManager** result = abstractBasedObject->GetInternal()->GetClassVar<UCheatManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCheatManager(UObject* target, FString label, UCheatManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCheatManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCheatManagerExtension* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCheatManagerExtension(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCheatManagerExtension** result = abstractBasedObject->GetInternal()->GetClassVar<UCheatManagerExtension*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCheatManagerExtension(UObject* target, FString label, UCheatManagerExtension* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCheatManagerExtension*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCheckBoxStyleAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCheckBoxStyleAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCheckBoxStyleAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UCheckBoxStyleAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCheckBoxStyleAsset(UObject* target, FString label, UCheckBoxStyleAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCheckBoxStyleAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UClassCookedMetaData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarClassCookedMetaData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UClassCookedMetaData** result = abstractBasedObject->GetInternal()->GetClassVar<UClassCookedMetaData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarClassCookedMetaData(UObject* target, FString label, UClassCookedMetaData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UClassCookedMetaData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCollisionProfile* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCollisionProfile(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCollisionProfile** result = abstractBasedObject->GetInternal()->GetClassVar<UCollisionProfile*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCollisionProfile(UObject* target, FString label, UCollisionProfile* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCollisionProfile*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCommandlet* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCommandlet(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCommandlet** result = abstractBasedObject->GetInternal()->GetClassVar<UCommandlet*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCommandlet(UObject* target, FString label, UCommandlet* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCommandlet*>(TCHAR_TO_UTF8(*label), value);
    }
}

UComponentElementCounterInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarComponentElementCounterInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UComponentElementCounterInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UComponentElementCounterInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarComponentElementCounterInterface(UObject* target, FString label, UComponentElementCounterInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UComponentElementCounterInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UComponentElementHierarchyInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarComponentElementHierarchyInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UComponentElementHierarchyInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UComponentElementHierarchyInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarComponentElementHierarchyInterface(UObject* target, FString label, UComponentElementHierarchyInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UComponentElementHierarchyInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UComponentElementObjectInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarComponentElementObjectInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UComponentElementObjectInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UComponentElementObjectInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarComponentElementObjectInterface(UObject* target, FString label, UComponentElementObjectInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UComponentElementObjectInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UComponentElementSelectionInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarComponentElementSelectionInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UComponentElementSelectionInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UComponentElementSelectionInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarComponentElementSelectionInterface(UObject* target, FString label, UComponentElementSelectionInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UComponentElementSelectionInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UComponentElementWorldInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarComponentElementWorldInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UComponentElementWorldInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UComponentElementWorldInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarComponentElementWorldInterface(UObject* target, FString label, UComponentElementWorldInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UComponentElementWorldInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UConsole* UAbstractBlueprintFunctionLibrary::GetAbsClassVarConsole(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UConsole** result = abstractBasedObject->GetInternal()->GetClassVar<UConsole*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarConsole(UObject* target, FString label, UConsole* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UConsole*>(TCHAR_TO_UTF8(*label), value);
    }
}

UContentBundleDescriptor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarContentBundleDescriptor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UContentBundleDescriptor** result = abstractBasedObject->GetInternal()->GetClassVar<UContentBundleDescriptor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarContentBundleDescriptor(UObject* target, FString label, UContentBundleDescriptor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UContentBundleDescriptor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UContentBundleManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarContentBundleManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UContentBundleManager** result = abstractBasedObject->GetInternal()->GetClassVar<UContentBundleManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarContentBundleManager(UObject* target, FString label, UContentBundleManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UContentBundleManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCurveBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCurveBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCurveBase** result = abstractBasedObject->GetInternal()->GetClassVar<UCurveBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCurveBase(UObject* target, FString label, UCurveBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCurveBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCurveTable* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCurveTable(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCurveTable** result = abstractBasedObject->GetInternal()->GetClassVar<UCurveTable*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCurveTable(UObject* target, FString label, UCurveTable* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCurveTable*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UDataAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataAsset(UObject* target, FString label, UDataAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataDrivenConsoleVariableSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataDrivenConsoleVariableSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataDrivenConsoleVariableSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UDataDrivenConsoleVariableSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataDrivenConsoleVariableSettings(UObject* target, FString label, UDataDrivenConsoleVariableSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataDrivenConsoleVariableSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataLayerAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataLayerAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataLayerAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UDataLayerAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataLayerAsset(UObject* target, FString label, UDataLayerAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataLayerAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataLayerInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataLayerInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataLayerInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UDataLayerInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataLayerInstance(UObject* target, FString label, UDataLayerInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataLayerInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataTable* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataTable(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataTable** result = abstractBasedObject->GetInternal()->GetClassVar<UDataTable*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataTable(UObject* target, FString label, UDataTable* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataTable*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDebugCameraControllerSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDebugCameraControllerSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDebugCameraControllerSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UDebugCameraControllerSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDebugCameraControllerSettings(UObject* target, FString label, UDebugCameraControllerSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDebugCameraControllerSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDeviceProfileFragment* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDeviceProfileFragment(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDeviceProfileFragment** result = abstractBasedObject->GetInternal()->GetClassVar<UDeviceProfileFragment*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDeviceProfileFragment(UObject* target, FString label, UDeviceProfileFragment* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDeviceProfileFragment*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDeviceProfileManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDeviceProfileManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDeviceProfileManager** result = abstractBasedObject->GetInternal()->GetClassVar<UDeviceProfileManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDeviceProfileManager(UObject* target, FString label, UDeviceProfileManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDeviceProfileManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDialogueVoice* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDialogueVoice(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDialogueVoice** result = abstractBasedObject->GetInternal()->GetClassVar<UDialogueVoice*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDialogueVoice(UObject* target, FString label, UDialogueVoice* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDialogueVoice*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDialogueWave* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDialogueWave(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDialogueWave** result = abstractBasedObject->GetInternal()->GetClassVar<UDialogueWave*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDialogueWave(UObject* target, FString label, UDialogueWave* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDialogueWave*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistribution* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistribution(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistribution** result = abstractBasedObject->GetInternal()->GetClassVar<UDistribution*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistribution(UObject* target, FString label, UDistribution* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistribution*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDPICustomScalingRule* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDPICustomScalingRule(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDPICustomScalingRule** result = abstractBasedObject->GetInternal()->GetClassVar<UDPICustomScalingRule*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDPICustomScalingRule(UObject* target, FString label, UDPICustomScalingRule* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDPICustomScalingRule*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDynamicBlueprintBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDynamicBlueprintBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDynamicBlueprintBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UDynamicBlueprintBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDynamicBlueprintBinding(UObject* target, FString label, UDynamicBlueprintBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDynamicBlueprintBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEdGraph* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEdGraph(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEdGraph** result = abstractBasedObject->GetInternal()->GetClassVar<UEdGraph*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEdGraph(UObject* target, FString label, UEdGraph* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEdGraph*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEdGraphNode* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEdGraphNode(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEdGraphNode** result = abstractBasedObject->GetInternal()->GetClassVar<UEdGraphNode*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEdGraphNode(UObject* target, FString label, UEdGraphNode* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEdGraphNode*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEdGraphSchema* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEdGraphSchema(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEdGraphSchema** result = abstractBasedObject->GetInternal()->GetClassVar<UEdGraphSchema*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEdGraphSchema(UObject* target, FString label, UEdGraphSchema* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEdGraphSchema*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEngine* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEngine(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEngine** result = abstractBasedObject->GetInternal()->GetClassVar<UEngine*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEngine(UObject* target, FString label, UEngine* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEngine*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEngineBaseTypes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEngineBaseTypes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEngineBaseTypes** result = abstractBasedObject->GetInternal()->GetClassVar<UEngineBaseTypes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEngineBaseTypes(UObject* target, FString label, UEngineBaseTypes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEngineBaseTypes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEngineCustomTimeStep* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEngineCustomTimeStep(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEngineCustomTimeStep** result = abstractBasedObject->GetInternal()->GetClassVar<UEngineCustomTimeStep*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEngineCustomTimeStep(UObject* target, FString label, UEngineCustomTimeStep* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEngineCustomTimeStep*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEngineHandlerComponentFactory* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEngineHandlerComponentFactory(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEngineHandlerComponentFactory** result = abstractBasedObject->GetInternal()->GetClassVar<UEngineHandlerComponentFactory*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEngineHandlerComponentFactory(UObject* target, FString label, UEngineHandlerComponentFactory* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEngineHandlerComponentFactory*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEngineTypes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEngineTypes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEngineTypes** result = abstractBasedObject->GetInternal()->GetClassVar<UEngineTypes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEngineTypes(UObject* target, FString label, UEngineTypes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEngineTypes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEnumCookedMetaData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEnumCookedMetaData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEnumCookedMetaData** result = abstractBasedObject->GetInternal()->GetClassVar<UEnumCookedMetaData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEnumCookedMetaData(UObject* target, FString label, UEnumCookedMetaData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEnumCookedMetaData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UExporter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarExporter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UExporter** result = abstractBasedObject->GetInternal()->GetClassVar<UExporter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarExporter(UObject* target, FString label, UExporter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UExporter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UFont* UAbstractBlueprintFunctionLibrary::GetAbsClassVarFont(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UFont** result = abstractBasedObject->GetInternal()->GetClassVar<UFont*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarFont(UObject* target, FString label, UFont* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UFont*>(TCHAR_TO_UTF8(*label), value);
    }
}

UFontFace* UAbstractBlueprintFunctionLibrary::GetAbsClassVarFontFace(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UFontFace** result = abstractBasedObject->GetInternal()->GetClassVar<UFontFace*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarFontFace(UObject* target, FString label, UFontFace* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UFontFace*>(TCHAR_TO_UTF8(*label), value);
    }
}

UFontImportOptions* UAbstractBlueprintFunctionLibrary::GetAbsClassVarFontImportOptions(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UFontImportOptions** result = abstractBasedObject->GetInternal()->GetClassVar<UFontImportOptions*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarFontImportOptions(UObject* target, FString label, UFontImportOptions* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UFontImportOptions*>(TCHAR_TO_UTF8(*label), value);
    }
}

UForceFeedbackAttenuation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarForceFeedbackAttenuation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UForceFeedbackAttenuation** result = abstractBasedObject->GetInternal()->GetClassVar<UForceFeedbackAttenuation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarForceFeedbackAttenuation(UObject* target, FString label, UForceFeedbackAttenuation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UForceFeedbackAttenuation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UForceFeedbackEffect* UAbstractBlueprintFunctionLibrary::GetAbsClassVarForceFeedbackEffect(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UForceFeedbackEffect** result = abstractBasedObject->GetInternal()->GetClassVar<UForceFeedbackEffect*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarForceFeedbackEffect(UObject* target, FString label, UForceFeedbackEffect* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UForceFeedbackEffect*>(TCHAR_TO_UTF8(*label), value);
    }
}

UFXSystemAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarFXSystemAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UFXSystemAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UFXSystemAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarFXSystemAsset(UObject* target, FString label, UFXSystemAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UFXSystemAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGameInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGameInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UGameInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameInstance(UObject* target, FString label, UGameInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGameInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGameUserSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameUserSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGameUserSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UGameUserSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameUserSettings(UObject* target, FString label, UGameUserSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGameUserSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGarbageCollectionSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGarbageCollectionSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGarbageCollectionSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UGarbageCollectionSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGarbageCollectionSettings(UObject* target, FString label, UGarbageCollectionSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGarbageCollectionSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGraphNodeContextMenuContext* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGraphNodeContextMenuContext(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGraphNodeContextMenuContext** result = abstractBasedObject->GetInternal()->GetClassVar<UGraphNodeContextMenuContext*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGraphNodeContextMenuContext(UObject* target, FString label, UGraphNodeContextMenuContext* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGraphNodeContextMenuContext*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHapticFeedbackEffect_Base* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHapticFeedbackEffect_Base(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHapticFeedbackEffect_Base** result = abstractBasedObject->GetInternal()->GetClassVar<UHapticFeedbackEffect_Base*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHapticFeedbackEffect_Base(UObject* target, FString label, UHapticFeedbackEffect_Base* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHapticFeedbackEffect_Base*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHierarchicalLODSetup* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHierarchicalLODSetup(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHierarchicalLODSetup** result = abstractBasedObject->GetInternal()->GetClassVar<UHierarchicalLODSetup*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHierarchicalLODSetup(UObject* target, FString label, UHierarchicalLODSetup* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHierarchicalLODSetup*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHLODBuilder* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHLODBuilder(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHLODBuilder** result = abstractBasedObject->GetInternal()->GetClassVar<UHLODBuilder*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHLODBuilder(UObject* target, FString label, UHLODBuilder* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHLODBuilder*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHLODBuilderSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHLODBuilderSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHLODBuilderSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UHLODBuilderSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHLODBuilderSettings(UObject* target, FString label, UHLODBuilderSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHLODBuilderSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHLODLayer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHLODLayer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHLODLayer** result = abstractBasedObject->GetInternal()->GetClassVar<UHLODLayer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHLODLayer(UObject* target, FString label, UHLODLayer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHLODLayer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHLODProxy* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHLODProxy(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHLODProxy** result = abstractBasedObject->GetInternal()->GetClassVar<UHLODProxy*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHLODProxy(UObject* target, FString label, UHLODProxy* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHLODProxy*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHLODProxyDesc* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHLODProxyDesc(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHLODProxyDesc** result = abstractBasedObject->GetInternal()->GetClassVar<UHLODProxyDesc*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHLODProxyDesc(UObject* target, FString label, UHLODProxyDesc* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHLODProxyDesc*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInheritableComponentHandler* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInheritableComponentHandler(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInheritableComponentHandler** result = abstractBasedObject->GetInternal()->GetClassVar<UInheritableComponentHandler*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInheritableComponentHandler(UObject* target, FString label, UInheritableComponentHandler* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInheritableComponentHandler*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInitialActiveSoundParams* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInitialActiveSoundParams(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInitialActiveSoundParams** result = abstractBasedObject->GetInternal()->GetClassVar<UInitialActiveSoundParams*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInitialActiveSoundParams(UObject* target, FString label, UInitialActiveSoundParams* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInitialActiveSoundParams*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UInputSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputSettings(UObject* target, FString label, UInputSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInstancedPlacemenClientSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInstancedPlacemenClientSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInstancedPlacemenClientSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UInstancedPlacemenClientSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInstancedPlacemenClientSettings(UObject* target, FString label, UInstancedPlacemenClientSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInstancedPlacemenClientSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInterpCurveEdSetup* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInterpCurveEdSetup(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInterpCurveEdSetup** result = abstractBasedObject->GetInternal()->GetClassVar<UInterpCurveEdSetup*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInterpCurveEdSetup(UObject* target, FString label, UInterpCurveEdSetup* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInterpCurveEdSetup*>(TCHAR_TO_UTF8(*label), value);
    }
}

UIntSerialization* UAbstractBlueprintFunctionLibrary::GetAbsClassVarIntSerialization(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UIntSerialization** result = abstractBasedObject->GetInternal()->GetClassVar<UIntSerialization*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarIntSerialization(UObject* target, FString label, UIntSerialization* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UIntSerialization*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULayer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLayer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULayer** result = abstractBasedObject->GetInternal()->GetClassVar<ULayer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLayer(UObject* target, FString label, ULayer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULayer*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevel** result = abstractBasedObject->GetInternal()->GetClassVar<ULevel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevel(UObject* target, FString label, ULevel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevel*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelActorContainer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelActorContainer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelActorContainer** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelActorContainer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelActorContainer(UObject* target, FString label, ULevelActorContainer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelActorContainer*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelInstanceEditorObject* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelInstanceEditorObject(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelInstanceEditorObject** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelInstanceEditorObject*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelInstanceEditorObject(UObject* target, FString label, ULevelInstanceEditorObject* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelInstanceEditorObject*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelStreaming* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelStreaming(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelStreaming** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelStreaming*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelStreaming(UObject* target, FString label, ULevelStreaming* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelStreaming*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULightmappedSurfaceCollection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightmappedSurfaceCollection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULightmappedSurfaceCollection** result = abstractBasedObject->GetInternal()->GetClassVar<ULightmappedSurfaceCollection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightmappedSurfaceCollection(UObject* target, FString label, ULightmappedSurfaceCollection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULightmappedSurfaceCollection*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULightmassPrimitiveSettingsObject* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightmassPrimitiveSettingsObject(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULightmassPrimitiveSettingsObject** result = abstractBasedObject->GetInternal()->GetClassVar<ULightmassPrimitiveSettingsObject*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightmassPrimitiveSettingsObject(UObject* target, FString label, ULightmassPrimitiveSettingsObject* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULightmassPrimitiveSettingsObject*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULocalMessage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLocalMessage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULocalMessage** result = abstractBasedObject->GetInternal()->GetClassVar<ULocalMessage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLocalMessage(UObject* target, FString label, ULocalMessage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULocalMessage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMapBuildDataRegistry* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMapBuildDataRegistry(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMapBuildDataRegistry** result = abstractBasedObject->GetInternal()->GetClassVar<UMapBuildDataRegistry*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMapBuildDataRegistry(UObject* target, FString label, UMapBuildDataRegistry* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMapBuildDataRegistry*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpression* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpression(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpression** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpression*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpression(UObject* target, FString label, UMaterialExpression* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpression*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialFunctionInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialFunctionInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialFunctionInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialFunctionInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialFunctionInterface(UObject* target, FString label, UMaterialFunctionInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialFunctionInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialInterface(UObject* target, FString label, UMaterialInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialParameterCollection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialParameterCollection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialParameterCollection** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialParameterCollection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialParameterCollection(UObject* target, FString label, UMaterialParameterCollection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialParameterCollection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialParameterCollectionInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialParameterCollectionInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialParameterCollectionInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialParameterCollectionInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialParameterCollectionInstance(UObject* target, FString label, UMaterialParameterCollectionInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialParameterCollectionInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMeshDeformer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMeshDeformer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMeshDeformer** result = abstractBasedObject->GetInternal()->GetClassVar<UMeshDeformer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMeshDeformer(UObject* target, FString label, UMeshDeformer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMeshDeformer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMeshDeformerInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMeshDeformerInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMeshDeformerInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UMeshDeformerInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMeshDeformerInstance(UObject* target, FString label, UMeshDeformerInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMeshDeformerInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMeshDeformerInstanceSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMeshDeformerInstanceSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMeshDeformerInstanceSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UMeshDeformerInstanceSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMeshDeformerInstanceSettings(UObject* target, FString label, UMeshDeformerInstanceSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMeshDeformerInstanceSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMeshSimplificationSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMeshSimplificationSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMeshSimplificationSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UMeshSimplificationSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMeshSimplificationSettings(UObject* target, FString label, UMeshSimplificationSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMeshSimplificationSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UModel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarModel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UModel** result = abstractBasedObject->GetInternal()->GetClassVar<UModel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarModel(UObject* target, FString label, UModel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UModel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMorphTarget* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMorphTarget(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMorphTarget** result = abstractBasedObject->GetInternal()->GetClassVar<UMorphTarget*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMorphTarget(UObject* target, FString label, UMorphTarget* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMorphTarget*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavAreaBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavAreaBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavAreaBase** result = abstractBasedObject->GetInternal()->GetClassVar<UNavAreaBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavAreaBase(UObject* target, FString label, UNavAreaBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavAreaBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavCollisionBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavCollisionBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavCollisionBase** result = abstractBasedObject->GetInternal()->GetClassVar<UNavCollisionBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavCollisionBase(UObject* target, FString label, UNavCollisionBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavCollisionBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavigationDataChunk* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationDataChunk(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavigationDataChunk** result = abstractBasedObject->GetInternal()->GetClassVar<UNavigationDataChunk*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationDataChunk(UObject* target, FString label, UNavigationDataChunk* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavigationDataChunk*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavigationSystemBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationSystemBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavigationSystemBase** result = abstractBasedObject->GetInternal()->GetClassVar<UNavigationSystemBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationSystemBase(UObject* target, FString label, UNavigationSystemBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavigationSystemBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavigationSystemConfig* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationSystemConfig(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavigationSystemConfig** result = abstractBasedObject->GetInternal()->GetClassVar<UNavigationSystemConfig*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationSystemConfig(UObject* target, FString label, UNavigationSystemConfig* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavigationSystemConfig*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavLinkDefinition* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavLinkDefinition(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavLinkDefinition** result = abstractBasedObject->GetInternal()->GetClassVar<UNavLinkDefinition*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavLinkDefinition(UObject* target, FString label, UNavLinkDefinition* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavLinkDefinition*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNetDriver* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNetDriver(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNetDriver** result = abstractBasedObject->GetInternal()->GetClassVar<UNetDriver*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNetDriver(UObject* target, FString label, UNetDriver* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNetDriver*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNetFaultConfig* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNetFaultConfig(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNetFaultConfig** result = abstractBasedObject->GetInternal()->GetClassVar<UNetFaultConfig*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNetFaultConfig(UObject* target, FString label, UNetFaultConfig* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNetFaultConfig*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNetworkSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNetworkSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNetworkSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UNetworkSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNetworkSettings(UObject* target, FString label, UNetworkSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNetworkSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNodeMappingContainer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNodeMappingContainer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNodeMappingContainer** result = abstractBasedObject->GetInternal()->GetClassVar<UNodeMappingContainer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNodeMappingContainer(UObject* target, FString label, UNodeMappingContainer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNodeMappingContainer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UObjectElementAssetDataInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarObjectElementAssetDataInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UObjectElementAssetDataInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UObjectElementAssetDataInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarObjectElementAssetDataInterface(UObject* target, FString label, UObjectElementAssetDataInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UObjectElementAssetDataInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UObjectElementCounterInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarObjectElementCounterInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UObjectElementCounterInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UObjectElementCounterInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarObjectElementCounterInterface(UObject* target, FString label, UObjectElementCounterInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UObjectElementCounterInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UObjectElementObjectInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarObjectElementObjectInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UObjectElementObjectInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UObjectElementObjectInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarObjectElementObjectInterface(UObject* target, FString label, UObjectElementObjectInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UObjectElementObjectInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UObjectElementSelectionInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarObjectElementSelectionInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UObjectElementSelectionInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UObjectElementSelectionInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarObjectElementSelectionInterface(UObject* target, FString label, UObjectElementSelectionInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UObjectElementSelectionInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UObjectLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarObjectLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UObjectLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UObjectLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarObjectLibrary(UObject* target, FString label, UObjectLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UObjectLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UObjectReferencer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarObjectReferencer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UObjectReferencer** result = abstractBasedObject->GetInternal()->GetClassVar<UObjectReferencer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarObjectReferencer(UObject* target, FString label, UObjectReferencer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UObjectReferencer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UOnlineEngineInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarOnlineEngineInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UOnlineEngineInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UOnlineEngineInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarOnlineEngineInterface(UObject* target, FString label, UOnlineEngineInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UOnlineEngineInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UOnlineSession* UAbstractBlueprintFunctionLibrary::GetAbsClassVarOnlineSession(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UOnlineSession** result = abstractBasedObject->GetInternal()->GetClassVar<UOnlineSession*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarOnlineSession(UObject* target, FString label, UOnlineSession* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UOnlineSession*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPackageMapClient* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPackageMapClient(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPackageMapClient** result = abstractBasedObject->GetInternal()->GetClassVar<UPackageMapClient*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPackageMapClient(UObject* target, FString label, UPackageMapClient* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPackageMapClient*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleEmitter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleEmitter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleEmitter** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleEmitter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleEmitter(UObject* target, FString label, UParticleEmitter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleEmitter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleLODLevel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleLODLevel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleLODLevel** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleLODLevel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleLODLevel(UObject* target, FString label, UParticleLODLevel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleLODLevel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModule* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModule(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModule** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModule*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModule(UObject* target, FString label, UParticleModule* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModule*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleEventSendToGame* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleEventSendToGame(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleEventSendToGame** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleEventSendToGame*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleEventSendToGame(UObject* target, FString label, UParticleModuleEventSendToGame* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleEventSendToGame*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleSystemReplay* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleSystemReplay(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleSystemReplay** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleSystemReplay*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleSystemReplay(UObject* target, FString label, UParticleSystemReplay* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleSystemReplay*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPendingNetGame* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPendingNetGame(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPendingNetGame** result = abstractBasedObject->GetInternal()->GetClassVar<UPendingNetGame*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPendingNetGame(UObject* target, FString label, UPendingNetGame* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPendingNetGame*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicalMaterialMask* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicalMaterialMask(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicalMaterialMask** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicalMaterialMask*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicalMaterialMask(UObject* target, FString label, UPhysicalMaterialMask* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicalMaterialMask*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsAsset(UObject* target, FString label, UPhysicsAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsCollisionHandler* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsCollisionHandler(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsCollisionHandler** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsCollisionHandler*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsCollisionHandler(UObject* target, FString label, UPhysicsCollisionHandler* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsCollisionHandler*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsConstraintTemplate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsConstraintTemplate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsConstraintTemplate** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsConstraintTemplate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsConstraintTemplate(UObject* target, FString label, UPhysicsConstraintTemplate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsConstraintTemplate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsSettings(UObject* target, FString label, UPhysicsSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlatformInterfaceBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlatformInterfaceBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlatformInterfaceBase** result = abstractBasedObject->GetInternal()->GetClassVar<UPlatformInterfaceBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlatformInterfaceBase(UObject* target, FString label, UPlatformInterfaceBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlatformInterfaceBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlatformInterfaceWebResponse* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlatformInterfaceWebResponse(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlatformInterfaceWebResponse** result = abstractBasedObject->GetInternal()->GetClassVar<UPlatformInterfaceWebResponse*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlatformInterfaceWebResponse(UObject* target, FString label, UPlatformInterfaceWebResponse* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlatformInterfaceWebResponse*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlayer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlayer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlayer** result = abstractBasedObject->GetInternal()->GetClassVar<UPlayer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlayer(UObject* target, FString label, UPlayer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlayer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlayerInput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlayerInput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlayerInput** result = abstractBasedObject->GetInternal()->GetClassVar<UPlayerInput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlayerInput(UObject* target, FString label, UPlayerInput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlayerInput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlayerStateCountLimiterConfig* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlayerStateCountLimiterConfig(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlayerStateCountLimiterConfig** result = abstractBasedObject->GetInternal()->GetClassVar<UPlayerStateCountLimiterConfig*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlayerStateCountLimiterConfig(UObject* target, FString label, UPlayerStateCountLimiterConfig* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlayerStateCountLimiterConfig*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPolys* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPolys(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPolys** result = abstractBasedObject->GetInternal()->GetClassVar<UPolys*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPolys(UObject* target, FString label, UPolys* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPolys*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPoseWatch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPoseWatch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPoseWatch** result = abstractBasedObject->GetInternal()->GetClassVar<UPoseWatch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPoseWatch(UObject* target, FString label, UPoseWatch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPoseWatch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPoseWatchElement* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPoseWatchElement(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPoseWatchElement** result = abstractBasedObject->GetInternal()->GetClassVar<UPoseWatchElement*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPoseWatchElement(UObject* target, FString label, UPoseWatchElement* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPoseWatchElement*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPoseWatchFolder* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPoseWatchFolder(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPoseWatchFolder** result = abstractBasedObject->GetInternal()->GetClassVar<UPoseWatchFolder*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPoseWatchFolder(UObject* target, FString label, UPoseWatchFolder* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPoseWatchFolder*>(TCHAR_TO_UTF8(*label), value);
    }
}

UProxyLODMeshSimplificationSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarProxyLODMeshSimplificationSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UProxyLODMeshSimplificationSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UProxyLODMeshSimplificationSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarProxyLODMeshSimplificationSettings(UObject* target, FString label, UProxyLODMeshSimplificationSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UProxyLODMeshSimplificationSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

URendererOverrideSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRendererOverrideSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URendererOverrideSettings** result = abstractBasedObject->GetInternal()->GetClassVar<URendererOverrideSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRendererOverrideSettings(UObject* target, FString label, URendererOverrideSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URendererOverrideSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

URendererSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRendererSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URendererSettings** result = abstractBasedObject->GetInternal()->GetClassVar<URendererSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRendererSettings(UObject* target, FString label, URendererSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URendererSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UReplicationConnectionDriver* UAbstractBlueprintFunctionLibrary::GetAbsClassVarReplicationConnectionDriver(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UReplicationConnectionDriver** result = abstractBasedObject->GetInternal()->GetClassVar<UReplicationConnectionDriver*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarReplicationConnectionDriver(UObject* target, FString label, UReplicationConnectionDriver* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UReplicationConnectionDriver*>(TCHAR_TO_UTF8(*label), value);
    }
}

UReplicationDriver* UAbstractBlueprintFunctionLibrary::GetAbsClassVarReplicationDriver(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UReplicationDriver** result = abstractBasedObject->GetInternal()->GetClassVar<UReplicationDriver*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarReplicationDriver(UObject* target, FString label, UReplicationDriver* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UReplicationDriver*>(TCHAR_TO_UTF8(*label), value);
    }
}

UReporterBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarReporterBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UReporterBase** result = abstractBasedObject->GetInternal()->GetClassVar<UReporterBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarReporterBase(UObject* target, FString label, UReporterBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UReporterBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UReverbEffect* UAbstractBlueprintFunctionLibrary::GetAbsClassVarReverbEffect(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UReverbEffect** result = abstractBasedObject->GetInternal()->GetClassVar<UReverbEffect*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarReverbEffect(UObject* target, FString label, UReverbEffect* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UReverbEffect*>(TCHAR_TO_UTF8(*label), value);
    }
}

URig* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRig(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URig** result = abstractBasedObject->GetInternal()->GetClassVar<URig*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRig(UObject* target, FString label, URig* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URig*>(TCHAR_TO_UTF8(*label), value);
    }
}

URPCDoSDetectionConfig* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRPCDoSDetectionConfig(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URPCDoSDetectionConfig** result = abstractBasedObject->GetInternal()->GetClassVar<URPCDoSDetectionConfig*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRPCDoSDetectionConfig(UObject* target, FString label, URPCDoSDetectionConfig* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URPCDoSDetectionConfig*>(TCHAR_TO_UTF8(*label), value);
    }
}

URuntimeHashExternalStreamingObjectBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRuntimeHashExternalStreamingObjectBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URuntimeHashExternalStreamingObjectBase** result = abstractBasedObject->GetInternal()->GetClassVar<URuntimeHashExternalStreamingObjectBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRuntimeHashExternalStreamingObjectBase(UObject* target, FString label, URuntimeHashExternalStreamingObjectBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URuntimeHashExternalStreamingObjectBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

URuntimeOptionsBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRuntimeOptionsBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URuntimeOptionsBase** result = abstractBasedObject->GetInternal()->GetClassVar<URuntimeOptionsBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRuntimeOptionsBase(UObject* target, FString label, URuntimeOptionsBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URuntimeOptionsBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

URuntimeVirtualTexture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRuntimeVirtualTexture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URuntimeVirtualTexture** result = abstractBasedObject->GetInternal()->GetClassVar<URuntimeVirtualTexture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRuntimeVirtualTexture(UObject* target, FString label, URuntimeVirtualTexture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URuntimeVirtualTexture*>(TCHAR_TO_UTF8(*label), value);
    }
}

USaveGame* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSaveGame(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USaveGame** result = abstractBasedObject->GetInternal()->GetClassVar<USaveGame*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSaveGame(UObject* target, FString label, USaveGame* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USaveGame*>(TCHAR_TO_UTF8(*label), value);
    }
}

UScene* UAbstractBlueprintFunctionLibrary::GetAbsClassVarScene(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UScene** result = abstractBasedObject->GetInternal()->GetClassVar<UScene*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarScene(UObject* target, FString label, UScene* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UScene*>(TCHAR_TO_UTF8(*label), value);
    }
}

UScriptViewportClient* UAbstractBlueprintFunctionLibrary::GetAbsClassVarScriptViewportClient(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UScriptViewportClient** result = abstractBasedObject->GetInternal()->GetClassVar<UScriptViewportClient*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarScriptViewportClient(UObject* target, FString label, UScriptViewportClient* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UScriptViewportClient*>(TCHAR_TO_UTF8(*label), value);
    }
}

USCS_Node* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSCS_Node(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USCS_Node** result = abstractBasedObject->GetInternal()->GetClassVar<USCS_Node*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSCS_Node(UObject* target, FString label, USCS_Node* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USCS_Node*>(TCHAR_TO_UTF8(*label), value);
    }
}

USimpleConstructionScript* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSimpleConstructionScript(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USimpleConstructionScript** result = abstractBasedObject->GetInternal()->GetClassVar<USimpleConstructionScript*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSimpleConstructionScript(UObject* target, FString label, USimpleConstructionScript* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USimpleConstructionScript*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkeletalMeshEditorData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkeletalMeshEditorData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkeletalMeshEditorData** result = abstractBasedObject->GetInternal()->GetClassVar<USkeletalMeshEditorData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkeletalMeshEditorData(UObject* target, FString label, USkeletalMeshEditorData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkeletalMeshEditorData*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkeletalMeshSimplificationSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkeletalMeshSimplificationSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkeletalMeshSimplificationSettings** result = abstractBasedObject->GetInternal()->GetClassVar<USkeletalMeshSimplificationSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkeletalMeshSimplificationSettings(UObject* target, FString label, USkeletalMeshSimplificationSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkeletalMeshSimplificationSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkeletalMeshSocket* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkeletalMeshSocket(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkeletalMeshSocket** result = abstractBasedObject->GetInternal()->GetClassVar<USkeletalMeshSocket*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkeletalMeshSocket(UObject* target, FString label, USkeletalMeshSocket* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkeletalMeshSocket*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkeleton* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkeleton(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkeleton** result = abstractBasedObject->GetInternal()->GetClassVar<USkeleton*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkeleton(UObject* target, FString label, USkeleton* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkeleton*>(TCHAR_TO_UTF8(*label), value);
    }
}

USlateBrushAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSlateBrushAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USlateBrushAsset** result = abstractBasedObject->GetInternal()->GetClassVar<USlateBrushAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSlateBrushAsset(UObject* target, FString label, USlateBrushAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USlateBrushAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

USMInstanceElementAssetDataInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSMInstanceElementAssetDataInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USMInstanceElementAssetDataInterface** result = abstractBasedObject->GetInternal()->GetClassVar<USMInstanceElementAssetDataInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSMInstanceElementAssetDataInterface(UObject* target, FString label, USMInstanceElementAssetDataInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USMInstanceElementAssetDataInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

USMInstanceElementHierarchyInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSMInstanceElementHierarchyInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USMInstanceElementHierarchyInterface** result = abstractBasedObject->GetInternal()->GetClassVar<USMInstanceElementHierarchyInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSMInstanceElementHierarchyInterface(UObject* target, FString label, USMInstanceElementHierarchyInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USMInstanceElementHierarchyInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

USMInstanceElementIdMapTransactor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSMInstanceElementIdMapTransactor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USMInstanceElementIdMapTransactor** result = abstractBasedObject->GetInternal()->GetClassVar<USMInstanceElementIdMapTransactor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSMInstanceElementIdMapTransactor(UObject* target, FString label, USMInstanceElementIdMapTransactor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USMInstanceElementIdMapTransactor*>(TCHAR_TO_UTF8(*label), value);
    }
}

USMInstanceElementSelectionInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSMInstanceElementSelectionInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USMInstanceElementSelectionInterface** result = abstractBasedObject->GetInternal()->GetClassVar<USMInstanceElementSelectionInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSMInstanceElementSelectionInterface(UObject* target, FString label, USMInstanceElementSelectionInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USMInstanceElementSelectionInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

USMInstanceElementWorldInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSMInstanceElementWorldInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USMInstanceElementWorldInterface** result = abstractBasedObject->GetInternal()->GetClassVar<USMInstanceElementWorldInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSMInstanceElementWorldInterface(UObject* target, FString label, USMInstanceElementWorldInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USMInstanceElementWorldInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundAttenuation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundAttenuation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundAttenuation** result = abstractBasedObject->GetInternal()->GetClassVar<USoundAttenuation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundAttenuation(UObject* target, FString label, USoundAttenuation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundAttenuation*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundBase** result = abstractBasedObject->GetInternal()->GetClassVar<USoundBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundBase(UObject* target, FString label, USoundBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundClass* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundClass(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundClass** result = abstractBasedObject->GetInternal()->GetClassVar<USoundClass*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundClass(UObject* target, FString label, USoundClass* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundClass*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundConcurrency* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundConcurrency(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundConcurrency** result = abstractBasedObject->GetInternal()->GetClassVar<USoundConcurrency*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundConcurrency(UObject* target, FString label, USoundConcurrency* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundConcurrency*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundEffectPreset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundEffectPreset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundEffectPreset** result = abstractBasedObject->GetInternal()->GetClassVar<USoundEffectPreset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundEffectPreset(UObject* target, FString label, USoundEffectPreset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundEffectPreset*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundEffectSourcePresetChain* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundEffectSourcePresetChain(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundEffectSourcePresetChain** result = abstractBasedObject->GetInternal()->GetClassVar<USoundEffectSourcePresetChain*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundEffectSourcePresetChain(UObject* target, FString label, USoundEffectSourcePresetChain* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundEffectSourcePresetChain*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundGroups* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundGroups(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundGroups** result = abstractBasedObject->GetInternal()->GetClassVar<USoundGroups*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundGroups(UObject* target, FString label, USoundGroups* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundGroups*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundMix* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundMix(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundMix** result = abstractBasedObject->GetInternal()->GetClassVar<USoundMix*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundMix(UObject* target, FString label, USoundMix* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundMix*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNode* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNode(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNode** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNode*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNode(UObject* target, FString label, USoundNode* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNode*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundSubmixBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundSubmixBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundSubmixBase** result = abstractBasedObject->GetInternal()->GetClassVar<USoundSubmixBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundSubmixBase(UObject* target, FString label, USoundSubmixBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundSubmixBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

USplineMetadata* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSplineMetadata(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USplineMetadata** result = abstractBasedObject->GetInternal()->GetClassVar<USplineMetadata*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSplineMetadata(UObject* target, FString label, USplineMetadata* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USplineMetadata*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStaticMeshDescriptionBulkData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStaticMeshDescriptionBulkData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStaticMeshDescriptionBulkData** result = abstractBasedObject->GetInternal()->GetClassVar<UStaticMeshDescriptionBulkData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStaticMeshDescriptionBulkData(UObject* target, FString label, UStaticMeshDescriptionBulkData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStaticMeshDescriptionBulkData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStaticMeshSocket* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStaticMeshSocket(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStaticMeshSocket** result = abstractBasedObject->GetInternal()->GetClassVar<UStaticMeshSocket*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStaticMeshSocket(UObject* target, FString label, UStaticMeshSocket* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStaticMeshSocket*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStereoLayerShape* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStereoLayerShape(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStereoLayerShape** result = abstractBasedObject->GetInternal()->GetClassVar<UStereoLayerShape*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStereoLayerShape(UObject* target, FString label, UStereoLayerShape* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStereoLayerShape*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStreamableRenderAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStreamableRenderAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStreamableRenderAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UStreamableRenderAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStreamableRenderAsset(UObject* target, FString label, UStreamableRenderAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStreamableRenderAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStreamingSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStreamingSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStreamingSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UStreamingSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStreamingSettings(UObject* target, FString label, UStreamingSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStreamingSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStringTable* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStringTable(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStringTable** result = abstractBasedObject->GetInternal()->GetClassVar<UStringTable*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStringTable(UObject* target, FString label, UStringTable* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStringTable*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStructCookedMetaData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStructCookedMetaData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStructCookedMetaData** result = abstractBasedObject->GetInternal()->GetClassVar<UStructCookedMetaData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStructCookedMetaData(UObject* target, FString label, UStructCookedMetaData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStructCookedMetaData*>(TCHAR_TO_UTF8(*label), value);
    }
}

USubsurfaceProfile* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSubsurfaceProfile(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USubsurfaceProfile** result = abstractBasedObject->GetInternal()->GetClassVar<USubsurfaceProfile*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSubsurfaceProfile(UObject* target, FString label, USubsurfaceProfile* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USubsurfaceProfile*>(TCHAR_TO_UTF8(*label), value);
    }
}

USubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<USubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSubsystem(UObject* target, FString label, USubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

USubUVAnimation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSubUVAnimation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USubUVAnimation** result = abstractBasedObject->GetInternal()->GetClassVar<USubUVAnimation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSubUVAnimation(UObject* target, FString label, USubUVAnimation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USubUVAnimation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextPropertyTestObject* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextPropertyTestObject(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextPropertyTestObject** result = abstractBasedObject->GetInternal()->GetClassVar<UTextPropertyTestObject*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextPropertyTestObject(UObject* target, FString label, UTextPropertyTestObject* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextPropertyTestObject*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureEncodingProjectSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureEncodingProjectSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureEncodingProjectSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureEncodingProjectSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureEncodingProjectSettings(UObject* target, FString label, UTextureEncodingProjectSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureEncodingProjectSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureEncodingUserSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureEncodingUserSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureEncodingUserSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureEncodingUserSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureEncodingUserSettings(UObject* target, FString label, UTextureEncodingUserSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureEncodingUserSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureLODSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureLODSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureLODSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureLODSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureLODSettings(UObject* target, FString label, UTextureLODSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureLODSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UThumbnailInfo* UAbstractBlueprintFunctionLibrary::GetAbsClassVarThumbnailInfo(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UThumbnailInfo** result = abstractBasedObject->GetInternal()->GetClassVar<UThumbnailInfo*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarThumbnailInfo(UObject* target, FString label, UThumbnailInfo* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UThumbnailInfo*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTimecodeProvider* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTimecodeProvider(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTimecodeProvider** result = abstractBasedObject->GetInternal()->GetClassVar<UTimecodeProvider*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTimecodeProvider(UObject* target, FString label, UTimecodeProvider* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTimecodeProvider*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTimelineTemplate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTimelineTemplate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTimelineTemplate** result = abstractBasedObject->GetInternal()->GetClassVar<UTimelineTemplate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTimelineTemplate(UObject* target, FString label, UTimelineTemplate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTimelineTemplate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTouchInterface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTouchInterface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTouchInterface** result = abstractBasedObject->GetInternal()->GetClassVar<UTouchInterface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTouchInterface(UObject* target, FString label, UTouchInterface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTouchInterface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTypedElementCommonActions* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTypedElementCommonActions(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTypedElementCommonActions** result = abstractBasedObject->GetInternal()->GetClassVar<UTypedElementCommonActions*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTypedElementCommonActions(UObject* target, FString label, UTypedElementCommonActions* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTypedElementCommonActions*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUserDefinedEnum* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUserDefinedEnum(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUserDefinedEnum** result = abstractBasedObject->GetInternal()->GetClassVar<UUserDefinedEnum*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUserDefinedEnum(UObject* target, FString label, UUserDefinedEnum* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUserDefinedEnum*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUserDefinedStruct* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUserDefinedStruct(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUserDefinedStruct** result = abstractBasedObject->GetInternal()->GetClassVar<UUserDefinedStruct*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUserDefinedStruct(UObject* target, FString label, UUserDefinedStruct* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUserDefinedStruct*>(TCHAR_TO_UTF8(*label), value);
    }
}

UUserInterfaceSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarUserInterfaceSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UUserInterfaceSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UUserInterfaceSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarUserInterfaceSettings(UObject* target, FString label, UUserInterfaceSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UUserInterfaceSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVectorField* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVectorField(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVectorField** result = abstractBasedObject->GetInternal()->GetClassVar<UVectorField*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVectorField(UObject* target, FString label, UVectorField* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVectorField*>(TCHAR_TO_UTF8(*label), value);
    }
}

UViewModeUtils* UAbstractBlueprintFunctionLibrary::GetAbsClassVarViewModeUtils(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UViewModeUtils** result = abstractBasedObject->GetInternal()->GetClassVar<UViewModeUtils*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarViewModeUtils(UObject* target, FString label, UViewModeUtils* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UViewModeUtils*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVirtualTexture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVirtualTexture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVirtualTexture** result = abstractBasedObject->GetInternal()->GetClassVar<UVirtualTexture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVirtualTexture(UObject* target, FString label, UVirtualTexture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVirtualTexture*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVirtualTextureBuilder* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVirtualTextureBuilder(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVirtualTextureBuilder** result = abstractBasedObject->GetInternal()->GetClassVar<UVirtualTextureBuilder*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVirtualTextureBuilder(UObject* target, FString label, UVirtualTextureBuilder* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVirtualTextureBuilder*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVirtualTexturePoolConfig* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVirtualTexturePoolConfig(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVirtualTexturePoolConfig** result = abstractBasedObject->GetInternal()->GetClassVar<UVirtualTexturePoolConfig*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVirtualTexturePoolConfig(UObject* target, FString label, UVirtualTexturePoolConfig* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVirtualTexturePoolConfig*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVisualLoggerAutomationTests* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVisualLoggerAutomationTests(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVisualLoggerAutomationTests** result = abstractBasedObject->GetInternal()->GetClassVar<UVisualLoggerAutomationTests*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVisualLoggerAutomationTests(UObject* target, FString label, UVisualLoggerAutomationTests* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVisualLoggerAutomationTests*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorld* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorld(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorld** result = abstractBasedObject->GetInternal()->GetClassVar<UWorld*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorld(UObject* target, FString label, UWorld* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorld*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldComposition* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldComposition(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldComposition** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldComposition*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldComposition(UObject* target, FString label, UWorldComposition* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldComposition*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartition* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartition(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartition** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartition*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartition(UObject* target, FString label, UWorldPartition* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartition*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionEditorHash* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionEditorHash(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionEditorHash** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionEditorHash*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionEditorHash(UObject* target, FString label, UWorldPartitionEditorHash* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionEditorHash*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionEditorLoaderAdapter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionEditorLoaderAdapter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionEditorLoaderAdapter** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionEditorLoaderAdapter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionEditorLoaderAdapter(UObject* target, FString label, UWorldPartitionEditorLoaderAdapter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionEditorLoaderAdapter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionEditorPerProjectUserSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionEditorPerProjectUserSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionEditorPerProjectUserSettings** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionEditorPerProjectUserSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionEditorPerProjectUserSettings(UObject* target, FString label, UWorldPartitionEditorPerProjectUserSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionEditorPerProjectUserSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionRuntimeCell* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionRuntimeCell(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionRuntimeCell** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionRuntimeCell*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionRuntimeCell(UObject* target, FString label, UWorldPartitionRuntimeCell* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionRuntimeCell*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionRuntimeHash* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionRuntimeHash(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionRuntimeHash** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionRuntimeHash*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionRuntimeHash(UObject* target, FString label, UWorldPartitionRuntimeHash* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionRuntimeHash*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionStreamingPolicy* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionStreamingPolicy(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionStreamingPolicy** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionStreamingPolicy*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionStreamingPolicy(UObject* target, FString label, UWorldPartitionStreamingPolicy* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionStreamingPolicy*>(TCHAR_TO_UTF8(*label), value);
    }
}

AAmbientSound* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAmbientSound(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AAmbientSound** result = abstractBasedObject->GetInternal()->GetClassVar<AAmbientSound*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAmbientSound(UObject* target, FString label, AAmbientSound* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AAmbientSound*>(TCHAR_TO_UTF8(*label), value);
    }
}

ABandwidthTestActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBandwidthTestActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ABandwidthTestActor** result = abstractBasedObject->GetInternal()->GetClassVar<ABandwidthTestActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBandwidthTestActor(UObject* target, FString label, ABandwidthTestActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ABandwidthTestActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ABrush* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBrush(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ABrush** result = abstractBasedObject->GetInternal()->GetClassVar<ABrush*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBrush(UObject* target, FString label, ABrush* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ABrush*>(TCHAR_TO_UTF8(*label), value);
    }
}

ACameraActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCameraActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ACameraActor** result = abstractBasedObject->GetInternal()->GetClassVar<ACameraActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCameraActor(UObject* target, FString label, ACameraActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ACameraActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ACameraShakeSourceActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCameraShakeSourceActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ACameraShakeSourceActor** result = abstractBasedObject->GetInternal()->GetClassVar<ACameraShakeSourceActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCameraShakeSourceActor(UObject* target, FString label, ACameraShakeSourceActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ACameraShakeSourceActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

AController* UAbstractBlueprintFunctionLibrary::GetAbsClassVarController(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AController** result = abstractBasedObject->GetInternal()->GetClassVar<AController*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarController(UObject* target, FString label, AController* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AController*>(TCHAR_TO_UTF8(*label), value);
    }
}

ADecalActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDecalActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ADecalActor** result = abstractBasedObject->GetInternal()->GetClassVar<ADecalActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDecalActor(UObject* target, FString label, ADecalActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ADecalActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ADocumentationActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDocumentationActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ADocumentationActor** result = abstractBasedObject->GetInternal()->GetClassVar<ADocumentationActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDocumentationActor(UObject* target, FString label, ADocumentationActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ADocumentationActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

AEmitter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEmitter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AEmitter** result = abstractBasedObject->GetInternal()->GetClassVar<AEmitter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEmitter(UObject* target, FString label, AEmitter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AEmitter*>(TCHAR_TO_UTF8(*label), value);
    }
}

AHUD* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHUD(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AHUD** result = abstractBasedObject->GetInternal()->GetClassVar<AHUD*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHUD(UObject* target, FString label, AHUD* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AHUD*>(TCHAR_TO_UTF8(*label), value);
    }
}

AInfo* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInfo(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AInfo** result = abstractBasedObject->GetInternal()->GetClassVar<AInfo*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInfo(UObject* target, FString label, AInfo* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AInfo*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALevelBounds* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelBounds(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALevelBounds** result = abstractBasedObject->GetInternal()->GetClassVar<ALevelBounds*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelBounds(UObject* target, FString label, ALevelBounds* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALevelBounds*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALevelInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALevelInstance** result = abstractBasedObject->GetInternal()->GetClassVar<ALevelInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelInstance(UObject* target, FString label, ALevelInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALevelInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALevelInstanceEditorInstanceActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelInstanceEditorInstanceActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALevelInstanceEditorInstanceActor** result = abstractBasedObject->GetInternal()->GetClassVar<ALevelInstanceEditorInstanceActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelInstanceEditorInstanceActor(UObject* target, FString label, ALevelInstanceEditorInstanceActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALevelInstanceEditorInstanceActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALevelInstancePivot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelInstancePivot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALevelInstancePivot** result = abstractBasedObject->GetInternal()->GetClassVar<ALevelInstancePivot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelInstancePivot(UObject* target, FString label, ALevelInstancePivot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALevelInstancePivot*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALevelScriptActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelScriptActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALevelScriptActor** result = abstractBasedObject->GetInternal()->GetClassVar<ALevelScriptActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelScriptActor(UObject* target, FString label, ALevelScriptActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALevelScriptActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALight** result = abstractBasedObject->GetInternal()->GetClassVar<ALight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLight(UObject* target, FString label, ALight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALight*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALightmassPortal* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightmassPortal(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALightmassPortal** result = abstractBasedObject->GetInternal()->GetClassVar<ALightmassPortal*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightmassPortal(UObject* target, FString label, ALightmassPortal* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALightmassPortal*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALightWeightInstanceManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightWeightInstanceManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALightWeightInstanceManager** result = abstractBasedObject->GetInternal()->GetClassVar<ALightWeightInstanceManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightWeightInstanceManager(UObject* target, FString label, ALightWeightInstanceManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALightWeightInstanceManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALODActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLODActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALODActor** result = abstractBasedObject->GetInternal()->GetClassVar<ALODActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLODActor(UObject* target, FString label, ALODActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALODActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

AMaterialInstanceActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialInstanceActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AMaterialInstanceActor** result = abstractBasedObject->GetInternal()->GetClassVar<AMaterialInstanceActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialInstanceActor(UObject* target, FString label, AMaterialInstanceActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AMaterialInstanceActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavigationObjectBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationObjectBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavigationObjectBase** result = abstractBasedObject->GetInternal()->GetClassVar<ANavigationObjectBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationObjectBase(UObject* target, FString label, ANavigationObjectBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavigationObjectBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANote* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNote(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANote** result = abstractBasedObject->GetInternal()->GetClassVar<ANote*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNote(UObject* target, FString label, ANote* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANote*>(TCHAR_TO_UTF8(*label), value);
    }
}

AParticleEventManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleEventManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AParticleEventManager** result = abstractBasedObject->GetInternal()->GetClassVar<AParticleEventManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleEventManager(UObject* target, FString label, AParticleEventManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AParticleEventManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

APartitionActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPartitionActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APartitionActor** result = abstractBasedObject->GetInternal()->GetClassVar<APartitionActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPartitionActor(UObject* target, FString label, APartitionActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APartitionActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

APawn* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawn(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APawn** result = abstractBasedObject->GetInternal()->GetClassVar<APawn*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawn(UObject* target, FString label, APawn* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APawn*>(TCHAR_TO_UTF8(*label), value);
    }
}

APlayerCameraManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlayerCameraManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APlayerCameraManager** result = abstractBasedObject->GetInternal()->GetClassVar<APlayerCameraManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlayerCameraManager(UObject* target, FString label, APlayerCameraManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APlayerCameraManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

AReflectionCapture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarReflectionCapture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AReflectionCapture** result = abstractBasedObject->GetInternal()->GetClassVar<AReflectionCapture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarReflectionCapture(UObject* target, FString label, AReflectionCapture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AReflectionCapture*>(TCHAR_TO_UTF8(*label), value);
    }
}

ARigidBodyBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRigidBodyBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ARigidBodyBase** result = abstractBasedObject->GetInternal()->GetClassVar<ARigidBodyBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRigidBodyBase(UObject* target, FString label, ARigidBodyBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ARigidBodyBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

ARuntimeVirtualTextureVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRuntimeVirtualTextureVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ARuntimeVirtualTextureVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ARuntimeVirtualTextureVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRuntimeVirtualTextureVolume(UObject* target, FString label, ARuntimeVirtualTextureVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ARuntimeVirtualTextureVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASceneCapture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSceneCapture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASceneCapture** result = abstractBasedObject->GetInternal()->GetClassVar<ASceneCapture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSceneCapture(UObject* target, FString label, ASceneCapture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASceneCapture*>(TCHAR_TO_UTF8(*label), value);
    }
}

AServerStreamingLevelsVisibility* UAbstractBlueprintFunctionLibrary::GetAbsClassVarServerStreamingLevelsVisibility(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AServerStreamingLevelsVisibility** result = abstractBasedObject->GetInternal()->GetClassVar<AServerStreamingLevelsVisibility*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarServerStreamingLevelsVisibility(UObject* target, FString label, AServerStreamingLevelsVisibility* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AServerStreamingLevelsVisibility*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASkeletalMeshActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkeletalMeshActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASkeletalMeshActor** result = abstractBasedObject->GetInternal()->GetClassVar<ASkeletalMeshActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkeletalMeshActor(UObject* target, FString label, ASkeletalMeshActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASkeletalMeshActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASplineMeshActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSplineMeshActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASplineMeshActor** result = abstractBasedObject->GetInternal()->GetClassVar<ASplineMeshActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSplineMeshActor(UObject* target, FString label, ASplineMeshActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASplineMeshActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

AStaticMeshActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStaticMeshActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AStaticMeshActor** result = abstractBasedObject->GetInternal()->GetClassVar<AStaticMeshActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStaticMeshActor(UObject* target, FString label, AStaticMeshActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AStaticMeshActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ATargetPoint* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTargetPoint(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ATargetPoint** result = abstractBasedObject->GetInternal()->GetClassVar<ATargetPoint*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTargetPoint(UObject* target, FString label, ATargetPoint* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ATargetPoint*>(TCHAR_TO_UTF8(*label), value);
    }
}

ATextRenderActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextRenderActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ATextRenderActor** result = abstractBasedObject->GetInternal()->GetClassVar<ATextRenderActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextRenderActor(UObject* target, FString label, ATextRenderActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ATextRenderActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ATriggerBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTriggerBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ATriggerBase** result = abstractBasedObject->GetInternal()->GetClassVar<ATriggerBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTriggerBase(UObject* target, FString label, ATriggerBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ATriggerBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

AVectorFieldVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVectorFieldVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AVectorFieldVolume** result = abstractBasedObject->GetInternal()->GetClassVar<AVectorFieldVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVectorFieldVolume(UObject* target, FString label, AVectorFieldVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AVectorFieldVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

AWorldPartitionHLOD* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionHLOD(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AWorldPartitionHLOD** result = abstractBasedObject->GetInternal()->GetClassVar<AWorldPartitionHLOD*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionHLOD(UObject* target, FString label, AWorldPartitionHLOD* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AWorldPartitionHLOD*>(TCHAR_TO_UTF8(*label), value);
    }
}

AWorldPartitionReplay* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionReplay(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AWorldPartitionReplay** result = abstractBasedObject->GetInternal()->GetClassVar<AWorldPartitionReplay*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionReplay(UObject* target, FString label, AWorldPartitionReplay* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AWorldPartitionReplay*>(TCHAR_TO_UTF8(*label), value);
    }
}

ABrushShape* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBrushShape(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ABrushShape** result = abstractBasedObject->GetInternal()->GetClassVar<ABrushShape*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBrushShape(UObject* target, FString label, ABrushShape* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ABrushShape*>(TCHAR_TO_UTF8(*label), value);
    }
}

AVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AVolume** result = abstractBasedObject->GetInternal()->GetClassVar<AVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVolume(UObject* target, FString label, AVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

AAudioVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAudioVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AAudioVolume** result = abstractBasedObject->GetInternal()->GetClassVar<AAudioVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAudioVolume(UObject* target, FString label, AAudioVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AAudioVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ABlockingVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlockingVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ABlockingVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ABlockingVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlockingVolume(UObject* target, FString label, ABlockingVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ABlockingVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ACameraBlockingVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCameraBlockingVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ACameraBlockingVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ACameraBlockingVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCameraBlockingVolume(UObject* target, FString label, ACameraBlockingVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ACameraBlockingVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ACullDistanceVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCullDistanceVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ACullDistanceVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ACullDistanceVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCullDistanceVolume(UObject* target, FString label, ACullDistanceVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ACullDistanceVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALevelStreamingVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelStreamingVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALevelStreamingVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ALevelStreamingVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelStreamingVolume(UObject* target, FString label, ALevelStreamingVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALevelStreamingVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALightmassCharacterIndirectDetailVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightmassCharacterIndirectDetailVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALightmassCharacterIndirectDetailVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ALightmassCharacterIndirectDetailVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightmassCharacterIndirectDetailVolume(UObject* target, FString label, ALightmassCharacterIndirectDetailVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALightmassCharacterIndirectDetailVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALightmassImportanceVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightmassImportanceVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALightmassImportanceVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ALightmassImportanceVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightmassImportanceVolume(UObject* target, FString label, ALightmassImportanceVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALightmassImportanceVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALocationVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLocationVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALocationVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ALocationVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLocationVolume(UObject* target, FString label, ALocationVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALocationVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

AMeshMergeCullingVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMeshMergeCullingVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AMeshMergeCullingVolume** result = abstractBasedObject->GetInternal()->GetClassVar<AMeshMergeCullingVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMeshMergeCullingVolume(UObject* target, FString label, AMeshMergeCullingVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AMeshMergeCullingVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

APhysicsVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APhysicsVolume** result = abstractBasedObject->GetInternal()->GetClassVar<APhysicsVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsVolume(UObject* target, FString label, APhysicsVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APhysicsVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

APostProcessVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPostProcessVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APostProcessVolume** result = abstractBasedObject->GetInternal()->GetClassVar<APostProcessVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPostProcessVolume(UObject* target, FString label, APostProcessVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APostProcessVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

APrecomputedVisibilityOverrideVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPrecomputedVisibilityOverrideVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APrecomputedVisibilityOverrideVolume** result = abstractBasedObject->GetInternal()->GetClassVar<APrecomputedVisibilityOverrideVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPrecomputedVisibilityOverrideVolume(UObject* target, FString label, APrecomputedVisibilityOverrideVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APrecomputedVisibilityOverrideVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

APrecomputedVisibilityVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPrecomputedVisibilityVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APrecomputedVisibilityVolume** result = abstractBasedObject->GetInternal()->GetClassVar<APrecomputedVisibilityVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPrecomputedVisibilityVolume(UObject* target, FString label, APrecomputedVisibilityVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APrecomputedVisibilityVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ATriggerVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTriggerVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ATriggerVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ATriggerVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTriggerVolume(UObject* target, FString label, ATriggerVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ATriggerVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

AVisualLoggerFilterVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVisualLoggerFilterVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AVisualLoggerFilterVolume** result = abstractBasedObject->GetInternal()->GetClassVar<AVisualLoggerFilterVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVisualLoggerFilterVolume(UObject* target, FString label, AVisualLoggerFilterVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AVisualLoggerFilterVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

AVolumetricLightmapDensityVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVolumetricLightmapDensityVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AVolumetricLightmapDensityVolume** result = abstractBasedObject->GetInternal()->GetClassVar<AVolumetricLightmapDensityVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVolumetricLightmapDensityVolume(UObject* target, FString label, AVolumetricLightmapDensityVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AVolumetricLightmapDensityVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

AWorldPartitionMiniMapVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionMiniMapVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AWorldPartitionMiniMapVolume** result = abstractBasedObject->GetInternal()->GetClassVar<AWorldPartitionMiniMapVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionMiniMapVolume(UObject* target, FString label, AWorldPartitionMiniMapVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AWorldPartitionMiniMapVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

ADefaultPhysicsVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDefaultPhysicsVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ADefaultPhysicsVolume** result = abstractBasedObject->GetInternal()->GetClassVar<ADefaultPhysicsVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDefaultPhysicsVolume(UObject* target, FString label, ADefaultPhysicsVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ADefaultPhysicsVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

AKillZVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKillZVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AKillZVolume** result = abstractBasedObject->GetInternal()->GetClassVar<AKillZVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKillZVolume(UObject* target, FString label, AKillZVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AKillZVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

APainCausingVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPainCausingVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APainCausingVolume** result = abstractBasedObject->GetInternal()->GetClassVar<APainCausingVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPainCausingVolume(UObject* target, FString label, APainCausingVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APainCausingVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

APlayerController* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlayerController(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APlayerController** result = abstractBasedObject->GetInternal()->GetClassVar<APlayerController*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlayerController(UObject* target, FString label, APlayerController* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APlayerController*>(TCHAR_TO_UTF8(*label), value);
    }
}

ADebugCameraController* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDebugCameraController(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ADebugCameraController** result = abstractBasedObject->GetInternal()->GetClassVar<ADebugCameraController*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDebugCameraController(UObject* target, FString label, ADebugCameraController* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ADebugCameraController*>(TCHAR_TO_UTF8(*label), value);
    }
}

AEmitterCameraLensEffectBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEmitterCameraLensEffectBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AEmitterCameraLensEffectBase** result = abstractBasedObject->GetInternal()->GetClassVar<AEmitterCameraLensEffectBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEmitterCameraLensEffectBase(UObject* target, FString label, AEmitterCameraLensEffectBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AEmitterCameraLensEffectBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

ADebugCameraHUD* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDebugCameraHUD(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ADebugCameraHUD** result = abstractBasedObject->GetInternal()->GetClassVar<ADebugCameraHUD*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDebugCameraHUD(UObject* target, FString label, ADebugCameraHUD* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ADebugCameraHUD*>(TCHAR_TO_UTF8(*label), value);
    }
}

AExponentialHeightFog* UAbstractBlueprintFunctionLibrary::GetAbsClassVarExponentialHeightFog(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AExponentialHeightFog** result = abstractBasedObject->GetInternal()->GetClassVar<AExponentialHeightFog*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarExponentialHeightFog(UObject* target, FString label, AExponentialHeightFog* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AExponentialHeightFog*>(TCHAR_TO_UTF8(*label), value);
    }
}

AGameModeBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameModeBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AGameModeBase** result = abstractBasedObject->GetInternal()->GetClassVar<AGameModeBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameModeBase(UObject* target, FString label, AGameModeBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AGameModeBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

AGameNetworkManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameNetworkManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AGameNetworkManager** result = abstractBasedObject->GetInternal()->GetClassVar<AGameNetworkManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameNetworkManager(UObject* target, FString label, AGameNetworkManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AGameNetworkManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

AGameSession* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameSession(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AGameSession** result = abstractBasedObject->GetInternal()->GetClassVar<AGameSession*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameSession(UObject* target, FString label, AGameSession* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AGameSession*>(TCHAR_TO_UTF8(*label), value);
    }
}

AGameStateBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameStateBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AGameStateBase** result = abstractBasedObject->GetInternal()->GetClassVar<AGameStateBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameStateBase(UObject* target, FString label, AGameStateBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AGameStateBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

APlayerState* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlayerState(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APlayerState** result = abstractBasedObject->GetInternal()->GetClassVar<APlayerState*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlayerState(UObject* target, FString label, APlayerState* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APlayerState*>(TCHAR_TO_UTF8(*label), value);
    }
}

AServerStatReplicator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarServerStatReplicator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AServerStatReplicator** result = abstractBasedObject->GetInternal()->GetClassVar<AServerStatReplicator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarServerStatReplicator(UObject* target, FString label, AServerStatReplicator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AServerStatReplicator*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASkyAtmosphere* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkyAtmosphere(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASkyAtmosphere** result = abstractBasedObject->GetInternal()->GetClassVar<ASkyAtmosphere*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkyAtmosphere(UObject* target, FString label, ASkyAtmosphere* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASkyAtmosphere*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASkyLight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkyLight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASkyLight** result = abstractBasedObject->GetInternal()->GetClassVar<ASkyLight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkyLight(UObject* target, FString label, ASkyLight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASkyLight*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASpatialHashRuntimeGridInfo* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSpatialHashRuntimeGridInfo(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASpatialHashRuntimeGridInfo** result = abstractBasedObject->GetInternal()->GetClassVar<ASpatialHashRuntimeGridInfo*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSpatialHashRuntimeGridInfo(UObject* target, FString label, ASpatialHashRuntimeGridInfo* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASpatialHashRuntimeGridInfo*>(TCHAR_TO_UTF8(*label), value);
    }
}

AVolumetricCloud* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVolumetricCloud(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AVolumetricCloud** result = abstractBasedObject->GetInternal()->GetClassVar<AVolumetricCloud*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVolumetricCloud(UObject* target, FString label, AVolumetricCloud* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AVolumetricCloud*>(TCHAR_TO_UTF8(*label), value);
    }
}

AWindDirectionalSource* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWindDirectionalSource(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AWindDirectionalSource** result = abstractBasedObject->GetInternal()->GetClassVar<AWindDirectionalSource*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWindDirectionalSource(UObject* target, FString label, AWindDirectionalSource* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AWindDirectionalSource*>(TCHAR_TO_UTF8(*label), value);
    }
}

AWorldDataLayers* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldDataLayers(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AWorldDataLayers** result = abstractBasedObject->GetInternal()->GetClassVar<AWorldDataLayers*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldDataLayers(UObject* target, FString label, AWorldDataLayers* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AWorldDataLayers*>(TCHAR_TO_UTF8(*label), value);
    }
}

AWorldPartitionMiniMap* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionMiniMap(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AWorldPartitionMiniMap** result = abstractBasedObject->GetInternal()->GetClassVar<AWorldPartitionMiniMap*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionMiniMap(UObject* target, FString label, AWorldPartitionMiniMap* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AWorldPartitionMiniMap*>(TCHAR_TO_UTF8(*label), value);
    }
}

AWorldSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AWorldSettings** result = abstractBasedObject->GetInternal()->GetClassVar<AWorldSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldSettings(UObject* target, FString label, AWorldSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AWorldSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

AGameMode* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameMode(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AGameMode** result = abstractBasedObject->GetInternal()->GetClassVar<AGameMode*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameMode(UObject* target, FString label, AGameMode* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AGameMode*>(TCHAR_TO_UTF8(*label), value);
    }
}

AGameState* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameState(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AGameState** result = abstractBasedObject->GetInternal()->GetClassVar<AGameState*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameState(UObject* target, FString label, AGameState* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AGameState*>(TCHAR_TO_UTF8(*label), value);
    }
}

APackedLevelActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPackedLevelActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APackedLevelActor** result = abstractBasedObject->GetInternal()->GetClassVar<APackedLevelActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPackedLevelActor(UObject* target, FString label, APackedLevelActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APackedLevelActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ADirectionalLight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDirectionalLight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ADirectionalLight** result = abstractBasedObject->GetInternal()->GetClassVar<ADirectionalLight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDirectionalLight(UObject* target, FString label, ADirectionalLight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ADirectionalLight*>(TCHAR_TO_UTF8(*label), value);
    }
}

APointLight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPointLight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APointLight** result = abstractBasedObject->GetInternal()->GetClassVar<APointLight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPointLight(UObject* target, FString label, APointLight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APointLight*>(TCHAR_TO_UTF8(*label), value);
    }
}

ARectLight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRectLight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ARectLight** result = abstractBasedObject->GetInternal()->GetClassVar<ARectLight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRectLight(UObject* target, FString label, ARectLight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ARectLight*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASpotLight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSpotLight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASpotLight** result = abstractBasedObject->GetInternal()->GetClassVar<ASpotLight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSpotLight(UObject* target, FString label, ASpotLight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASpotLight*>(TCHAR_TO_UTF8(*label), value);
    }
}

AGeneratedMeshAreaLight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGeneratedMeshAreaLight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AGeneratedMeshAreaLight** result = abstractBasedObject->GetInternal()->GetClassVar<AGeneratedMeshAreaLight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGeneratedMeshAreaLight(UObject* target, FString label, AGeneratedMeshAreaLight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AGeneratedMeshAreaLight*>(TCHAR_TO_UTF8(*label), value);
    }
}

ALightWeightInstanceStaticMeshManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightWeightInstanceStaticMeshManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ALightWeightInstanceStaticMeshManager** result = abstractBasedObject->GetInternal()->GetClassVar<ALightWeightInstanceStaticMeshManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightWeightInstanceStaticMeshManager(UObject* target, FString label, ALightWeightInstanceStaticMeshManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ALightWeightInstanceStaticMeshManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

APlayerStart* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlayerStart(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APlayerStart** result = abstractBasedObject->GetInternal()->GetClassVar<APlayerStart*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlayerStart(UObject* target, FString label, APlayerStart* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APlayerStart*>(TCHAR_TO_UTF8(*label), value);
    }
}

APlayerStartPIE* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlayerStartPIE(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APlayerStartPIE** result = abstractBasedObject->GetInternal()->GetClassVar<APlayerStartPIE*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlayerStartPIE(UObject* target, FString label, APlayerStartPIE* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APlayerStartPIE*>(TCHAR_TO_UTF8(*label), value);
    }
}

AISMPartitionActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarISMPartitionActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AISMPartitionActor** result = abstractBasedObject->GetInternal()->GetClassVar<AISMPartitionActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarISMPartitionActor(UObject* target, FString label, AISMPartitionActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AISMPartitionActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ANavigationDataChunkActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavigationDataChunkActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ANavigationDataChunkActor** result = abstractBasedObject->GetInternal()->GetClassVar<ANavigationDataChunkActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavigationDataChunkActor(UObject* target, FString label, ANavigationDataChunkActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ANavigationDataChunkActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

AInstancedPlacementPartitionActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInstancedPlacementPartitionActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (AInstancedPlacementPartitionActor** result = abstractBasedObject->GetInternal()->GetClassVar<AInstancedPlacementPartitionActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInstancedPlacementPartitionActor(UObject* target, FString label, AInstancedPlacementPartitionActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<AInstancedPlacementPartitionActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ACharacter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCharacter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ACharacter** result = abstractBasedObject->GetInternal()->GetClassVar<ACharacter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCharacter(UObject* target, FString label, ACharacter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ACharacter*>(TCHAR_TO_UTF8(*label), value);
    }
}

ADefaultPawn* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDefaultPawn(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ADefaultPawn** result = abstractBasedObject->GetInternal()->GetClassVar<ADefaultPawn*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDefaultPawn(UObject* target, FString label, ADefaultPawn* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ADefaultPawn*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASpectatorPawn* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSpectatorPawn(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASpectatorPawn** result = abstractBasedObject->GetInternal()->GetClassVar<ASpectatorPawn*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSpectatorPawn(UObject* target, FString label, ASpectatorPawn* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASpectatorPawn*>(TCHAR_TO_UTF8(*label), value);
    }
}

ABoxReflectionCapture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBoxReflectionCapture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ABoxReflectionCapture** result = abstractBasedObject->GetInternal()->GetClassVar<ABoxReflectionCapture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBoxReflectionCapture(UObject* target, FString label, ABoxReflectionCapture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ABoxReflectionCapture*>(TCHAR_TO_UTF8(*label), value);
    }
}

APlaneReflectionCapture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlaneReflectionCapture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APlaneReflectionCapture** result = abstractBasedObject->GetInternal()->GetClassVar<APlaneReflectionCapture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlaneReflectionCapture(UObject* target, FString label, APlaneReflectionCapture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APlaneReflectionCapture*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASphereReflectionCapture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSphereReflectionCapture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASphereReflectionCapture** result = abstractBasedObject->GetInternal()->GetClassVar<ASphereReflectionCapture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSphereReflectionCapture(UObject* target, FString label, ASphereReflectionCapture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASphereReflectionCapture*>(TCHAR_TO_UTF8(*label), value);
    }
}

APhysicsConstraintActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsConstraintActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APhysicsConstraintActor** result = abstractBasedObject->GetInternal()->GetClassVar<APhysicsConstraintActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsConstraintActor(UObject* target, FString label, APhysicsConstraintActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APhysicsConstraintActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

APhysicsThruster* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsThruster(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APhysicsThruster** result = abstractBasedObject->GetInternal()->GetClassVar<APhysicsThruster*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsThruster(UObject* target, FString label, APhysicsThruster* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APhysicsThruster*>(TCHAR_TO_UTF8(*label), value);
    }
}

ARadialForceActor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRadialForceActor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ARadialForceActor** result = abstractBasedObject->GetInternal()->GetClassVar<ARadialForceActor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRadialForceActor(UObject* target, FString label, ARadialForceActor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ARadialForceActor*>(TCHAR_TO_UTF8(*label), value);
    }
}

APlanarReflection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlanarReflection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (APlanarReflection** result = abstractBasedObject->GetInternal()->GetClassVar<APlanarReflection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlanarReflection(UObject* target, FString label, APlanarReflection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<APlanarReflection*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASceneCapture2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSceneCapture2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASceneCapture2D** result = abstractBasedObject->GetInternal()->GetClassVar<ASceneCapture2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSceneCapture2D(UObject* target, FString label, ASceneCapture2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASceneCapture2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

ASceneCaptureCube* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSceneCaptureCube(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ASceneCaptureCube** result = abstractBasedObject->GetInternal()->GetClassVar<ASceneCaptureCube*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSceneCaptureCube(UObject* target, FString label, ASceneCaptureCube* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ASceneCaptureCube*>(TCHAR_TO_UTF8(*label), value);
    }
}

ATriggerBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTriggerBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ATriggerBox** result = abstractBasedObject->GetInternal()->GetClassVar<ATriggerBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTriggerBox(UObject* target, FString label, ATriggerBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ATriggerBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

ATriggerCapsule* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTriggerCapsule(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ATriggerCapsule** result = abstractBasedObject->GetInternal()->GetClassVar<ATriggerCapsule*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTriggerCapsule(UObject* target, FString label, ATriggerCapsule* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ATriggerCapsule*>(TCHAR_TO_UTF8(*label), value);
    }
}

ATriggerSphere* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTriggerSphere(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ATriggerSphere** result = abstractBasedObject->GetInternal()->GetClassVar<ATriggerSphere*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTriggerSphere(UObject* target, FString label, ATriggerSphere* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ATriggerSphere*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorTextureStreamingBuildDataComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorTextureStreamingBuildDataComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorTextureStreamingBuildDataComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UActorTextureStreamingBuildDataComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorTextureStreamingBuildDataComponent(UObject* target, FString label, UActorTextureStreamingBuildDataComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorTextureStreamingBuildDataComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UApplicationLifecycleComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarApplicationLifecycleComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UApplicationLifecycleComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UApplicationLifecycleComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarApplicationLifecycleComponent(UObject* target, FString label, UApplicationLifecycleComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UApplicationLifecycleComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAsyncPhysicsInputComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAsyncPhysicsInputComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAsyncPhysicsInputComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UAsyncPhysicsInputComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAsyncPhysicsInputComponent(UObject* target, FString label, UAsyncPhysicsInputComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAsyncPhysicsInputComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBoundsCopyComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBoundsCopyComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBoundsCopyComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UBoundsCopyComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBoundsCopyComponent(UObject* target, FString label, UBoundsCopyComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBoundsCopyComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UInputComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputComponent(UObject* target, FString label, UInputComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULODSyncComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLODSyncComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULODSyncComponent** result = abstractBasedObject->GetInternal()->GetClassVar<ULODSyncComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLODSyncComponent(UObject* target, FString label, ULODSyncComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULODSyncComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMovementComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMovementComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMovementComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UMovementComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMovementComponent(UObject* target, FString label, UMovementComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMovementComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnNoiseEmitterComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnNoiseEmitterComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnNoiseEmitterComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnNoiseEmitterComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnNoiseEmitterComponent(UObject* target, FString label, UPawnNoiseEmitterComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnNoiseEmitterComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicalAnimationComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicalAnimationComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicalAnimationComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicalAnimationComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicalAnimationComponent(UObject* target, FString label, UPhysicalAnimationComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicalAnimationComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsHandleComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsHandleComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsHandleComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsHandleComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsHandleComponent(UObject* target, FString label, UPhysicsHandleComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsHandleComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlatformEventsComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlatformEventsComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlatformEventsComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPlatformEventsComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlatformEventsComponent(UObject* target, FString label, UPlatformEventsComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlatformEventsComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USceneComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSceneComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USceneComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USceneComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSceneComponent(UObject* target, FString label, USceneComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USceneComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTimelineComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTimelineComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTimelineComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UTimelineComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTimelineComponent(UObject* target, FString label, UTimelineComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTimelineComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVOIPTalker* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVOIPTalker(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVOIPTalker** result = abstractBasedObject->GetInternal()->GetClassVar<UVOIPTalker*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVOIPTalker(UObject* target, FString label, UVOIPTalker* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVOIPTalker*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionStreamingSourceComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionStreamingSourceComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionStreamingSourceComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionStreamingSourceComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionStreamingSourceComponent(UObject* target, FString label, UWorldPartitionStreamingSourceComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionStreamingSourceComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInterpToMovementComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInterpToMovementComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInterpToMovementComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UInterpToMovementComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInterpToMovementComponent(UObject* target, FString label, UInterpToMovementComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInterpToMovementComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNavMovementComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNavMovementComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNavMovementComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UNavMovementComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNavMovementComponent(UObject* target, FString label, UNavMovementComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNavMovementComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UProjectileMovementComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarProjectileMovementComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UProjectileMovementComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UProjectileMovementComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarProjectileMovementComponent(UObject* target, FString label, UProjectileMovementComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UProjectileMovementComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

URotatingMovementComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRotatingMovementComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URotatingMovementComponent** result = abstractBasedObject->GetInternal()->GetClassVar<URotatingMovementComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRotatingMovementComponent(UObject* target, FString label, URotatingMovementComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URotatingMovementComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPawnMovementComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPawnMovementComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPawnMovementComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPawnMovementComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPawnMovementComponent(UObject* target, FString label, UPawnMovementComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPawnMovementComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCharacterMovementComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCharacterMovementComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCharacterMovementComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UCharacterMovementComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCharacterMovementComponent(UObject* target, FString label, UCharacterMovementComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCharacterMovementComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UFloatingPawnMovement* UAbstractBlueprintFunctionLibrary::GetAbsClassVarFloatingPawnMovement(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UFloatingPawnMovement** result = abstractBasedObject->GetInternal()->GetClassVar<UFloatingPawnMovement*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarFloatingPawnMovement(UObject* target, FString label, UFloatingPawnMovement* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UFloatingPawnMovement*>(TCHAR_TO_UTF8(*label), value);
    }
}

USpectatorPawnMovement* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSpectatorPawnMovement(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USpectatorPawnMovement** result = abstractBasedObject->GetInternal()->GetClassVar<USpectatorPawnMovement*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSpectatorPawnMovement(UObject* target, FString label, USpectatorPawnMovement* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USpectatorPawnMovement*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAudioComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAudioComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAudioComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UAudioComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAudioComponent(UObject* target, FString label, UAudioComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAudioComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCameraComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCameraComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCameraComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UCameraComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCameraComponent(UObject* target, FString label, UCameraComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCameraComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCameraShakeSourceComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCameraShakeSourceComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCameraShakeSourceComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UCameraShakeSourceComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCameraShakeSourceComponent(UObject* target, FString label, UCameraShakeSourceComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCameraShakeSourceComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UChildActorComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarChildActorComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UChildActorComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UChildActorComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarChildActorComponent(UObject* target, FString label, UChildActorComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UChildActorComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDecalComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDecalComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDecalComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UDecalComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDecalComponent(UObject* target, FString label, UDecalComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDecalComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UExponentialHeightFogComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarExponentialHeightFogComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UExponentialHeightFogComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UExponentialHeightFogComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarExponentialHeightFogComponent(UObject* target, FString label, UExponentialHeightFogComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UExponentialHeightFogComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UForceFeedbackComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarForceFeedbackComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UForceFeedbackComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UForceFeedbackComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarForceFeedbackComponent(UObject* target, FString label, UForceFeedbackComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UForceFeedbackComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelInstanceComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelInstanceComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelInstanceComponent** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelInstanceComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelInstanceComponent(UObject* target, FString label, ULevelInstanceComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelInstanceComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULightComponentBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightComponentBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULightComponentBase** result = abstractBasedObject->GetInternal()->GetClassVar<ULightComponentBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightComponentBase(UObject* target, FString label, ULightComponentBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULightComponentBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULightmassPortalComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightmassPortalComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULightmassPortalComponent** result = abstractBasedObject->GetInternal()->GetClassVar<ULightmassPortalComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightmassPortalComponent(UObject* target, FString label, ULightmassPortalComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULightmassPortalComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsConstraintComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsConstraintComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsConstraintComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsConstraintComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsConstraintComponent(UObject* target, FString label, UPhysicsConstraintComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsConstraintComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsFieldComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsFieldComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsFieldComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsFieldComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsFieldComponent(UObject* target, FString label, UPhysicsFieldComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsFieldComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsSpringComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsSpringComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsSpringComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsSpringComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsSpringComponent(UObject* target, FString label, UPhysicsSpringComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsSpringComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsThrusterComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsThrusterComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsThrusterComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsThrusterComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsThrusterComponent(UObject* target, FString label, UPhysicsThrusterComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsThrusterComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPostProcessComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPostProcessComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPostProcessComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPostProcessComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPostProcessComponent(UObject* target, FString label, UPostProcessComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPostProcessComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPrimitiveComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPrimitiveComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPrimitiveComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPrimitiveComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPrimitiveComponent(UObject* target, FString label, UPrimitiveComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPrimitiveComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

URadialForceComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRadialForceComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URadialForceComponent** result = abstractBasedObject->GetInternal()->GetClassVar<URadialForceComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRadialForceComponent(UObject* target, FString label, URadialForceComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URadialForceComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UReflectionCaptureComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarReflectionCaptureComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UReflectionCaptureComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UReflectionCaptureComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarReflectionCaptureComponent(UObject* target, FString label, UReflectionCaptureComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UReflectionCaptureComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

URuntimeVirtualTextureComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRuntimeVirtualTextureComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URuntimeVirtualTextureComponent** result = abstractBasedObject->GetInternal()->GetClassVar<URuntimeVirtualTextureComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRuntimeVirtualTextureComponent(UObject* target, FString label, URuntimeVirtualTextureComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URuntimeVirtualTextureComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USceneCaptureComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSceneCaptureComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USceneCaptureComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USceneCaptureComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSceneCaptureComponent(UObject* target, FString label, USceneCaptureComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USceneCaptureComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkyAtmosphereComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkyAtmosphereComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkyAtmosphereComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USkyAtmosphereComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkyAtmosphereComponent(UObject* target, FString label, USkyAtmosphereComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkyAtmosphereComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USpringArmComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSpringArmComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USpringArmComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USpringArmComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSpringArmComponent(UObject* target, FString label, USpringArmComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USpringArmComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStereoLayerComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStereoLayerComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStereoLayerComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UStereoLayerComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStereoLayerComponent(UObject* target, FString label, UStereoLayerComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStereoLayerComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVolumetricCloudComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVolumetricCloudComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVolumetricCloudComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UVolumetricCloudComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVolumetricCloudComponent(UObject* target, FString label, UVolumetricCloudComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVolumetricCloudComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWindDirectionalSourceComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWindDirectionalSourceComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWindDirectionalSourceComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UWindDirectionalSourceComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWindDirectionalSourceComponent(UObject* target, FString label, UWindDirectionalSourceComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWindDirectionalSourceComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULightComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULightComponent** result = abstractBasedObject->GetInternal()->GetClassVar<ULightComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightComponent(UObject* target, FString label, ULightComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULightComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkyLightComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkyLightComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkyLightComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USkyLightComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkyLightComponent(UObject* target, FString label, USkyLightComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkyLightComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDirectionalLightComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDirectionalLightComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDirectionalLightComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UDirectionalLightComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDirectionalLightComponent(UObject* target, FString label, UDirectionalLightComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDirectionalLightComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULocalLightComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLocalLightComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULocalLightComponent** result = abstractBasedObject->GetInternal()->GetClassVar<ULocalLightComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLocalLightComponent(UObject* target, FString label, ULocalLightComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULocalLightComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPointLightComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPointLightComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPointLightComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPointLightComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPointLightComponent(UObject* target, FString label, UPointLightComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPointLightComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

URectLightComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRectLightComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URectLightComponent** result = abstractBasedObject->GetInternal()->GetClassVar<URectLightComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRectLightComponent(UObject* target, FString label, URectLightComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URectLightComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USpotLightComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSpotLightComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USpotLightComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USpotLightComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSpotLightComponent(UObject* target, FString label, USpotLightComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USpotLightComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UArrowComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarArrowComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UArrowComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UArrowComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarArrowComponent(UObject* target, FString label, UArrowComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UArrowComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBillboardComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBillboardComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBillboardComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UBillboardComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBillboardComponent(UObject* target, FString label, UBillboardComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBillboardComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBrushComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBrushComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBrushComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UBrushComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBrushComponent(UObject* target, FString label, UBrushComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBrushComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDebugDrawComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDebugDrawComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDebugDrawComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UDebugDrawComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDebugDrawComponent(UObject* target, FString label, UDebugDrawComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDebugDrawComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDrawFrustumComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDrawFrustumComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDrawFrustumComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UDrawFrustumComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDrawFrustumComponent(UObject* target, FString label, UDrawFrustumComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDrawFrustumComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UFXSystemComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarFXSystemComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UFXSystemComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UFXSystemComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarFXSystemComponent(UObject* target, FString label, UFXSystemComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UFXSystemComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULineBatchComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLineBatchComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULineBatchComponent** result = abstractBasedObject->GetInternal()->GetClassVar<ULineBatchComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLineBatchComponent(UObject* target, FString label, ULineBatchComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULineBatchComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialBillboardComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialBillboardComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialBillboardComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialBillboardComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialBillboardComponent(UObject* target, FString label, UMaterialBillboardComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialBillboardComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMeshComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMeshComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMeshComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UMeshComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMeshComponent(UObject* target, FString label, UMeshComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMeshComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UModelComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarModelComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UModelComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UModelComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarModelComponent(UObject* target, FString label, UModelComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UModelComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UShapeComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarShapeComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UShapeComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UShapeComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarShapeComponent(UObject* target, FString label, UShapeComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UShapeComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USplineComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSplineComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USplineComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USplineComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSplineComponent(UObject* target, FString label, USplineComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USplineComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextRenderComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextRenderComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextRenderComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UTextRenderComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextRenderComponent(UObject* target, FString label, UTextRenderComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextRenderComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVectorFieldComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVectorFieldComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVectorFieldComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UVectorFieldComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVectorFieldComponent(UObject* target, FString label, UVectorFieldComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVectorFieldComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleSystemComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleSystemComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleSystemComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleSystemComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleSystemComponent(UObject* target, FString label, UParticleSystemComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleSystemComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkinnedMeshComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkinnedMeshComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkinnedMeshComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USkinnedMeshComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkinnedMeshComponent(UObject* target, FString label, USkinnedMeshComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkinnedMeshComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStaticMeshComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStaticMeshComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStaticMeshComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UStaticMeshComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStaticMeshComponent(UObject* target, FString label, UStaticMeshComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStaticMeshComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPoseableMeshComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPoseableMeshComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPoseableMeshComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPoseableMeshComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPoseableMeshComponent(UObject* target, FString label, UPoseableMeshComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPoseableMeshComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkeletalMeshComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkeletalMeshComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkeletalMeshComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USkeletalMeshComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkeletalMeshComponent(UObject* target, FString label, USkeletalMeshComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkeletalMeshComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInstancedStaticMeshComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInstancedStaticMeshComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInstancedStaticMeshComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UInstancedStaticMeshComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInstancedStaticMeshComponent(UObject* target, FString label, UInstancedStaticMeshComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInstancedStaticMeshComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USplineMeshComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSplineMeshComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USplineMeshComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USplineMeshComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSplineMeshComponent(UObject* target, FString label, USplineMeshComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USplineMeshComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHierarchicalInstancedStaticMeshComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHierarchicalInstancedStaticMeshComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHierarchicalInstancedStaticMeshComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UHierarchicalInstancedStaticMeshComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHierarchicalInstancedStaticMeshComponent(UObject* target, FString label, UHierarchicalInstancedStaticMeshComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHierarchicalInstancedStaticMeshComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBoxComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBoxComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBoxComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UBoxComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBoxComponent(UObject* target, FString label, UBoxComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBoxComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCapsuleComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCapsuleComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCapsuleComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UCapsuleComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCapsuleComponent(UObject* target, FString label, UCapsuleComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCapsuleComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USphereComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSphereComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USphereComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USphereComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSphereComponent(UObject* target, FString label, USphereComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USphereComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDrawSphereComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDrawSphereComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDrawSphereComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UDrawSphereComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDrawSphereComponent(UObject* target, FString label, UDrawSphereComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDrawSphereComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBoxReflectionCaptureComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBoxReflectionCaptureComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBoxReflectionCaptureComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UBoxReflectionCaptureComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBoxReflectionCaptureComponent(UObject* target, FString label, UBoxReflectionCaptureComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBoxReflectionCaptureComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlaneReflectionCaptureComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlaneReflectionCaptureComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlaneReflectionCaptureComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPlaneReflectionCaptureComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlaneReflectionCaptureComponent(UObject* target, FString label, UPlaneReflectionCaptureComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlaneReflectionCaptureComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USphereReflectionCaptureComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSphereReflectionCaptureComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USphereReflectionCaptureComponent** result = abstractBasedObject->GetInternal()->GetClassVar<USphereReflectionCaptureComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSphereReflectionCaptureComponent(UObject* target, FString label, USphereReflectionCaptureComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USphereReflectionCaptureComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlanarReflectionComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlanarReflectionComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlanarReflectionComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPlanarReflectionComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlanarReflectionComponent(UObject* target, FString label, UPlanarReflectionComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlanarReflectionComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

USceneCaptureComponent2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSceneCaptureComponent2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USceneCaptureComponent2D** result = abstractBasedObject->GetInternal()->GetClassVar<USceneCaptureComponent2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSceneCaptureComponent2D(UObject* target, FString label, USceneCaptureComponent2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USceneCaptureComponent2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

USceneCaptureComponentCube* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSceneCaptureComponentCube(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USceneCaptureComponentCube** result = abstractBasedObject->GetInternal()->GetClassVar<USceneCaptureComponentCube*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSceneCaptureComponentCube(UObject* target, FString label, USceneCaptureComponentCube* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USceneCaptureComponentCube*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimSequenceBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimSequenceBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimSequenceBase** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimSequenceBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimSequenceBase(UObject* target, FString label, UAnimSequenceBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimSequenceBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlendSpace* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlendSpace(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlendSpace** result = abstractBasedObject->GetInternal()->GetClassVar<UBlendSpace*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlendSpace(UObject* target, FString label, UBlendSpace* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlendSpace*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPoseAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPoseAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPoseAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UPoseAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPoseAsset(UObject* target, FString label, UPoseAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPoseAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCompositeBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCompositeBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCompositeBase** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCompositeBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCompositeBase(UObject* target, FString label, UAnimCompositeBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCompositeBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimSequence* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimSequence(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimSequence** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimSequence*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimSequence(UObject* target, FString label, UAnimSequence* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimSequence*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimStreamable* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimStreamable(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimStreamable** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimStreamable*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimStreamable(UObject* target, FString label, UAnimStreamable* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimStreamable*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimComposite* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimComposite(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimComposite** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimComposite*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimComposite(UObject* target, FString label, UAnimComposite* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimComposite*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimMontage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimMontage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimMontage** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimMontage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimMontage(UObject* target, FString label, UAnimMontage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimMontage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAimOffsetBlendSpace* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAimOffsetBlendSpace(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAimOffsetBlendSpace** result = abstractBasedObject->GetInternal()->GetClassVar<UAimOffsetBlendSpace*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAimOffsetBlendSpace(UObject* target, FString label, UAimOffsetBlendSpace* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAimOffsetBlendSpace*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlendSpace1D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlendSpace1D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlendSpace1D** result = abstractBasedObject->GetInternal()->GetClassVar<UBlendSpace1D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlendSpace1D(UObject* target, FString label, UBlendSpace1D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlendSpace1D*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAimOffsetBlendSpace1D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAimOffsetBlendSpace1D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAimOffsetBlendSpace1D** result = abstractBasedObject->GetInternal()->GetClassVar<UAimOffsetBlendSpace1D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAimOffsetBlendSpace1D(UObject* target, FString label, UAimOffsetBlendSpace1D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAimOffsetBlendSpace1D*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCompress* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCompress(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCompress** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCompress*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCompress(UObject* target, FString label, UAnimCompress* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCompress*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCompress_BitwiseCompressOnly* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCompress_BitwiseCompressOnly(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCompress_BitwiseCompressOnly** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCompress_BitwiseCompressOnly*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCompress_BitwiseCompressOnly(UObject* target, FString label, UAnimCompress_BitwiseCompressOnly* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCompress_BitwiseCompressOnly*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCompress_RemoveEverySecondKey* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCompress_RemoveEverySecondKey(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCompress_RemoveEverySecondKey** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCompress_RemoveEverySecondKey*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCompress_RemoveEverySecondKey(UObject* target, FString label, UAnimCompress_RemoveEverySecondKey* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCompress_RemoveEverySecondKey*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCompress_RemoveLinearKeys* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCompress_RemoveLinearKeys(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCompress_RemoveLinearKeys** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCompress_RemoveLinearKeys*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCompress_RemoveLinearKeys(UObject* target, FString label, UAnimCompress_RemoveLinearKeys* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCompress_RemoveLinearKeys*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCompress_RemoveTrivialKeys* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCompress_RemoveTrivialKeys(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCompress_RemoveTrivialKeys** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCompress_RemoveTrivialKeys*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCompress_RemoveTrivialKeys(UObject* target, FString label, UAnimCompress_RemoveTrivialKeys* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCompress_RemoveTrivialKeys*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCompress_LeastDestructive* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCompress_LeastDestructive(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCompress_LeastDestructive** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCompress_LeastDestructive*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCompress_LeastDestructive(UObject* target, FString label, UAnimCompress_LeastDestructive* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCompress_LeastDestructive*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCompress_PerTrackCompression* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCompress_PerTrackCompression(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCompress_PerTrackCompression** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCompress_PerTrackCompression*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCompress_PerTrackCompression(UObject* target, FString label, UAnimCompress_PerTrackCompression* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCompress_PerTrackCompression*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCurveCompressionCodec_CompressedRichCurve* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCurveCompressionCodec_CompressedRichCurve(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCurveCompressionCodec_CompressedRichCurve** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCurveCompressionCodec_CompressedRichCurve*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCurveCompressionCodec_CompressedRichCurve(UObject* target, FString label, UAnimCurveCompressionCodec_CompressedRichCurve* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCurveCompressionCodec_CompressedRichCurve*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCurveCompressionCodec_UniformIndexable* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCurveCompressionCodec_UniformIndexable(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCurveCompressionCodec_UniformIndexable** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCurveCompressionCodec_UniformIndexable*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCurveCompressionCodec_UniformIndexable(UObject* target, FString label, UAnimCurveCompressionCodec_UniformIndexable* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCurveCompressionCodec_UniformIndexable*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimCurveCompressionCodec_UniformlySampled* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimCurveCompressionCodec_UniformlySampled(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimCurveCompressionCodec_UniformlySampled** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimCurveCompressionCodec_UniformlySampled*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimCurveCompressionCodec_UniformlySampled(UObject* target, FString label, UAnimCurveCompressionCodec_UniformlySampled* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimCurveCompressionCodec_UniformlySampled*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimSingleNodeInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimSingleNodeInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimSingleNodeInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimSingleNodeInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimSingleNodeInstance(UObject* target, FString label, UAnimSingleNodeInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimSingleNodeInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureMipDataProviderFactory* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureMipDataProviderFactory(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureMipDataProviderFactory** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureMipDataProviderFactory*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureMipDataProviderFactory(UObject* target, FString label, UTextureMipDataProviderFactory* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureMipDataProviderFactory*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAsyncActionHandleSaveGame* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAsyncActionHandleSaveGame(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAsyncActionHandleSaveGame** result = abstractBasedObject->GetInternal()->GetClassVar<UAsyncActionHandleSaveGame*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAsyncActionHandleSaveGame(UObject* target, FString label, UAsyncActionHandleSaveGame* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAsyncActionHandleSaveGame*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAsyncActionLoadPrimaryAssetBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAsyncActionLoadPrimaryAssetBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAsyncActionLoadPrimaryAssetBase** result = abstractBasedObject->GetInternal()->GetClassVar<UAsyncActionLoadPrimaryAssetBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAsyncActionLoadPrimaryAssetBase(UObject* target, FString label, UAsyncActionLoadPrimaryAssetBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAsyncActionLoadPrimaryAssetBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCancellableAsyncAction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCancellableAsyncAction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCancellableAsyncAction** result = abstractBasedObject->GetInternal()->GetClassVar<UCancellableAsyncAction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCancellableAsyncAction(UObject* target, FString label, UCancellableAsyncAction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCancellableAsyncAction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UOnlineBlueprintCallProxyBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarOnlineBlueprintCallProxyBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UOnlineBlueprintCallProxyBase** result = abstractBasedObject->GetInternal()->GetClassVar<UOnlineBlueprintCallProxyBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarOnlineBlueprintCallProxyBase(UObject* target, FString label, UOnlineBlueprintCallProxyBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UOnlineBlueprintCallProxyBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprint* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprint(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprint** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprint*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprint(UObject* target, FString label, UBlueprint* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprint*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimBlueprint* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimBlueprint(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimBlueprint** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimBlueprint*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimBlueprint(UObject* target, FString label, UAnimBlueprint* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimBlueprint*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelScriptBlueprint* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelScriptBlueprint(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelScriptBlueprint** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelScriptBlueprint*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelScriptBlueprint(UObject* target, FString label, ULevelScriptBlueprint* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelScriptBlueprint*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimationAssetExtensions* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimationAssetExtensions(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimationAssetExtensions** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimationAssetExtensions*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimationAssetExtensions(UObject* target, FString label, UAnimationAssetExtensions* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimationAssetExtensions*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimationAttributeIdentifierExtensions* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimationAttributeIdentifierExtensions(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimationAttributeIdentifierExtensions** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimationAttributeIdentifierExtensions*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimationAttributeIdentifierExtensions(UObject* target, FString label, UAnimationAttributeIdentifierExtensions* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimationAttributeIdentifierExtensions*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimationCurveIdentifierExtensions* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimationCurveIdentifierExtensions(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimationCurveIdentifierExtensions** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimationCurveIdentifierExtensions*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimationCurveIdentifierExtensions(UObject* target, FString label, UAnimationCurveIdentifierExtensions* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimationCurveIdentifierExtensions*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimationDataModelNotifiesExtensions* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimationDataModelNotifiesExtensions(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimationDataModelNotifiesExtensions** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimationDataModelNotifiesExtensions*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimationDataModelNotifiesExtensions(UObject* target, FString label, UAnimationDataModelNotifiesExtensions* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimationDataModelNotifiesExtensions*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimNotifyLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimNotifyLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimNotifyLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimNotifyLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimNotifyLibrary(UObject* target, FString label, UAnimNotifyLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimNotifyLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimNotifyMirrorInspectionLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimNotifyMirrorInspectionLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimNotifyMirrorInspectionLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimNotifyMirrorInspectionLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimNotifyMirrorInspectionLibrary(UObject* target, FString label, UAnimNotifyMirrorInspectionLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimNotifyMirrorInspectionLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAnimNotifyStateMachineInspectionLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAnimNotifyStateMachineInspectionLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAnimNotifyStateMachineInspectionLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UAnimNotifyStateMachineInspectionLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAnimNotifyStateMachineInspectionLibrary(UObject* target, FString label, UAnimNotifyStateMachineInspectionLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAnimNotifyStateMachineInspectionLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAudioParameterConversionStatics* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAudioParameterConversionStatics(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAudioParameterConversionStatics** result = abstractBasedObject->GetInternal()->GetClassVar<UAudioParameterConversionStatics*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAudioParameterConversionStatics(UObject* target, FString label, UAudioParameterConversionStatics* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAudioParameterConversionStatics*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprintMapLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprintMapLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprintMapLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprintMapLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprintMapLibrary(UObject* target, FString label, UBlueprintMapLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprintMapLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprintPathsLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprintPathsLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprintPathsLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprintPathsLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprintPathsLibrary(UObject* target, FString label, UBlueprintPathsLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprintPathsLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprintPlatformLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprintPlatformLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprintPlatformLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprintPlatformLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprintPlatformLibrary(UObject* target, FString label, UBlueprintPlatformLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprintPlatformLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBlueprintSetLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBlueprintSetLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBlueprintSetLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UBlueprintSetLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBlueprintSetLibrary(UObject* target, FString label, UBlueprintSetLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBlueprintSetLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBuiltInAttributesExtensions* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBuiltInAttributesExtensions(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBuiltInAttributesExtensions** result = abstractBasedObject->GetInternal()->GetClassVar<UBuiltInAttributesExtensions*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBuiltInAttributesExtensions(UObject* target, FString label, UBuiltInAttributesExtensions* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBuiltInAttributesExtensions*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCachedAnimDataLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCachedAnimDataLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCachedAnimDataLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UCachedAnimDataLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCachedAnimDataLibrary(UObject* target, FString label, UCachedAnimDataLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCachedAnimDataLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UConstraintInstanceBlueprintLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarConstraintInstanceBlueprintLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UConstraintInstanceBlueprintLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UConstraintInstanceBlueprintLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarConstraintInstanceBlueprintLibrary(UObject* target, FString label, UConstraintInstanceBlueprintLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UConstraintInstanceBlueprintLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataTableFunctionLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataTableFunctionLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataTableFunctionLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UDataTableFunctionLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataTableFunctionLibrary(UObject* target, FString label, UDataTableFunctionLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataTableFunctionLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDebugDrawService* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDebugDrawService(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDebugDrawService** result = abstractBasedObject->GetInternal()->GetClassVar<UDebugDrawService*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDebugDrawService(UObject* target, FString label, UDebugDrawService* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDebugDrawService*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEngineElementsLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEngineElementsLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEngineElementsLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UEngineElementsLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEngineElementsLibrary(UObject* target, FString label, UEngineElementsLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEngineElementsLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGameplayStatics* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameplayStatics(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGameplayStatics** result = abstractBasedObject->GetInternal()->GetClassVar<UGameplayStatics*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameplayStatics(UObject* target, FString label, UGameplayStatics* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGameplayStatics*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHealthSnapshotBlueprintLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHealthSnapshotBlueprintLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHealthSnapshotBlueprintLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UHealthSnapshotBlueprintLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHealthSnapshotBlueprintLibrary(UObject* target, FString label, UHealthSnapshotBlueprintLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHealthSnapshotBlueprintLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UImportanceSamplingLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarImportanceSamplingLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UImportanceSamplingLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UImportanceSamplingLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarImportanceSamplingLibrary(UObject* target, FString label, UImportanceSamplingLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UImportanceSamplingLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetArrayLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetArrayLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetArrayLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetArrayLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetArrayLibrary(UObject* target, FString label, UKismetArrayLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetArrayLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetGuidLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetGuidLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetGuidLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetGuidLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetGuidLibrary(UObject* target, FString label, UKismetGuidLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetGuidLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetInputLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetInputLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetInputLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetInputLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetInputLibrary(UObject* target, FString label, UKismetInputLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetInputLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetInternationalizationLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetInternationalizationLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetInternationalizationLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetInternationalizationLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetInternationalizationLibrary(UObject* target, FString label, UKismetInternationalizationLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetInternationalizationLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetMaterialLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetMaterialLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetMaterialLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetMaterialLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetMaterialLibrary(UObject* target, FString label, UKismetMaterialLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetMaterialLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetMathLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetMathLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetMathLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetMathLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetMathLibrary(UObject* target, FString label, UKismetMathLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetMathLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetNodeHelperLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetNodeHelperLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetNodeHelperLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetNodeHelperLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetNodeHelperLibrary(UObject* target, FString label, UKismetNodeHelperLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetNodeHelperLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetRenderingLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetRenderingLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetRenderingLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetRenderingLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetRenderingLibrary(UObject* target, FString label, UKismetRenderingLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetRenderingLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetStringLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetStringLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetStringLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetStringLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetStringLibrary(UObject* target, FString label, UKismetStringLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetStringLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetStringTableLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetStringTableLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetStringTableLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetStringTableLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetStringTableLibrary(UObject* target, FString label, UKismetStringTableLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetStringTableLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetSystemLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetSystemLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetSystemLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetSystemLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetSystemLibrary(UObject* target, FString label, UKismetSystemLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetSystemLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UKismetTextLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarKismetTextLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UKismetTextLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UKismetTextLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarKismetTextLibrary(UObject* target, FString label, UKismetTextLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UKismetTextLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULightWeightInstanceBlueprintFunctionLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightWeightInstanceBlueprintFunctionLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULightWeightInstanceBlueprintFunctionLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<ULightWeightInstanceBlueprintFunctionLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightWeightInstanceBlueprintFunctionLibrary(UObject* target, FString label, ULightWeightInstanceBlueprintFunctionLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULightWeightInstanceBlueprintFunctionLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMeshVertexPainterKismetLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMeshVertexPainterKismetLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMeshVertexPainterKismetLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UMeshVertexPainterKismetLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMeshVertexPainterKismetLibrary(UObject* target, FString label, UMeshVertexPainterKismetLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMeshVertexPainterKismetLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNetPushModelHelpers* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNetPushModelHelpers(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNetPushModelHelpers** result = abstractBasedObject->GetInternal()->GetClassVar<UNetPushModelHelpers*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNetPushModelHelpers(UObject* target, FString label, UNetPushModelHelpers* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNetPushModelHelpers*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsFieldStatics* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsFieldStatics(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsFieldStatics** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsFieldStatics*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsFieldStatics(UObject* target, FString label, UPhysicsFieldStatics* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsFieldStatics*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPhysicsThreadLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPhysicsThreadLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPhysicsThreadLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UPhysicsThreadLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPhysicsThreadLibrary(UObject* target, FString label, UPhysicsThreadLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPhysicsThreadLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlatformInputDeviceMapperLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlatformInputDeviceMapperLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlatformInputDeviceMapperLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UPlatformInputDeviceMapperLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlatformInputDeviceMapperLibrary(UObject* target, FString label, UPlatformInputDeviceMapperLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlatformInputDeviceMapperLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

URawAnimSequenceTrackExtensions* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRawAnimSequenceTrackExtensions(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URawAnimSequenceTrackExtensions** result = abstractBasedObject->GetInternal()->GetClassVar<URawAnimSequenceTrackExtensions*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRawAnimSequenceTrackExtensions(UObject* target, FString label, URawAnimSequenceTrackExtensions* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URawAnimSequenceTrackExtensions*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStereoLayerFunctionLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStereoLayerFunctionLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStereoLayerFunctionLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UStereoLayerFunctionLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStereoLayerFunctionLibrary(UObject* target, FString label, UStereoLayerFunctionLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStereoLayerFunctionLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

USubsystemBlueprintLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSubsystemBlueprintLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USubsystemBlueprintLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<USubsystemBlueprintLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSubsystemBlueprintLibrary(UObject* target, FString label, USubsystemBlueprintLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USubsystemBlueprintLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVisualLoggerKismetLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVisualLoggerKismetLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVisualLoggerKismetLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UVisualLoggerKismetLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVisualLoggerKismetLibrary(UObject* target, FString label, UVisualLoggerKismetLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVisualLoggerKismetLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVOIPStatics* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVOIPStatics(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVOIPStatics** result = abstractBasedObject->GetInternal()->GetClassVar<UVOIPStatics*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVOIPStatics(UObject* target, FString label, UVOIPStatics* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVOIPStatics*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionBlueprintLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionBlueprintLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionBlueprintLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionBlueprintLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionBlueprintLibrary(UObject* target, FString label, UWorldPartitionBlueprintLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionBlueprintLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkeletalBodySetup* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkeletalBodySetup(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkeletalBodySetup** result = abstractBasedObject->GetInternal()->GetClassVar<USkeletalBodySetup*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkeletalBodySetup(UObject* target, FString label, USkeletalBodySetup* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkeletalBodySetup*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBookMark* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBookMark(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBookMark** result = abstractBasedObject->GetInternal()->GetClassVar<UBookMark*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBookMark(UObject* target, FString label, UBookMark* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBookMark*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBookMark2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBookMark2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBookMark2D** result = abstractBasedObject->GetInternal()->GetClassVar<UBookMark2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBookMark2D(UObject* target, FString label, UBookMark2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBookMark2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCameraModifier_CameraShake* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCameraModifier_CameraShake(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCameraModifier_CameraShake** result = abstractBasedObject->GetInternal()->GetClassVar<UCameraModifier_CameraShake*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCameraModifier_CameraShake(UObject* target, FString label, UCameraModifier_CameraShake* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCameraModifier_CameraShake*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorChannel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorChannel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorChannel** result = abstractBasedObject->GetInternal()->GetClassVar<UActorChannel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorChannel(UObject* target, FString label, UActorChannel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorChannel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UControlChannel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarControlChannel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UControlChannel** result = abstractBasedObject->GetInternal()->GetClassVar<UControlChannel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarControlChannel(UObject* target, FString label, UControlChannel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UControlChannel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataStreamChannel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataStreamChannel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataStreamChannel** result = abstractBasedObject->GetInternal()->GetClassVar<UDataStreamChannel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataStreamChannel(UObject* target, FString label, UDataStreamChannel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataStreamChannel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVoiceChannel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVoiceChannel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVoiceChannel** result = abstractBasedObject->GetInternal()->GetClassVar<UVoiceChannel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVoiceChannel(UObject* target, FString label, UVoiceChannel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVoiceChannel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPluginCommandlet* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPluginCommandlet(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPluginCommandlet** result = abstractBasedObject->GetInternal()->GetClassVar<UPluginCommandlet*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPluginCommandlet(UObject* target, FString label, UPluginCommandlet* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPluginCommandlet*>(TCHAR_TO_UTF8(*label), value);
    }
}

USmokeTestCommandlet* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSmokeTestCommandlet(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USmokeTestCommandlet** result = abstractBasedObject->GetInternal()->GetClassVar<USmokeTestCommandlet*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSmokeTestCommandlet(UObject* target, FString label, USmokeTestCommandlet* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USmokeTestCommandlet*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCurveFloat* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCurveFloat(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCurveFloat** result = abstractBasedObject->GetInternal()->GetClassVar<UCurveFloat*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCurveFloat(UObject* target, FString label, UCurveFloat* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCurveFloat*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCurveLinearColor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCurveLinearColor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCurveLinearColor** result = abstractBasedObject->GetInternal()->GetClassVar<UCurveLinearColor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCurveLinearColor(UObject* target, FString label, UCurveLinearColor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCurveLinearColor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCurveVector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCurveVector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCurveVector** result = abstractBasedObject->GetInternal()->GetClassVar<UCurveVector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCurveVector(UObject* target, FString label, UCurveVector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCurveVector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCompositeCurveTable* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCompositeCurveTable(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCompositeCurveTable** result = abstractBasedObject->GetInternal()->GetClassVar<UCompositeCurveTable*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCompositeCurveTable(UObject* target, FString label, UCompositeCurveTable* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCompositeCurveTable*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPreviewMeshCollection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPreviewMeshCollection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPreviewMeshCollection** result = abstractBasedObject->GetInternal()->GetClassVar<UPreviewMeshCollection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPreviewMeshCollection(UObject* target, FString label, UPreviewMeshCollection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPreviewMeshCollection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPrimaryDataAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPrimaryDataAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPrimaryDataAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UPrimaryDataAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPrimaryDataAsset(UObject* target, FString label, UPrimaryDataAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPrimaryDataAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkeletalMeshLODSettings* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkeletalMeshLODSettings(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkeletalMeshLODSettings** result = abstractBasedObject->GetInternal()->GetClassVar<USkeletalMeshLODSettings*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkeletalMeshLODSettings(UObject* target, FString label, USkeletalMeshLODSettings* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkeletalMeshLODSettings*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTireType* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTireType(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTireType** result = abstractBasedObject->GetInternal()->GetClassVar<UTireType*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTireType(UObject* target, FString label, UTireType* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTireType*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPrimaryAssetLabel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPrimaryAssetLabel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPrimaryAssetLabel** result = abstractBasedObject->GetInternal()->GetClassVar<UPrimaryAssetLabel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPrimaryAssetLabel(UObject* target, FString label, UPrimaryAssetLabel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPrimaryAssetLabel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataLayerInstanceWithAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataLayerInstanceWithAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataLayerInstanceWithAsset** result = abstractBasedObject->GetInternal()->GetClassVar<UDataLayerInstanceWithAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataLayerInstanceWithAsset(UObject* target, FString label, UDataLayerInstanceWithAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataLayerInstanceWithAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCompositeDataTable* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCompositeDataTable(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCompositeDataTable** result = abstractBasedObject->GetInternal()->GetClassVar<UCompositeDataTable*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCompositeDataTable(UObject* target, FString label, UCompositeDataTable* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCompositeDataTable*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMirrorDataTable* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMirrorDataTable(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMirrorDataTable** result = abstractBasedObject->GetInternal()->GetClassVar<UMirrorDataTable*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMirrorDataTable(UObject* target, FString label, UMirrorDataTable* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMirrorDataTable*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionFloat* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionFloat(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionFloat** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionFloat*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionFloat(UObject* target, FString label, UDistributionFloat* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionFloat*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionVector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionVector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionVector** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionVector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionVector(UObject* target, FString label, UDistributionVector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionVector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionFloatConstant* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionFloatConstant(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionFloatConstant** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionFloatConstant*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionFloatConstant(UObject* target, FString label, UDistributionFloatConstant* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionFloatConstant*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionFloatConstantCurve* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionFloatConstantCurve(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionFloatConstantCurve** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionFloatConstantCurve*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionFloatConstantCurve(UObject* target, FString label, UDistributionFloatConstantCurve* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionFloatConstantCurve*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionFloatUniform* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionFloatUniform(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionFloatUniform** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionFloatUniform*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionFloatUniform(UObject* target, FString label, UDistributionFloatUniform* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionFloatUniform*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionFloatUniformCurve* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionFloatUniformCurve(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionFloatUniformCurve** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionFloatUniformCurve*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionFloatUniformCurve(UObject* target, FString label, UDistributionFloatUniformCurve* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionFloatUniformCurve*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionFloatParameterBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionFloatParameterBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionFloatParameterBase** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionFloatParameterBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionFloatParameterBase(UObject* target, FString label, UDistributionFloatParameterBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionFloatParameterBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionFloatParticleParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionFloatParticleParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionFloatParticleParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionFloatParticleParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionFloatParticleParameter(UObject* target, FString label, UDistributionFloatParticleParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionFloatParticleParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionVectorConstant* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionVectorConstant(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionVectorConstant** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionVectorConstant*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionVectorConstant(UObject* target, FString label, UDistributionVectorConstant* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionVectorConstant*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionVectorConstantCurve* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionVectorConstantCurve(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionVectorConstantCurve** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionVectorConstantCurve*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionVectorConstantCurve(UObject* target, FString label, UDistributionVectorConstantCurve* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionVectorConstantCurve*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionVectorUniform* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionVectorUniform(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionVectorUniform** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionVectorUniform*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionVectorUniform(UObject* target, FString label, UDistributionVectorUniform* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionVectorUniform*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionVectorUniformCurve* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionVectorUniformCurve(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionVectorUniformCurve** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionVectorUniformCurve*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionVectorUniformCurve(UObject* target, FString label, UDistributionVectorUniformCurve* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionVectorUniformCurve*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionVectorParameterBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionVectorParameterBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionVectorParameterBase** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionVectorParameterBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionVectorParameterBase(UObject* target, FString label, UDistributionVectorParameterBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionVectorParameterBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDistributionVectorParticleParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDistributionVectorParticleParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDistributionVectorParticleParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UDistributionVectorParticleParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDistributionVectorParticleParameter(UObject* target, FString label, UDistributionVectorParticleParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDistributionVectorParticleParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UComponentDelegateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarComponentDelegateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UComponentDelegateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UComponentDelegateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarComponentDelegateBinding(UObject* target, FString label, UComponentDelegateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UComponentDelegateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputDelegateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputDelegateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputDelegateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UInputDelegateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputDelegateBinding(UObject* target, FString label, UInputDelegateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputDelegateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputActionDelegateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputActionDelegateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputActionDelegateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UInputActionDelegateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputActionDelegateBinding(UObject* target, FString label, UInputActionDelegateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputActionDelegateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputAxisDelegateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputAxisDelegateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputAxisDelegateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UInputAxisDelegateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputAxisDelegateBinding(UObject* target, FString label, UInputAxisDelegateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputAxisDelegateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputAxisKeyDelegateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputAxisKeyDelegateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputAxisKeyDelegateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UInputAxisKeyDelegateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputAxisKeyDelegateBinding(UObject* target, FString label, UInputAxisKeyDelegateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputAxisKeyDelegateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputKeyDelegateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputKeyDelegateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputKeyDelegateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UInputKeyDelegateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputKeyDelegateBinding(UObject* target, FString label, UInputKeyDelegateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputKeyDelegateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputTouchDelegateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputTouchDelegateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputTouchDelegateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UInputTouchDelegateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputTouchDelegateBinding(UObject* target, FString label, UInputTouchDelegateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputTouchDelegateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInputVectorAxisDelegateBinding* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInputVectorAxisDelegateBinding(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInputVectorAxisDelegateBinding** result = abstractBasedObject->GetInternal()->GetClassVar<UInputVectorAxisDelegateBinding*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInputVectorAxisDelegateBinding(UObject* target, FString label, UInputVectorAxisDelegateBinding* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInputVectorAxisDelegateBinding*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEdGraphNode_Documentation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEdGraphNode_Documentation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEdGraphNode_Documentation** result = abstractBasedObject->GetInternal()->GetClassVar<UEdGraphNode_Documentation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEdGraphNode_Documentation(UObject* target, FString label, UEdGraphNode_Documentation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEdGraphNode_Documentation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGameEngine* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameEngine(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGameEngine** result = abstractBasedObject->GetInternal()->GetClassVar<UGameEngine*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameEngine(UObject* target, FString label, UGameEngine* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGameEngine*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleSystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleSystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleSystem** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleSystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleSystem(UObject* target, FString label, UParticleSystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleSystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPlatformGameInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPlatformGameInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPlatformGameInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UPlatformGameInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPlatformGameInstance(UObject* target, FString label, UPlatformGameInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPlatformGameInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHapticFeedbackEffect_Buffer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHapticFeedbackEffect_Buffer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHapticFeedbackEffect_Buffer** result = abstractBasedObject->GetInternal()->GetClassVar<UHapticFeedbackEffect_Buffer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHapticFeedbackEffect_Buffer(UObject* target, FString label, UHapticFeedbackEffect_Buffer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHapticFeedbackEffect_Buffer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHapticFeedbackEffect_Curve* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHapticFeedbackEffect_Curve(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHapticFeedbackEffect_Curve** result = abstractBasedObject->GetInternal()->GetClassVar<UHapticFeedbackEffect_Curve*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHapticFeedbackEffect_Curve(UObject* target, FString label, UHapticFeedbackEffect_Curve* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHapticFeedbackEffect_Curve*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHapticFeedbackEffect_SoundWave* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHapticFeedbackEffect_SoundWave(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHapticFeedbackEffect_SoundWave** result = abstractBasedObject->GetInternal()->GetClassVar<UHapticFeedbackEffect_SoundWave*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHapticFeedbackEffect_SoundWave(UObject* target, FString label, UHapticFeedbackEffect_SoundWave* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHapticFeedbackEffect_SoundWave*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNullHLODBuilder* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNullHLODBuilder(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNullHLODBuilder** result = abstractBasedObject->GetInternal()->GetClassVar<UNullHLODBuilder*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNullHLODBuilder(UObject* target, FString label, UNullHLODBuilder* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNullHLODBuilder*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelStreamingAlwaysLoaded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelStreamingAlwaysLoaded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelStreamingAlwaysLoaded** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelStreamingAlwaysLoaded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelStreamingAlwaysLoaded(UObject* target, FString label, ULevelStreamingAlwaysLoaded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelStreamingAlwaysLoaded*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelStreamingDynamic* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelStreamingDynamic(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelStreamingDynamic** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelStreamingDynamic*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelStreamingDynamic(UObject* target, FString label, ULevelStreamingDynamic* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelStreamingDynamic*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelStreamingPersistent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelStreamingPersistent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelStreamingPersistent** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelStreamingPersistent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelStreamingPersistent(UObject* target, FString label, ULevelStreamingPersistent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelStreamingPersistent*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelStreamingLevelInstanceEditor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelStreamingLevelInstanceEditor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelStreamingLevelInstanceEditor** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelStreamingLevelInstanceEditor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelStreamingLevelInstanceEditor(UObject* target, FString label, ULevelStreamingLevelInstanceEditor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelStreamingLevelInstanceEditor*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelStreamingLevelInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelStreamingLevelInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelStreamingLevelInstance** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelStreamingLevelInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelStreamingLevelInstance(UObject* target, FString label, ULevelStreamingLevelInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelStreamingLevelInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionLevelStreamingDynamic* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionLevelStreamingDynamic(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionLevelStreamingDynamic** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionLevelStreamingDynamic*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionLevelStreamingDynamic(UObject* target, FString label, UWorldPartitionLevelStreamingDynamic* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionLevelStreamingDynamic*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEngineMessage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEngineMessage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEngineMessage** result = abstractBasedObject->GetInternal()->GetClassVar<UEngineMessage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEngineMessage(UObject* target, FString label, UEngineMessage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEngineMessage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionAbs* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionAbs(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionAbs** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionAbs*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionAbs(UObject* target, FString label, UMaterialExpressionAbs* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionAbs*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionActorPositionWS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionActorPositionWS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionActorPositionWS** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionActorPositionWS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionActorPositionWS(UObject* target, FString label, UMaterialExpressionActorPositionWS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionActorPositionWS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionAdd* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionAdd(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionAdd** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionAdd*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionAdd(UObject* target, FString label, UMaterialExpressionAdd* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionAdd*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionAppendVector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionAppendVector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionAppendVector** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionAppendVector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionAppendVector(UObject* target, FString label, UMaterialExpressionAppendVector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionAppendVector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionArccosine* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionArccosine(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionArccosine** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionArccosine*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionArccosine(UObject* target, FString label, UMaterialExpressionArccosine* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionArccosine*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionArccosineFast* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionArccosineFast(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionArccosineFast** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionArccosineFast*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionArccosineFast(UObject* target, FString label, UMaterialExpressionArccosineFast* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionArccosineFast*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionArcsine* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionArcsine(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionArcsine** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionArcsine*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionArcsine(UObject* target, FString label, UMaterialExpressionArcsine* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionArcsine*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionArcsineFast* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionArcsineFast(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionArcsineFast** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionArcsineFast*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionArcsineFast(UObject* target, FString label, UMaterialExpressionArcsineFast* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionArcsineFast*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionArctangent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionArctangent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionArctangent** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionArctangent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionArctangent(UObject* target, FString label, UMaterialExpressionArctangent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionArctangent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionArctangent2* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionArctangent2(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionArctangent2** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionArctangent2*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionArctangent2(UObject* target, FString label, UMaterialExpressionArctangent2* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionArctangent2*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionArctangent2Fast* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionArctangent2Fast(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionArctangent2Fast** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionArctangent2Fast*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionArctangent2Fast(UObject* target, FString label, UMaterialExpressionArctangent2Fast* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionArctangent2Fast*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionArctangentFast* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionArctangentFast(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionArctangentFast** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionArctangentFast*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionArctangentFast(UObject* target, FString label, UMaterialExpressionArctangentFast* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionArctangentFast*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionAtmosphericFogColor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionAtmosphericFogColor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionAtmosphericFogColor** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionAtmosphericFogColor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionAtmosphericFogColor(UObject* target, FString label, UMaterialExpressionAtmosphericFogColor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionAtmosphericFogColor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionAtmosphericLightColor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionAtmosphericLightColor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionAtmosphericLightColor** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionAtmosphericLightColor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionAtmosphericLightColor(UObject* target, FString label, UMaterialExpressionAtmosphericLightColor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionAtmosphericLightColor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionAtmosphericLightVector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionAtmosphericLightVector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionAtmosphericLightVector** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionAtmosphericLightVector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionAtmosphericLightVector(UObject* target, FString label, UMaterialExpressionAtmosphericLightVector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionAtmosphericLightVector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionBinaryOp* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionBinaryOp(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionBinaryOp** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionBinaryOp*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionBinaryOp(UObject* target, FString label, UMaterialExpressionBinaryOp* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionBinaryOp*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionBlackBody* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionBlackBody(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionBlackBody** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionBlackBody*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionBlackBody(UObject* target, FString label, UMaterialExpressionBlackBody* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionBlackBody*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionBlendMaterialAttributes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionBlendMaterialAttributes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionBlendMaterialAttributes** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionBlendMaterialAttributes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionBlendMaterialAttributes(UObject* target, FString label, UMaterialExpressionBlendMaterialAttributes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionBlendMaterialAttributes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionBreakMaterialAttributes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionBreakMaterialAttributes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionBreakMaterialAttributes** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionBreakMaterialAttributes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionBreakMaterialAttributes(UObject* target, FString label, UMaterialExpressionBreakMaterialAttributes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionBreakMaterialAttributes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionBumpOffset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionBumpOffset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionBumpOffset** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionBumpOffset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionBumpOffset(UObject* target, FString label, UMaterialExpressionBumpOffset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionBumpOffset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCameraPositionWS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCameraPositionWS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCameraPositionWS** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCameraPositionWS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCameraPositionWS(UObject* target, FString label, UMaterialExpressionCameraPositionWS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCameraPositionWS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCameraVectorWS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCameraVectorWS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCameraVectorWS** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCameraVectorWS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCameraVectorWS(UObject* target, FString label, UMaterialExpressionCameraVectorWS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCameraVectorWS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCeil* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCeil(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCeil** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCeil*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCeil(UObject* target, FString label, UMaterialExpressionCeil* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCeil*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionClamp* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionClamp(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionClamp** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionClamp*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionClamp(UObject* target, FString label, UMaterialExpressionClamp* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionClamp*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCloudSampleAttribute* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCloudSampleAttribute(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCloudSampleAttribute** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCloudSampleAttribute*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCloudSampleAttribute(UObject* target, FString label, UMaterialExpressionCloudSampleAttribute* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCloudSampleAttribute*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCollectionParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCollectionParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCollectionParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCollectionParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCollectionParameter(UObject* target, FString label, UMaterialExpressionCollectionParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCollectionParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionComment* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionComment(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionComment** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionComment*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionComment(UObject* target, FString label, UMaterialExpressionComment* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionComment*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionComponentMask* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionComponentMask(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionComponentMask** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionComponentMask*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionComponentMask(UObject* target, FString label, UMaterialExpressionComponentMask* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionComponentMask*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionComposite* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionComposite(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionComposite** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionComposite*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionComposite(UObject* target, FString label, UMaterialExpressionComposite* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionComposite*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionConstant* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionConstant(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionConstant** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionConstant*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionConstant(UObject* target, FString label, UMaterialExpressionConstant* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionConstant*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionConstant2Vector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionConstant2Vector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionConstant2Vector** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionConstant2Vector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionConstant2Vector(UObject* target, FString label, UMaterialExpressionConstant2Vector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionConstant2Vector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionConstant3Vector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionConstant3Vector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionConstant3Vector** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionConstant3Vector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionConstant3Vector(UObject* target, FString label, UMaterialExpressionConstant3Vector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionConstant3Vector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionConstant4Vector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionConstant4Vector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionConstant4Vector** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionConstant4Vector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionConstant4Vector(UObject* target, FString label, UMaterialExpressionConstant4Vector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionConstant4Vector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionConstantBiasScale* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionConstantBiasScale(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionConstantBiasScale** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionConstantBiasScale*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionConstantBiasScale(UObject* target, FString label, UMaterialExpressionConstantBiasScale* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionConstantBiasScale*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCosine* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCosine(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCosine** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCosine*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCosine(UObject* target, FString label, UMaterialExpressionCosine* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCosine*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCrossProduct* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCrossProduct(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCrossProduct** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCrossProduct*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCrossProduct(UObject* target, FString label, UMaterialExpressionCrossProduct* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCrossProduct*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCustom* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCustom(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCustom** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCustom*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCustom(UObject* target, FString label, UMaterialExpressionCustom* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCustom*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCustomOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCustomOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCustomOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCustomOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCustomOutput(UObject* target, FString label, UMaterialExpressionCustomOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCustomOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDBufferTexture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDBufferTexture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDBufferTexture** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDBufferTexture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDBufferTexture(UObject* target, FString label, UMaterialExpressionDBufferTexture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDBufferTexture*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDDX* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDDX(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDDX** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDDX*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDDX(UObject* target, FString label, UMaterialExpressionDDX* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDDX*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDDY* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDDY(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDDY** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDDY*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDDY(UObject* target, FString label, UMaterialExpressionDDY* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDDY*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDecalDerivative* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDecalDerivative(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDecalDerivative** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDecalDerivative*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDecalDerivative(UObject* target, FString label, UMaterialExpressionDecalDerivative* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDecalDerivative*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDecalLifetimeOpacity* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDecalLifetimeOpacity(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDecalLifetimeOpacity** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDecalLifetimeOpacity*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDecalLifetimeOpacity(UObject* target, FString label, UMaterialExpressionDecalLifetimeOpacity* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDecalLifetimeOpacity*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDecalMipmapLevel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDecalMipmapLevel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDecalMipmapLevel** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDecalMipmapLevel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDecalMipmapLevel(UObject* target, FString label, UMaterialExpressionDecalMipmapLevel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDecalMipmapLevel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDeltaTime* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDeltaTime(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDeltaTime** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDeltaTime*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDeltaTime(UObject* target, FString label, UMaterialExpressionDeltaTime* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDeltaTime*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDepthFade* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDepthFade(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDepthFade** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDepthFade*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDepthFade(UObject* target, FString label, UMaterialExpressionDepthFade* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDepthFade*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDepthOfFieldFunction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDepthOfFieldFunction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDepthOfFieldFunction** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDepthOfFieldFunction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDepthOfFieldFunction(UObject* target, FString label, UMaterialExpressionDepthOfFieldFunction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDepthOfFieldFunction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDeriveNormalZ* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDeriveNormalZ(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDeriveNormalZ** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDeriveNormalZ*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDeriveNormalZ(UObject* target, FString label, UMaterialExpressionDeriveNormalZ* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDeriveNormalZ*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDesaturation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDesaturation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDesaturation** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDesaturation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDesaturation(UObject* target, FString label, UMaterialExpressionDesaturation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDesaturation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDistance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDistance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDistance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDistance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDistance(UObject* target, FString label, UMaterialExpressionDistance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDistance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDistanceCullFade* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDistanceCullFade(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDistanceCullFade** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDistanceCullFade*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDistanceCullFade(UObject* target, FString label, UMaterialExpressionDistanceCullFade* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDistanceCullFade*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDistanceFieldGradient* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDistanceFieldGradient(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDistanceFieldGradient** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDistanceFieldGradient*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDistanceFieldGradient(UObject* target, FString label, UMaterialExpressionDistanceFieldGradient* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDistanceFieldGradient*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDistanceFieldsRenderingSwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDistanceFieldsRenderingSwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDistanceFieldsRenderingSwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDistanceFieldsRenderingSwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDistanceFieldsRenderingSwitch(UObject* target, FString label, UMaterialExpressionDistanceFieldsRenderingSwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDistanceFieldsRenderingSwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDistanceToNearestSurface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDistanceToNearestSurface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDistanceToNearestSurface** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDistanceToNearestSurface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDistanceToNearestSurface(UObject* target, FString label, UMaterialExpressionDistanceToNearestSurface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDistanceToNearestSurface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDivide* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDivide(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDivide** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDivide*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDivide(UObject* target, FString label, UMaterialExpressionDivide* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDivide*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDotProduct* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDotProduct(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDotProduct** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDotProduct*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDotProduct(UObject* target, FString label, UMaterialExpressionDotProduct* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDotProduct*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDynamicParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDynamicParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDynamicParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDynamicParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDynamicParameter(UObject* target, FString label, UMaterialExpressionDynamicParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDynamicParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionExecBegin* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionExecBegin(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionExecBegin** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionExecBegin*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionExecBegin(UObject* target, FString label, UMaterialExpressionExecBegin* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionExecBegin*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionExecEnd* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionExecEnd(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionExecEnd** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionExecEnd*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionExecEnd(UObject* target, FString label, UMaterialExpressionExecEnd* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionExecEnd*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionEyeAdaptation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionEyeAdaptation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionEyeAdaptation** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionEyeAdaptation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionEyeAdaptation(UObject* target, FString label, UMaterialExpressionEyeAdaptation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionEyeAdaptation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionEyeAdaptationInverse* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionEyeAdaptationInverse(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionEyeAdaptationInverse** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionEyeAdaptationInverse*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionEyeAdaptationInverse(UObject* target, FString label, UMaterialExpressionEyeAdaptationInverse* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionEyeAdaptationInverse*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionFeatureLevelSwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionFeatureLevelSwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionFeatureLevelSwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionFeatureLevelSwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionFeatureLevelSwitch(UObject* target, FString label, UMaterialExpressionFeatureLevelSwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionFeatureLevelSwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionFloor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionFloor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionFloor** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionFloor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionFloor(UObject* target, FString label, UMaterialExpressionFloor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionFloor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionFmod* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionFmod(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionFmod** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionFmod*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionFmod(UObject* target, FString label, UMaterialExpressionFmod* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionFmod*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionFontSample* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionFontSample(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionFontSample** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionFontSample*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionFontSample(UObject* target, FString label, UMaterialExpressionFontSample* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionFontSample*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionForLoop* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionForLoop(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionForLoop** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionForLoop*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionForLoop(UObject* target, FString label, UMaterialExpressionForLoop* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionForLoop*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionFrac* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionFrac(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionFrac** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionFrac*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionFrac(UObject* target, FString label, UMaterialExpressionFrac* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionFrac*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionFresnel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionFresnel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionFresnel** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionFresnel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionFresnel(UObject* target, FString label, UMaterialExpressionFresnel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionFresnel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionFunctionInput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionFunctionInput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionFunctionInput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionFunctionInput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionFunctionInput(UObject* target, FString label, UMaterialExpressionFunctionInput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionFunctionInput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionFunctionOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionFunctionOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionFunctionOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionFunctionOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionFunctionOutput(UObject* target, FString label, UMaterialExpressionFunctionOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionFunctionOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionGenericConstant* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionGenericConstant(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionGenericConstant** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionGenericConstant*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionGenericConstant(UObject* target, FString label, UMaterialExpressionGenericConstant* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionGenericConstant*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionGetLocal* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionGetLocal(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionGetLocal** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionGetLocal*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionGetLocal(UObject* target, FString label, UMaterialExpressionGetLocal* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionGetLocal*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionGetMaterialAttributes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionGetMaterialAttributes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionGetMaterialAttributes** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionGetMaterialAttributes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionGetMaterialAttributes(UObject* target, FString label, UMaterialExpressionGetMaterialAttributes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionGetMaterialAttributes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionGIReplace* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionGIReplace(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionGIReplace** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionGIReplace*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionGIReplace(UObject* target, FString label, UMaterialExpressionGIReplace* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionGIReplace*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionHairAttributes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionHairAttributes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionHairAttributes** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionHairAttributes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionHairAttributes(UObject* target, FString label, UMaterialExpressionHairAttributes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionHairAttributes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionHairColor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionHairColor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionHairColor** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionHairColor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionHairColor(UObject* target, FString label, UMaterialExpressionHairColor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionHairColor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionIf* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionIf(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionIf** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionIf*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionIf(UObject* target, FString label, UMaterialExpressionIf* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionIf*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionIfThenElse* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionIfThenElse(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionIfThenElse** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionIfThenElse*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionIfThenElse(UObject* target, FString label, UMaterialExpressionIfThenElse* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionIfThenElse*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionInverseLinearInterpolate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionInverseLinearInterpolate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionInverseLinearInterpolate** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionInverseLinearInterpolate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionInverseLinearInterpolate(UObject* target, FString label, UMaterialExpressionInverseLinearInterpolate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionInverseLinearInterpolate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionLightmapUVs* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionLightmapUVs(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionLightmapUVs** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionLightmapUVs*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionLightmapUVs(UObject* target, FString label, UMaterialExpressionLightmapUVs* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionLightmapUVs*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionLightmassReplace* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionLightmassReplace(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionLightmassReplace** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionLightmassReplace*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionLightmassReplace(UObject* target, FString label, UMaterialExpressionLightmassReplace* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionLightmassReplace*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionLightVector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionLightVector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionLightVector** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionLightVector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionLightVector(UObject* target, FString label, UMaterialExpressionLightVector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionLightVector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionLinearInterpolate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionLinearInterpolate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionLinearInterpolate** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionLinearInterpolate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionLinearInterpolate(UObject* target, FString label, UMaterialExpressionLinearInterpolate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionLinearInterpolate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionLogarithm10* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionLogarithm10(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionLogarithm10** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionLogarithm10*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionLogarithm10(UObject* target, FString label, UMaterialExpressionLogarithm10* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionLogarithm10*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionLogarithm2* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionLogarithm2(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionLogarithm2** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionLogarithm2*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionLogarithm2(UObject* target, FString label, UMaterialExpressionLogarithm2* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionLogarithm2*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionMakeMaterialAttributes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionMakeMaterialAttributes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionMakeMaterialAttributes** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionMakeMaterialAttributes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionMakeMaterialAttributes(UObject* target, FString label, UMaterialExpressionMakeMaterialAttributes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionMakeMaterialAttributes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionMapARPassthroughCameraUV* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionMapARPassthroughCameraUV(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionMapARPassthroughCameraUV** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionMapARPassthroughCameraUV*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionMapARPassthroughCameraUV(UObject* target, FString label, UMaterialExpressionMapARPassthroughCameraUV* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionMapARPassthroughCameraUV*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionMaterialAttributeLayers* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionMaterialAttributeLayers(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionMaterialAttributeLayers** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionMaterialAttributeLayers*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionMaterialAttributeLayers(UObject* target, FString label, UMaterialExpressionMaterialAttributeLayers* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionMaterialAttributeLayers*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionMaterialFunctionCall* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionMaterialFunctionCall(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionMaterialFunctionCall** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionMaterialFunctionCall*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionMaterialFunctionCall(UObject* target, FString label, UMaterialExpressionMaterialFunctionCall* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionMaterialFunctionCall*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionMaterialProxyReplace* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionMaterialProxyReplace(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionMaterialProxyReplace** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionMaterialProxyReplace*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionMaterialProxyReplace(UObject* target, FString label, UMaterialExpressionMaterialProxyReplace* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionMaterialProxyReplace*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionMax* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionMax(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionMax** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionMax*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionMax(UObject* target, FString label, UMaterialExpressionMax* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionMax*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionMin* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionMin(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionMin** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionMin*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionMin(UObject* target, FString label, UMaterialExpressionMin* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionMin*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionMultiply* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionMultiply(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionMultiply** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionMultiply*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionMultiply(UObject* target, FString label, UMaterialExpressionMultiply* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionMultiply*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionNoise* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionNoise(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionNoise** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionNoise*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionNoise(UObject* target, FString label, UMaterialExpressionNoise* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionNoise*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionNormalize* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionNormalize(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionNormalize** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionNormalize*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionNormalize(UObject* target, FString label, UMaterialExpressionNormalize* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionNormalize*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionObjectBounds* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionObjectBounds(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionObjectBounds** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionObjectBounds*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionObjectBounds(UObject* target, FString label, UMaterialExpressionObjectBounds* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionObjectBounds*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionObjectOrientation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionObjectOrientation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionObjectOrientation** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionObjectOrientation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionObjectOrientation(UObject* target, FString label, UMaterialExpressionObjectOrientation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionObjectOrientation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionObjectPositionWS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionObjectPositionWS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionObjectPositionWS** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionObjectPositionWS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionObjectPositionWS(UObject* target, FString label, UMaterialExpressionObjectPositionWS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionObjectPositionWS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionObjectRadius* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionObjectRadius(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionObjectRadius** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionObjectRadius*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionObjectRadius(UObject* target, FString label, UMaterialExpressionObjectRadius* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionObjectRadius*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionOneMinus* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionOneMinus(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionOneMinus** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionOneMinus*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionOneMinus(UObject* target, FString label, UMaterialExpressionOneMinus* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionOneMinus*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPanner* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPanner(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPanner** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPanner*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPanner(UObject* target, FString label, UMaterialExpressionPanner* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPanner*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParameter(UObject* target, FString label, UMaterialExpressionParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleColor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleColor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleColor** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleColor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleColor(UObject* target, FString label, UMaterialExpressionParticleColor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleColor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleDirection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleDirection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleDirection** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleDirection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleDirection(UObject* target, FString label, UMaterialExpressionParticleDirection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleDirection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleMacroUV* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleMacroUV(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleMacroUV** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleMacroUV*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleMacroUV(UObject* target, FString label, UMaterialExpressionParticleMacroUV* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleMacroUV*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleMotionBlurFade* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleMotionBlurFade(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleMotionBlurFade** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleMotionBlurFade*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleMotionBlurFade(UObject* target, FString label, UMaterialExpressionParticleMotionBlurFade* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleMotionBlurFade*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticlePositionWS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticlePositionWS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticlePositionWS** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticlePositionWS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticlePositionWS(UObject* target, FString label, UMaterialExpressionParticlePositionWS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticlePositionWS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleRadius* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleRadius(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleRadius** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleRadius*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleRadius(UObject* target, FString label, UMaterialExpressionParticleRadius* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleRadius*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleRandom* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleRandom(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleRandom** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleRandom*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleRandom(UObject* target, FString label, UMaterialExpressionParticleRandom* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleRandom*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleRelativeTime* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleRelativeTime(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleRelativeTime** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleRelativeTime*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleRelativeTime(UObject* target, FString label, UMaterialExpressionParticleRelativeTime* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleRelativeTime*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleSize* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleSize(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleSize** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleSize*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleSize(UObject* target, FString label, UMaterialExpressionParticleSize* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleSize*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleSpeed* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleSpeed(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleSpeed** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleSpeed*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleSpeed(UObject* target, FString label, UMaterialExpressionParticleSpeed* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleSpeed*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleSubUVProperties* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleSubUVProperties(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleSubUVProperties** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleSubUVProperties*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleSubUVProperties(UObject* target, FString label, UMaterialExpressionParticleSubUVProperties* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleSubUVProperties*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPathTracingQualitySwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPathTracingQualitySwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPathTracingQualitySwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPathTracingQualitySwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPathTracingQualitySwitch(UObject* target, FString label, UMaterialExpressionPathTracingQualitySwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPathTracingQualitySwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPerInstanceCustomData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPerInstanceCustomData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPerInstanceCustomData** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPerInstanceCustomData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPerInstanceCustomData(UObject* target, FString label, UMaterialExpressionPerInstanceCustomData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPerInstanceCustomData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPerInstanceCustomData3Vector* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPerInstanceCustomData3Vector(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPerInstanceCustomData3Vector** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPerInstanceCustomData3Vector*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPerInstanceCustomData3Vector(UObject* target, FString label, UMaterialExpressionPerInstanceCustomData3Vector* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPerInstanceCustomData3Vector*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPerInstanceFadeAmount* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPerInstanceFadeAmount(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPerInstanceFadeAmount** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPerInstanceFadeAmount*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPerInstanceFadeAmount(UObject* target, FString label, UMaterialExpressionPerInstanceFadeAmount* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPerInstanceFadeAmount*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPerInstanceRandom* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPerInstanceRandom(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPerInstanceRandom** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPerInstanceRandom*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPerInstanceRandom(UObject* target, FString label, UMaterialExpressionPerInstanceRandom* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPerInstanceRandom*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPinBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPinBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPinBase** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPinBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPinBase(UObject* target, FString label, UMaterialExpressionPinBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPinBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPixelDepth* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPixelDepth(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPixelDepth** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPixelDepth*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPixelDepth(UObject* target, FString label, UMaterialExpressionPixelDepth* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPixelDepth*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPixelNormalWS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPixelNormalWS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPixelNormalWS** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPixelNormalWS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPixelNormalWS(UObject* target, FString label, UMaterialExpressionPixelNormalWS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPixelNormalWS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPower* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPower(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPower** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPower*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPower(UObject* target, FString label, UMaterialExpressionPower* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPower*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPrecomputedAOMask* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPrecomputedAOMask(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPrecomputedAOMask** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPrecomputedAOMask*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPrecomputedAOMask(UObject* target, FString label, UMaterialExpressionPrecomputedAOMask* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPrecomputedAOMask*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPreSkinnedLocalBounds* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPreSkinnedLocalBounds(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPreSkinnedLocalBounds** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPreSkinnedLocalBounds*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPreSkinnedLocalBounds(UObject* target, FString label, UMaterialExpressionPreSkinnedLocalBounds* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPreSkinnedLocalBounds*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPreSkinnedNormal* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPreSkinnedNormal(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPreSkinnedNormal** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPreSkinnedNormal*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPreSkinnedNormal(UObject* target, FString label, UMaterialExpressionPreSkinnedNormal* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPreSkinnedNormal*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPreSkinnedPosition* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPreSkinnedPosition(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPreSkinnedPosition** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPreSkinnedPosition*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPreSkinnedPosition(UObject* target, FString label, UMaterialExpressionPreSkinnedPosition* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPreSkinnedPosition*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionPreviousFrameSwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionPreviousFrameSwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionPreviousFrameSwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionPreviousFrameSwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionPreviousFrameSwitch(UObject* target, FString label, UMaterialExpressionPreviousFrameSwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionPreviousFrameSwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionQualitySwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionQualitySwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionQualitySwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionQualitySwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionQualitySwitch(UObject* target, FString label, UMaterialExpressionQualitySwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionQualitySwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionRayTracingQualitySwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionRayTracingQualitySwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionRayTracingQualitySwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionRayTracingQualitySwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionRayTracingQualitySwitch(UObject* target, FString label, UMaterialExpressionRayTracingQualitySwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionRayTracingQualitySwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionReflectionCapturePassSwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionReflectionCapturePassSwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionReflectionCapturePassSwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionReflectionCapturePassSwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionReflectionCapturePassSwitch(UObject* target, FString label, UMaterialExpressionReflectionCapturePassSwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionReflectionCapturePassSwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionReflectionVectorWS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionReflectionVectorWS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionReflectionVectorWS** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionReflectionVectorWS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionReflectionVectorWS(UObject* target, FString label, UMaterialExpressionReflectionVectorWS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionReflectionVectorWS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionRerouteBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionRerouteBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionRerouteBase** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionRerouteBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionRerouteBase(UObject* target, FString label, UMaterialExpressionRerouteBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionRerouteBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionRotateAboutAxis* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionRotateAboutAxis(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionRotateAboutAxis** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionRotateAboutAxis*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionRotateAboutAxis(UObject* target, FString label, UMaterialExpressionRotateAboutAxis* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionRotateAboutAxis*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionRotator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionRotator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionRotator** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionRotator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionRotator(UObject* target, FString label, UMaterialExpressionRotator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionRotator*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionRound* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionRound(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionRound** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionRound*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionRound(UObject* target, FString label, UMaterialExpressionRound* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionRound*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionRuntimeVirtualTextureReplace* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionRuntimeVirtualTextureReplace(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionRuntimeVirtualTextureReplace** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionRuntimeVirtualTextureReplace*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionRuntimeVirtualTextureReplace(UObject* target, FString label, UMaterialExpressionRuntimeVirtualTextureReplace* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionRuntimeVirtualTextureReplace*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionRuntimeVirtualTextureSample* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionRuntimeVirtualTextureSample(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionRuntimeVirtualTextureSample** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionRuntimeVirtualTextureSample*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionRuntimeVirtualTextureSample(UObject* target, FString label, UMaterialExpressionRuntimeVirtualTextureSample* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionRuntimeVirtualTextureSample*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSamplePhysicsIntegerField* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSamplePhysicsIntegerField(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSamplePhysicsIntegerField** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSamplePhysicsIntegerField*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSamplePhysicsIntegerField(UObject* target, FString label, UMaterialExpressionSamplePhysicsIntegerField* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSamplePhysicsIntegerField*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSamplePhysicsScalarField* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSamplePhysicsScalarField(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSamplePhysicsScalarField** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSamplePhysicsScalarField*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSamplePhysicsScalarField(UObject* target, FString label, UMaterialExpressionSamplePhysicsScalarField* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSamplePhysicsScalarField*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSamplePhysicsVectorField* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSamplePhysicsVectorField(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSamplePhysicsVectorField** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSamplePhysicsVectorField*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSamplePhysicsVectorField(UObject* target, FString label, UMaterialExpressionSamplePhysicsVectorField* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSamplePhysicsVectorField*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSaturate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSaturate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSaturate** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSaturate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSaturate(UObject* target, FString label, UMaterialExpressionSaturate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSaturate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSceneColor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSceneColor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSceneColor** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSceneColor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSceneColor(UObject* target, FString label, UMaterialExpressionSceneColor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSceneColor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSceneDepth* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSceneDepth(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSceneDepth** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSceneDepth*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSceneDepth(UObject* target, FString label, UMaterialExpressionSceneDepth* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSceneDepth*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSceneDepthWithoutWater* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSceneDepthWithoutWater(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSceneDepthWithoutWater** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSceneDepthWithoutWater*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSceneDepthWithoutWater(UObject* target, FString label, UMaterialExpressionSceneDepthWithoutWater* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSceneDepthWithoutWater*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSceneTexelSize* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSceneTexelSize(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSceneTexelSize** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSceneTexelSize*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSceneTexelSize(UObject* target, FString label, UMaterialExpressionSceneTexelSize* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSceneTexelSize*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSceneTexture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSceneTexture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSceneTexture** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSceneTexture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSceneTexture(UObject* target, FString label, UMaterialExpressionSceneTexture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSceneTexture*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionScreenPosition* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionScreenPosition(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionScreenPosition** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionScreenPosition*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionScreenPosition(UObject* target, FString label, UMaterialExpressionScreenPosition* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionScreenPosition*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSetLocal* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSetLocal(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSetLocal** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSetLocal*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSetLocal(UObject* target, FString label, UMaterialExpressionSetLocal* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSetLocal*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSetMaterialAttributes* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSetMaterialAttributes(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSetMaterialAttributes** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSetMaterialAttributes*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSetMaterialAttributes(UObject* target, FString label, UMaterialExpressionSetMaterialAttributes* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSetMaterialAttributes*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionShaderStageSwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionShaderStageSwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionShaderStageSwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionShaderStageSwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionShaderStageSwitch(UObject* target, FString label, UMaterialExpressionShaderStageSwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionShaderStageSwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionShadingModel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionShadingModel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionShadingModel** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionShadingModel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionShadingModel(UObject* target, FString label, UMaterialExpressionShadingModel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionShadingModel*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionShadingPathSwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionShadingPathSwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionShadingPathSwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionShadingPathSwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionShadingPathSwitch(UObject* target, FString label, UMaterialExpressionShadingPathSwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionShadingPathSwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionShadowReplace* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionShadowReplace(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionShadowReplace** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionShadowReplace*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionShadowReplace(UObject* target, FString label, UMaterialExpressionShadowReplace* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionShadowReplace*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSign* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSign(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSign** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSign*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSign(UObject* target, FString label, UMaterialExpressionSign* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSign*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSine* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSine(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSine** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSine*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSine(UObject* target, FString label, UMaterialExpressionSine* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSine*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSkyAtmosphereAerialPerspective* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSkyAtmosphereAerialPerspective(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSkyAtmosphereAerialPerspective** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSkyAtmosphereAerialPerspective*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSkyAtmosphereAerialPerspective(UObject* target, FString label, UMaterialExpressionSkyAtmosphereAerialPerspective* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSkyAtmosphereAerialPerspective*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance(UObject* target, FString label, UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSkyAtmosphereLightDirection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSkyAtmosphereLightDirection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSkyAtmosphereLightDirection** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSkyAtmosphereLightDirection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSkyAtmosphereLightDirection(UObject* target, FString label, UMaterialExpressionSkyAtmosphereLightDirection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSkyAtmosphereLightDirection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSkyAtmosphereLightDiskLuminance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSkyAtmosphereLightDiskLuminance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSkyAtmosphereLightDiskLuminance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSkyAtmosphereLightDiskLuminance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSkyAtmosphereLightDiskLuminance(UObject* target, FString label, UMaterialExpressionSkyAtmosphereLightDiskLuminance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSkyAtmosphereLightDiskLuminance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSkyAtmosphereLightIlluminance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSkyAtmosphereLightIlluminance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSkyAtmosphereLightIlluminance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSkyAtmosphereLightIlluminance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSkyAtmosphereLightIlluminance(UObject* target, FString label, UMaterialExpressionSkyAtmosphereLightIlluminance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSkyAtmosphereLightIlluminance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSkyAtmosphereViewLuminance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSkyAtmosphereViewLuminance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSkyAtmosphereViewLuminance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSkyAtmosphereViewLuminance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSkyAtmosphereViewLuminance(UObject* target, FString label, UMaterialExpressionSkyAtmosphereViewLuminance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSkyAtmosphereViewLuminance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSkyLightEnvMapSample* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSkyLightEnvMapSample(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSkyLightEnvMapSample** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSkyLightEnvMapSample*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSkyLightEnvMapSample(UObject* target, FString label, UMaterialExpressionSkyLightEnvMapSample* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSkyLightEnvMapSample*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSmoothStep* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSmoothStep(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSmoothStep** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSmoothStep*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSmoothStep(UObject* target, FString label, UMaterialExpressionSmoothStep* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSmoothStep*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSobol* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSobol(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSobol** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSobol*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSobol(UObject* target, FString label, UMaterialExpressionSobol* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSobol*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSpeedTree* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSpeedTree(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSpeedTree** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSpeedTree*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSpeedTree(UObject* target, FString label, UMaterialExpressionSpeedTree* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSpeedTree*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSphereMask* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSphereMask(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSphereMask** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSphereMask*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSphereMask(UObject* target, FString label, UMaterialExpressionSphereMask* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSphereMask*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSphericalParticleOpacity* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSphericalParticleOpacity(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSphericalParticleOpacity** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSphericalParticleOpacity*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSphericalParticleOpacity(UObject* target, FString label, UMaterialExpressionSphericalParticleOpacity* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSphericalParticleOpacity*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSquareRoot* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSquareRoot(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSquareRoot** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSquareRoot*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSquareRoot(UObject* target, FString label, UMaterialExpressionSquareRoot* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSquareRoot*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStaticBool* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStaticBool(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStaticBool** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStaticBool*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStaticBool(UObject* target, FString label, UMaterialExpressionStaticBool* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStaticBool*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStaticSwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStaticSwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStaticSwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStaticSwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStaticSwitch(UObject* target, FString label, UMaterialExpressionStaticSwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStaticSwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStep* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStep(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStep** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStep*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStep(UObject* target, FString label, UMaterialExpressionStep* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStep*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataBSDF* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataBSDF(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataBSDF** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataBSDF*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataBSDF(UObject* target, FString label, UMaterialExpressionStrataBSDF* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataBSDF*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataUtilityBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataUtilityBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataUtilityBase** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataUtilityBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataUtilityBase(UObject* target, FString label, UMaterialExpressionStrataUtilityBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataUtilityBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSubtract* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSubtract(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSubtract** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSubtract*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSubtract(UObject* target, FString label, UMaterialExpressionSubtract* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSubtract*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTangent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTangent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTangent** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTangent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTangent(UObject* target, FString label, UMaterialExpressionTangent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTangent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTemporalSobol* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTemporalSobol(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTemporalSobol** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTemporalSobol*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTemporalSobol(UObject* target, FString label, UMaterialExpressionTemporalSobol* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTemporalSobol*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureBase** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureBase(UObject* target, FString label, UMaterialExpressionTextureBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureCoordinate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureCoordinate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureCoordinate** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureCoordinate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureCoordinate(UObject* target, FString label, UMaterialExpressionTextureCoordinate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureCoordinate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureProperty* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureProperty(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureProperty** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureProperty*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureProperty(UObject* target, FString label, UMaterialExpressionTextureProperty* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureProperty*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTime* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTime(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTime** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTime*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTime(UObject* target, FString label, UMaterialExpressionTime* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTime*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTransform* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTransform(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTransform** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTransform*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTransform(UObject* target, FString label, UMaterialExpressionTransform* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTransform*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTransformPosition* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTransformPosition(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTransformPosition** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTransformPosition*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTransformPosition(UObject* target, FString label, UMaterialExpressionTransformPosition* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTransformPosition*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTruncate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTruncate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTruncate** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTruncate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTruncate(UObject* target, FString label, UMaterialExpressionTruncate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTruncate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTwoSidedSign* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTwoSidedSign(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTwoSidedSign** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTwoSidedSign*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTwoSidedSign(UObject* target, FString label, UMaterialExpressionTwoSidedSign* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTwoSidedSign*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVectorNoise* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVectorNoise(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVectorNoise** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVectorNoise*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVectorNoise(UObject* target, FString label, UMaterialExpressionVectorNoise* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVectorNoise*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVertexColor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVertexColor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVertexColor** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVertexColor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVertexColor(UObject* target, FString label, UMaterialExpressionVertexColor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVertexColor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVertexNormalWS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVertexNormalWS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVertexNormalWS** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVertexNormalWS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVertexNormalWS(UObject* target, FString label, UMaterialExpressionVertexNormalWS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVertexNormalWS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVertexTangentWS* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVertexTangentWS(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVertexTangentWS** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVertexTangentWS*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVertexTangentWS(UObject* target, FString label, UMaterialExpressionVertexTangentWS* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVertexTangentWS*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionViewProperty* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionViewProperty(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionViewProperty** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionViewProperty*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionViewProperty(UObject* target, FString label, UMaterialExpressionViewProperty* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionViewProperty*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionViewSize* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionViewSize(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionViewSize** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionViewSize*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionViewSize(UObject* target, FString label, UMaterialExpressionViewSize* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionViewSize*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVirtualTextureFeatureSwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVirtualTextureFeatureSwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVirtualTextureFeatureSwitch** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVirtualTextureFeatureSwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVirtualTextureFeatureSwitch(UObject* target, FString label, UMaterialExpressionVirtualTextureFeatureSwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVirtualTextureFeatureSwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVolumetricAdvancedMaterialInput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVolumetricAdvancedMaterialInput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVolumetricAdvancedMaterialInput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVolumetricAdvancedMaterialInput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVolumetricAdvancedMaterialInput(UObject* target, FString label, UMaterialExpressionVolumetricAdvancedMaterialInput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVolumetricAdvancedMaterialInput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionWhileLoop* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionWhileLoop(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionWhileLoop** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionWhileLoop*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionWhileLoop(UObject* target, FString label, UMaterialExpressionWhileLoop* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionWhileLoop*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionWorldPosition* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionWorldPosition(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionWorldPosition** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionWorldPosition*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionWorldPosition(UObject* target, FString label, UMaterialExpressionWorldPosition* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionWorldPosition*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionLess* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionLess(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionLess** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionLess*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionLess(UObject* target, FString label, UMaterialExpressionLess* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionLess*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionAbsorptionMediumMaterialOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionAbsorptionMediumMaterialOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionAbsorptionMediumMaterialOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionAbsorptionMediumMaterialOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionAbsorptionMediumMaterialOutput(UObject* target, FString label, UMaterialExpressionAbsorptionMediumMaterialOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionAbsorptionMediumMaterialOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionBentNormalCustomOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionBentNormalCustomOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionBentNormalCustomOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionBentNormalCustomOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionBentNormalCustomOutput(UObject* target, FString label, UMaterialExpressionBentNormalCustomOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionBentNormalCustomOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionClearCoatNormalCustomOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionClearCoatNormalCustomOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionClearCoatNormalCustomOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionClearCoatNormalCustomOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionClearCoatNormalCustomOutput(UObject* target, FString label, UMaterialExpressionClearCoatNormalCustomOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionClearCoatNormalCustomOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionRuntimeVirtualTextureOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionRuntimeVirtualTextureOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionRuntimeVirtualTextureOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionRuntimeVirtualTextureOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionRuntimeVirtualTextureOutput(UObject* target, FString label, UMaterialExpressionRuntimeVirtualTextureOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionRuntimeVirtualTextureOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionSingleLayerWaterMaterialOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionSingleLayerWaterMaterialOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionSingleLayerWaterMaterialOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionSingleLayerWaterMaterialOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionSingleLayerWaterMaterialOutput(UObject* target, FString label, UMaterialExpressionSingleLayerWaterMaterialOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionSingleLayerWaterMaterialOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTangentOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTangentOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTangentOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTangentOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTangentOutput(UObject* target, FString label, UMaterialExpressionTangentOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTangentOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionThinTranslucentMaterialOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionThinTranslucentMaterialOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionThinTranslucentMaterialOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionThinTranslucentMaterialOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionThinTranslucentMaterialOutput(UObject* target, FString label, UMaterialExpressionThinTranslucentMaterialOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionThinTranslucentMaterialOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVertexInterpolator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVertexInterpolator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVertexInterpolator** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVertexInterpolator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVertexInterpolator(UObject* target, FString label, UMaterialExpressionVertexInterpolator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVertexInterpolator*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVolumetricAdvancedMaterialOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVolumetricAdvancedMaterialOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVolumetricAdvancedMaterialOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVolumetricAdvancedMaterialOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVolumetricAdvancedMaterialOutput(UObject* target, FString label, UMaterialExpressionVolumetricAdvancedMaterialOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVolumetricAdvancedMaterialOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput(UObject* target, FString label, UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionFontSampleParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionFontSampleParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionFontSampleParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionFontSampleParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionFontSampleParameter(UObject* target, FString label, UMaterialExpressionFontSampleParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionFontSampleParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionMaterialLayerOutput* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionMaterialLayerOutput(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionMaterialLayerOutput** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionMaterialLayerOutput*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionMaterialLayerOutput(UObject* target, FString label, UMaterialExpressionMaterialLayerOutput* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionMaterialLayerOutput*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionConstantDouble* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionConstantDouble(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionConstantDouble** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionConstantDouble*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionConstantDouble(UObject* target, FString label, UMaterialExpressionConstantDouble* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionConstantDouble*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionDoubleVectorParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionDoubleVectorParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionDoubleVectorParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionDoubleVectorParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionDoubleVectorParameter(UObject* target, FString label, UMaterialExpressionDoubleVectorParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionDoubleVectorParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionScalarParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionScalarParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionScalarParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionScalarParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionScalarParameter(UObject* target, FString label, UMaterialExpressionScalarParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionScalarParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStaticBoolParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStaticBoolParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStaticBoolParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStaticBoolParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStaticBoolParameter(UObject* target, FString label, UMaterialExpressionStaticBoolParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStaticBoolParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStaticComponentMaskParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStaticComponentMaskParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStaticComponentMaskParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStaticComponentMaskParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStaticComponentMaskParameter(UObject* target, FString label, UMaterialExpressionStaticComponentMaskParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStaticComponentMaskParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionVectorParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionVectorParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionVectorParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionVectorParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionVectorParameter(UObject* target, FString label, UMaterialExpressionVectorParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionVectorParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionCurveAtlasRowParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionCurveAtlasRowParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionCurveAtlasRowParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionCurveAtlasRowParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionCurveAtlasRowParameter(UObject* target, FString label, UMaterialExpressionCurveAtlasRowParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionCurveAtlasRowParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStaticSwitchParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStaticSwitchParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStaticSwitchParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStaticSwitchParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStaticSwitchParameter(UObject* target, FString label, UMaterialExpressionStaticSwitchParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStaticSwitchParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionChannelMaskParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionChannelMaskParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionChannelMaskParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionChannelMaskParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionChannelMaskParameter(UObject* target, FString label, UMaterialExpressionChannelMaskParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionChannelMaskParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionNamedRerouteBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionNamedRerouteBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionNamedRerouteBase** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionNamedRerouteBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionNamedRerouteBase(UObject* target, FString label, UMaterialExpressionNamedRerouteBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionNamedRerouteBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionReroute* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionReroute(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionReroute** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionReroute*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionReroute(UObject* target, FString label, UMaterialExpressionReroute* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionReroute*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionNamedRerouteDeclaration* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionNamedRerouteDeclaration(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionNamedRerouteDeclaration** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionNamedRerouteDeclaration*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionNamedRerouteDeclaration(UObject* target, FString label, UMaterialExpressionNamedRerouteDeclaration* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionNamedRerouteDeclaration*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionNamedRerouteUsage* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionNamedRerouteUsage(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionNamedRerouteUsage** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionNamedRerouteUsage*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionNamedRerouteUsage(UObject* target, FString label, UMaterialExpressionNamedRerouteUsage* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionNamedRerouteUsage*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionRuntimeVirtualTextureSampleParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionRuntimeVirtualTextureSampleParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionRuntimeVirtualTextureSampleParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionRuntimeVirtualTextureSampleParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionRuntimeVirtualTextureSampleParameter(UObject* target, FString label, UMaterialExpressionRuntimeVirtualTextureSampleParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionRuntimeVirtualTextureSampleParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataAdd* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataAdd(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataAdd** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataAdd*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataAdd(UObject* target, FString label, UMaterialExpressionStrataAdd* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataAdd*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataConvertToDecal* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataConvertToDecal(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataConvertToDecal** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataConvertToDecal*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataConvertToDecal(UObject* target, FString label, UMaterialExpressionStrataConvertToDecal* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataConvertToDecal*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataEyeBSDF* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataEyeBSDF(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataEyeBSDF** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataEyeBSDF*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataEyeBSDF(UObject* target, FString label, UMaterialExpressionStrataEyeBSDF* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataEyeBSDF*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataHairBSDF* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataHairBSDF(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataHairBSDF** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataHairBSDF*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataHairBSDF(UObject* target, FString label, UMaterialExpressionStrataHairBSDF* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataHairBSDF*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataHorizontalMixing* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataHorizontalMixing(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataHorizontalMixing** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataHorizontalMixing*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataHorizontalMixing(UObject* target, FString label, UMaterialExpressionStrataHorizontalMixing* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataHorizontalMixing*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataLegacyConversion* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataLegacyConversion(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataLegacyConversion** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataLegacyConversion*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataLegacyConversion(UObject* target, FString label, UMaterialExpressionStrataLegacyConversion* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataLegacyConversion*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataLightFunction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataLightFunction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataLightFunction** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataLightFunction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataLightFunction(UObject* target, FString label, UMaterialExpressionStrataLightFunction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataLightFunction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataPostProcess* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataPostProcess(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataPostProcess** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataPostProcess*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataPostProcess(UObject* target, FString label, UMaterialExpressionStrataPostProcess* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataPostProcess*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataSimpleClearCoatBSDF* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataSimpleClearCoatBSDF(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataSimpleClearCoatBSDF** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataSimpleClearCoatBSDF*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataSimpleClearCoatBSDF(UObject* target, FString label, UMaterialExpressionStrataSimpleClearCoatBSDF* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataSimpleClearCoatBSDF*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataSingleLayerWaterBSDF* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataSingleLayerWaterBSDF(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataSingleLayerWaterBSDF** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataSingleLayerWaterBSDF*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataSingleLayerWaterBSDF(UObject* target, FString label, UMaterialExpressionStrataSingleLayerWaterBSDF* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataSingleLayerWaterBSDF*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataSlabBSDF* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataSlabBSDF(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataSlabBSDF** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataSlabBSDF*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataSlabBSDF(UObject* target, FString label, UMaterialExpressionStrataSlabBSDF* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataSlabBSDF*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataThinFilm* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataThinFilm(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataThinFilm** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataThinFilm*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataThinFilm(UObject* target, FString label, UMaterialExpressionStrataThinFilm* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataThinFilm*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataUnlitBSDF* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataUnlitBSDF(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataUnlitBSDF** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataUnlitBSDF*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataUnlitBSDF(UObject* target, FString label, UMaterialExpressionStrataUnlitBSDF* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataUnlitBSDF*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataVerticalLayering* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataVerticalLayering(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataVerticalLayering** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataVerticalLayering*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataVerticalLayering(UObject* target, FString label, UMaterialExpressionStrataVerticalLayering* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataVerticalLayering*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataVolumetricFogCloudBSDF* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataVolumetricFogCloudBSDF(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataVolumetricFogCloudBSDF** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataVolumetricFogCloudBSDF*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataVolumetricFogCloudBSDF(UObject* target, FString label, UMaterialExpressionStrataVolumetricFogCloudBSDF* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataVolumetricFogCloudBSDF*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataWeight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataWeight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataWeight** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataWeight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataWeight(UObject* target, FString label, UMaterialExpressionStrataWeight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataWeight*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataHazinessToSecondaryRoughness* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataHazinessToSecondaryRoughness(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataHazinessToSecondaryRoughness** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataHazinessToSecondaryRoughness*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataHazinessToSecondaryRoughness(UObject* target, FString label, UMaterialExpressionStrataHazinessToSecondaryRoughness* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataHazinessToSecondaryRoughness*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataMetalnessToDiffuseAlbedoF0(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataMetalnessToDiffuseAlbedoF0(UObject* target, FString label, UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionStrataTransmittanceToMFP* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionStrataTransmittanceToMFP(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionStrataTransmittanceToMFP** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionStrataTransmittanceToMFP*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionStrataTransmittanceToMFP(UObject* target, FString label, UMaterialExpressionStrataTransmittanceToMFP* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionStrataTransmittanceToMFP*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureObject* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureObject(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureObject** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureObject*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureObject(UObject* target, FString label, UMaterialExpressionTextureObject* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureObject*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureSample* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureSample(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureSample** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureSample*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureSample(UObject* target, FString label, UMaterialExpressionTextureSample* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureSample*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionParticleSubUV* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionParticleSubUV(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionParticleSubUV** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionParticleSubUV*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionParticleSubUV(UObject* target, FString label, UMaterialExpressionParticleSubUV* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionParticleSubUV*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureSampleParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureSampleParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureSampleParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureSampleParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureSampleParameter(UObject* target, FString label, UMaterialExpressionTextureSampleParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureSampleParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureObjectParameter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureObjectParameter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureObjectParameter** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureObjectParameter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureObjectParameter(UObject* target, FString label, UMaterialExpressionTextureObjectParameter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureObjectParameter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureSampleParameter2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureSampleParameter2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureSampleParameter2D** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureSampleParameter2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureSampleParameter2D(UObject* target, FString label, UMaterialExpressionTextureSampleParameter2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureSampleParameter2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureSampleParameter2DArray* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureSampleParameter2DArray(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureSampleParameter2DArray** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureSampleParameter2DArray*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureSampleParameter2DArray(UObject* target, FString label, UMaterialExpressionTextureSampleParameter2DArray* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureSampleParameter2DArray*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureSampleParameterCube* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureSampleParameterCube(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureSampleParameterCube** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureSampleParameterCube*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureSampleParameterCube(UObject* target, FString label, UMaterialExpressionTextureSampleParameterCube* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureSampleParameterCube*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureSampleParameterCubeArray* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureSampleParameterCubeArray(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureSampleParameterCubeArray** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureSampleParameterCubeArray*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureSampleParameterCubeArray(UObject* target, FString label, UMaterialExpressionTextureSampleParameterCubeArray* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureSampleParameterCubeArray*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureSampleParameterVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureSampleParameterVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureSampleParameterVolume** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureSampleParameterVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureSampleParameterVolume(UObject* target, FString label, UMaterialExpressionTextureSampleParameterVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureSampleParameterVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionAntialiasedTextureMask* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionAntialiasedTextureMask(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionAntialiasedTextureMask** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionAntialiasedTextureMask*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionAntialiasedTextureMask(UObject* target, FString label, UMaterialExpressionAntialiasedTextureMask* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionAntialiasedTextureMask*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialExpressionTextureSampleParameterSubUV* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialExpressionTextureSampleParameterSubUV(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialExpressionTextureSampleParameterSubUV** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialExpressionTextureSampleParameterSubUV*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialExpressionTextureSampleParameterSubUV(UObject* target, FString label, UMaterialExpressionTextureSampleParameterSubUV* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialExpressionTextureSampleParameterSubUV*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialFunction* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialFunction(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialFunction** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialFunction*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialFunction(UObject* target, FString label, UMaterialFunction* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialFunction*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialFunctionInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialFunctionInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialFunctionInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialFunctionInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialFunctionInstance(UObject* target, FString label, UMaterialFunctionInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialFunctionInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialFunctionMaterialLayer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialFunctionMaterialLayer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialFunctionMaterialLayer** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialFunctionMaterialLayer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialFunctionMaterialLayer(UObject* target, FString label, UMaterialFunctionMaterialLayer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialFunctionMaterialLayer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialFunctionMaterialLayerBlend* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialFunctionMaterialLayerBlend(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialFunctionMaterialLayerBlend** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialFunctionMaterialLayerBlend*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialFunctionMaterialLayerBlend(UObject* target, FString label, UMaterialFunctionMaterialLayerBlend* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialFunctionMaterialLayerBlend*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialFunctionMaterialLayerBlendInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialFunctionMaterialLayerBlendInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialFunctionMaterialLayerBlendInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialFunctionMaterialLayerBlendInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialFunctionMaterialLayerBlendInstance(UObject* target, FString label, UMaterialFunctionMaterialLayerBlendInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialFunctionMaterialLayerBlendInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialFunctionMaterialLayerInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialFunctionMaterialLayerInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialFunctionMaterialLayerInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialFunctionMaterialLayerInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialFunctionMaterialLayerInstance(UObject* target, FString label, UMaterialFunctionMaterialLayerInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialFunctionMaterialLayerInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialFunctionEditorOnlyData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialFunctionEditorOnlyData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialFunctionEditorOnlyData** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialFunctionEditorOnlyData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialFunctionEditorOnlyData(UObject* target, FString label, UMaterialFunctionEditorOnlyData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialFunctionEditorOnlyData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterial* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterial(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterial** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterial*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterial(UObject* target, FString label, UMaterial* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterial*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialInstance* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialInstance(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialInstance** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialInstance*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialInstance(UObject* target, FString label, UMaterialInstance* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialInstance*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialInstanceConstant* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialInstanceConstant(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialInstanceConstant** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialInstanceConstant*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialInstanceConstant(UObject* target, FString label, UMaterialInstanceConstant* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialInstanceConstant*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialInstanceDynamic* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialInstanceDynamic(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialInstanceDynamic** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialInstanceDynamic*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialInstanceDynamic(UObject* target, FString label, UMaterialInstanceDynamic* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialInstanceDynamic*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialEditorOnlyData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialEditorOnlyData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialEditorOnlyData** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialEditorOnlyData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialEditorOnlyData(UObject* target, FString label, UMaterialEditorOnlyData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialEditorOnlyData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMaterialInstanceEditorOnlyData* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMaterialInstanceEditorOnlyData(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMaterialInstanceEditorOnlyData** result = abstractBasedObject->GetInternal()->GetClassVar<UMaterialInstanceEditorOnlyData*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMaterialInstanceEditorOnlyData(UObject* target, FString label, UMaterialInstanceEditorOnlyData* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMaterialInstanceEditorOnlyData*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNullNavSysConfig* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNullNavSysConfig(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNullNavSysConfig** result = abstractBasedObject->GetInternal()->GetClassVar<UNullNavSysConfig*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNullNavSysConfig(UObject* target, FString label, UNullNavSysConfig* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNullNavSysConfig*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDemoNetDriver* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDemoNetDriver(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDemoNetDriver** result = abstractBasedObject->GetInternal()->GetClassVar<UDemoNetDriver*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDemoNetDriver(UObject* target, FString label, UDemoNetDriver* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDemoNetDriver*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleSpriteEmitter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleSpriteEmitter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleSpriteEmitter** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleSpriteEmitter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleSpriteEmitter(UObject* target, FString label, UParticleSpriteEmitter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleSpriteEmitter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAccelerationBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAccelerationBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAccelerationBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAccelerationBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAccelerationBase(UObject* target, FString label, UParticleModuleAccelerationBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAccelerationBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAttractorBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAttractorBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAttractorBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAttractorBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAttractorBase(UObject* target, FString label, UParticleModuleAttractorBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAttractorBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleBeamBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleBeamBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleBeamBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleBeamBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleBeamBase(UObject* target, FString label, UParticleModuleBeamBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleBeamBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleCameraBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleCameraBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleCameraBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleCameraBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleCameraBase(UObject* target, FString label, UParticleModuleCameraBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleCameraBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleCollisionBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleCollisionBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleCollisionBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleCollisionBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleCollisionBase(UObject* target, FString label, UParticleModuleCollisionBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleCollisionBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleColorBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleColorBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleColorBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleColorBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleColorBase(UObject* target, FString label, UParticleModuleColorBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleColorBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleEventBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleEventBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleEventBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleEventBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleEventBase(UObject* target, FString label, UParticleModuleEventBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleEventBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleKillBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleKillBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleKillBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleKillBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleKillBase(UObject* target, FString label, UParticleModuleKillBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleKillBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLifetimeBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLifetimeBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLifetimeBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLifetimeBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLifetimeBase(UObject* target, FString label, UParticleModuleLifetimeBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLifetimeBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLightBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLightBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLightBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLightBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLightBase(UObject* target, FString label, UParticleModuleLightBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLightBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationBase(UObject* target, FString label, UParticleModuleLocationBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleMaterialBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleMaterialBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleMaterialBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleMaterialBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleMaterialBase(UObject* target, FString label, UParticleModuleMaterialBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleMaterialBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleOrbitBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleOrbitBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleOrbitBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleOrbitBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleOrbitBase(UObject* target, FString label, UParticleModuleOrbitBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleOrbitBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleOrientationBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleOrientationBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleOrientationBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleOrientationBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleOrientationBase(UObject* target, FString label, UParticleModuleOrientationBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleOrientationBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleParameterBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleParameterBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleParameterBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleParameterBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleParameterBase(UObject* target, FString label, UParticleModuleParameterBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleParameterBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleRequired* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleRequired(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleRequired** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleRequired*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleRequired(UObject* target, FString label, UParticleModuleRequired* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleRequired*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleRotationBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleRotationBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleRotationBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleRotationBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleRotationBase(UObject* target, FString label, UParticleModuleRotationBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleRotationBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleRotationRateBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleRotationRateBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleRotationRateBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleRotationRateBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleRotationRateBase(UObject* target, FString label, UParticleModuleRotationRateBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleRotationRateBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSizeBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSizeBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSizeBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSizeBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSizeBase(UObject* target, FString label, UParticleModuleSizeBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSizeBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSpawnBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSpawnBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSpawnBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSpawnBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSpawnBase(UObject* target, FString label, UParticleModuleSpawnBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSpawnBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSubUVBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSubUVBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSubUVBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSubUVBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSubUVBase(UObject* target, FString label, UParticleModuleSubUVBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSubUVBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleTrailBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleTrailBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleTrailBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleTrailBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleTrailBase(UObject* target, FString label, UParticleModuleTrailBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleTrailBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleTypeDataBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleTypeDataBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleTypeDataBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleTypeDataBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleTypeDataBase(UObject* target, FString label, UParticleModuleTypeDataBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleTypeDataBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVectorFieldBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVectorFieldBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVectorFieldBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVectorFieldBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVectorFieldBase(UObject* target, FString label, UParticleModuleVectorFieldBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVectorFieldBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVelocityBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVelocityBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVelocityBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVelocityBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVelocityBase(UObject* target, FString label, UParticleModuleVelocityBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVelocityBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAcceleration* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAcceleration(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAcceleration** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAcceleration*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAcceleration(UObject* target, FString label, UParticleModuleAcceleration* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAcceleration*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAccelerationConstant* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAccelerationConstant(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAccelerationConstant** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAccelerationConstant*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAccelerationConstant(UObject* target, FString label, UParticleModuleAccelerationConstant* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAccelerationConstant*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAccelerationDrag* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAccelerationDrag(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAccelerationDrag** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAccelerationDrag*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAccelerationDrag(UObject* target, FString label, UParticleModuleAccelerationDrag* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAccelerationDrag*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAccelerationDragScaleOverLife* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAccelerationDragScaleOverLife(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAccelerationDragScaleOverLife** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAccelerationDragScaleOverLife*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAccelerationDragScaleOverLife(UObject* target, FString label, UParticleModuleAccelerationDragScaleOverLife* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAccelerationDragScaleOverLife*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAccelerationOverLifetime* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAccelerationOverLifetime(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAccelerationOverLifetime** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAccelerationOverLifetime*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAccelerationOverLifetime(UObject* target, FString label, UParticleModuleAccelerationOverLifetime* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAccelerationOverLifetime*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAttractorLine* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAttractorLine(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAttractorLine** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAttractorLine*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAttractorLine(UObject* target, FString label, UParticleModuleAttractorLine* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAttractorLine*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAttractorParticle* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAttractorParticle(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAttractorParticle** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAttractorParticle*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAttractorParticle(UObject* target, FString label, UParticleModuleAttractorParticle* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAttractorParticle*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAttractorPoint* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAttractorPoint(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAttractorPoint** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAttractorPoint*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAttractorPoint(UObject* target, FString label, UParticleModuleAttractorPoint* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAttractorPoint*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleAttractorPointGravity* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleAttractorPointGravity(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleAttractorPointGravity** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleAttractorPointGravity*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleAttractorPointGravity(UObject* target, FString label, UParticleModuleAttractorPointGravity* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleAttractorPointGravity*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleBeamModifier* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleBeamModifier(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleBeamModifier** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleBeamModifier*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleBeamModifier(UObject* target, FString label, UParticleModuleBeamModifier* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleBeamModifier*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleBeamNoise* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleBeamNoise(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleBeamNoise** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleBeamNoise*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleBeamNoise(UObject* target, FString label, UParticleModuleBeamNoise* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleBeamNoise*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleBeamSource* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleBeamSource(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleBeamSource** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleBeamSource*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleBeamSource(UObject* target, FString label, UParticleModuleBeamSource* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleBeamSource*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleBeamTarget* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleBeamTarget(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleBeamTarget** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleBeamTarget*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleBeamTarget(UObject* target, FString label, UParticleModuleBeamTarget* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleBeamTarget*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleCameraOffset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleCameraOffset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleCameraOffset** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleCameraOffset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleCameraOffset(UObject* target, FString label, UParticleModuleCameraOffset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleCameraOffset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleCollision* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleCollision(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleCollision** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleCollision*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleCollision(UObject* target, FString label, UParticleModuleCollision* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleCollision*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleCollisionGPU* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleCollisionGPU(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleCollisionGPU** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleCollisionGPU*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleCollisionGPU(UObject* target, FString label, UParticleModuleCollisionGPU* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleCollisionGPU*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleColor* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleColor(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleColor** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleColor*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleColor(UObject* target, FString label, UParticleModuleColor* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleColor*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleColorOverLife* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleColorOverLife(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleColorOverLife** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleColorOverLife*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleColorOverLife(UObject* target, FString label, UParticleModuleColorOverLife* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleColorOverLife*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleColorScaleOverLife* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleColorScaleOverLife(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleColorScaleOverLife** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleColorScaleOverLife*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleColorScaleOverLife(UObject* target, FString label, UParticleModuleColorScaleOverLife* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleColorScaleOverLife*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleColor_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleColor_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleColor_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleColor_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleColor_Seeded(UObject* target, FString label, UParticleModuleColor_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleColor_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleEventGenerator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleEventGenerator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleEventGenerator** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleEventGenerator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleEventGenerator(UObject* target, FString label, UParticleModuleEventGenerator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleEventGenerator*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleEventReceiverBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleEventReceiverBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleEventReceiverBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleEventReceiverBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleEventReceiverBase(UObject* target, FString label, UParticleModuleEventReceiverBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleEventReceiverBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleEventReceiverKillParticles* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleEventReceiverKillParticles(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleEventReceiverKillParticles** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleEventReceiverKillParticles*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleEventReceiverKillParticles(UObject* target, FString label, UParticleModuleEventReceiverKillParticles* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleEventReceiverKillParticles*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleEventReceiverSpawn* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleEventReceiverSpawn(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleEventReceiverSpawn** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleEventReceiverSpawn*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleEventReceiverSpawn(UObject* target, FString label, UParticleModuleEventReceiverSpawn* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleEventReceiverSpawn*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleKillBox* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleKillBox(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleKillBox** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleKillBox*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleKillBox(UObject* target, FString label, UParticleModuleKillBox* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleKillBox*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleKillHeight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleKillHeight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleKillHeight** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleKillHeight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleKillHeight(UObject* target, FString label, UParticleModuleKillHeight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleKillHeight*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLifetime* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLifetime(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLifetime** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLifetime*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLifetime(UObject* target, FString label, UParticleModuleLifetime* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLifetime*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLifetime_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLifetime_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLifetime_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLifetime_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLifetime_Seeded(UObject* target, FString label, UParticleModuleLifetime_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLifetime_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLight* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLight(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLight** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLight*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLight(UObject* target, FString label, UParticleModuleLight* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLight*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLight_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLight_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLight_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLight_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLight_Seeded(UObject* target, FString label, UParticleModuleLight_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLight_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocation** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocation(UObject* target, FString label, UParticleModuleLocation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationBoneSocket* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationBoneSocket(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationBoneSocket** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationBoneSocket*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationBoneSocket(UObject* target, FString label, UParticleModuleLocationBoneSocket* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationBoneSocket*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationDirect* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationDirect(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationDirect** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationDirect*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationDirect(UObject* target, FString label, UParticleModuleLocationDirect* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationDirect*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationEmitter* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationEmitter(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationEmitter** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationEmitter*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationEmitter(UObject* target, FString label, UParticleModuleLocationEmitter* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationEmitter*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationEmitterDirect* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationEmitterDirect(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationEmitterDirect** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationEmitterDirect*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationEmitterDirect(UObject* target, FString label, UParticleModuleLocationEmitterDirect* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationEmitterDirect*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationPrimitiveBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationPrimitiveBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationPrimitiveBase** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationPrimitiveBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationPrimitiveBase(UObject* target, FString label, UParticleModuleLocationPrimitiveBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationPrimitiveBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationPrimitiveTriangle* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationPrimitiveTriangle(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationPrimitiveTriangle** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationPrimitiveTriangle*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationPrimitiveTriangle(UObject* target, FString label, UParticleModuleLocationPrimitiveTriangle* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationPrimitiveTriangle*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationSkelVertSurface* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationSkelVertSurface(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationSkelVertSurface** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationSkelVertSurface*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationSkelVertSurface(UObject* target, FString label, UParticleModuleLocationSkelVertSurface* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationSkelVertSurface*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModulePivotOffset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModulePivotOffset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModulePivotOffset** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModulePivotOffset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModulePivotOffset(UObject* target, FString label, UParticleModulePivotOffset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModulePivotOffset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSourceMovement* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSourceMovement(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSourceMovement** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSourceMovement*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSourceMovement(UObject* target, FString label, UParticleModuleSourceMovement* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSourceMovement*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocation_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocation_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocation_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocation_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocation_Seeded(UObject* target, FString label, UParticleModuleLocation_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocation_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationWorldOffset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationWorldOffset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationWorldOffset** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationWorldOffset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationWorldOffset(UObject* target, FString label, UParticleModuleLocationWorldOffset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationWorldOffset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationWorldOffset_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationWorldOffset_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationWorldOffset_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationWorldOffset_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationWorldOffset_Seeded(UObject* target, FString label, UParticleModuleLocationWorldOffset_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationWorldOffset_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationPrimitiveCylinder* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationPrimitiveCylinder(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationPrimitiveCylinder** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationPrimitiveCylinder*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationPrimitiveCylinder(UObject* target, FString label, UParticleModuleLocationPrimitiveCylinder* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationPrimitiveCylinder*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationPrimitiveSphere* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationPrimitiveSphere(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationPrimitiveSphere** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationPrimitiveSphere*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationPrimitiveSphere(UObject* target, FString label, UParticleModuleLocationPrimitiveSphere* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationPrimitiveSphere*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationPrimitiveCylinder_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationPrimitiveCylinder_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationPrimitiveCylinder_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationPrimitiveCylinder_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationPrimitiveCylinder_Seeded(UObject* target, FString label, UParticleModuleLocationPrimitiveCylinder_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationPrimitiveCylinder_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleLocationPrimitiveSphere_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleLocationPrimitiveSphere_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleLocationPrimitiveSphere_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleLocationPrimitiveSphere_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleLocationPrimitiveSphere_Seeded(UObject* target, FString label, UParticleModuleLocationPrimitiveSphere_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleLocationPrimitiveSphere_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleMeshMaterial* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleMeshMaterial(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleMeshMaterial** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleMeshMaterial*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleMeshMaterial(UObject* target, FString label, UParticleModuleMeshMaterial* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleMeshMaterial*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleOrbit* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleOrbit(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleOrbit** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleOrbit*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleOrbit(UObject* target, FString label, UParticleModuleOrbit* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleOrbit*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleOrientationAxisLock* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleOrientationAxisLock(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleOrientationAxisLock** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleOrientationAxisLock*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleOrientationAxisLock(UObject* target, FString label, UParticleModuleOrientationAxisLock* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleOrientationAxisLock*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleParameterDynamic* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleParameterDynamic(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleParameterDynamic** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleParameterDynamic*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleParameterDynamic(UObject* target, FString label, UParticleModuleParameterDynamic* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleParameterDynamic*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleParameterDynamic_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleParameterDynamic_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleParameterDynamic_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleParameterDynamic_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleParameterDynamic_Seeded(UObject* target, FString label, UParticleModuleParameterDynamic_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleParameterDynamic_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleMeshRotation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleMeshRotation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleMeshRotation** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleMeshRotation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleMeshRotation(UObject* target, FString label, UParticleModuleMeshRotation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleMeshRotation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleRotation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleRotation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleRotation** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleRotation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleRotation(UObject* target, FString label, UParticleModuleRotation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleRotation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleRotationOverLifetime* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleRotationOverLifetime(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleRotationOverLifetime** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleRotationOverLifetime*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleRotationOverLifetime(UObject* target, FString label, UParticleModuleRotationOverLifetime* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleRotationOverLifetime*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleMeshRotation_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleMeshRotation_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleMeshRotation_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleMeshRotation_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleMeshRotation_Seeded(UObject* target, FString label, UParticleModuleMeshRotation_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleMeshRotation_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleRotation_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleRotation_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleRotation_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleRotation_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleRotation_Seeded(UObject* target, FString label, UParticleModuleRotation_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleRotation_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleMeshRotationRate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleMeshRotationRate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleMeshRotationRate** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleMeshRotationRate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleMeshRotationRate(UObject* target, FString label, UParticleModuleMeshRotationRate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleMeshRotationRate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleMeshRotationRateMultiplyLife* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleMeshRotationRateMultiplyLife(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleMeshRotationRateMultiplyLife** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleMeshRotationRateMultiplyLife*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleMeshRotationRateMultiplyLife(UObject* target, FString label, UParticleModuleMeshRotationRateMultiplyLife* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleMeshRotationRateMultiplyLife*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleMeshRotationRateOverLife* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleMeshRotationRateOverLife(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleMeshRotationRateOverLife** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleMeshRotationRateOverLife*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleMeshRotationRateOverLife(UObject* target, FString label, UParticleModuleMeshRotationRateOverLife* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleMeshRotationRateOverLife*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleRotationRate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleRotationRate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleRotationRate** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleRotationRate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleRotationRate(UObject* target, FString label, UParticleModuleRotationRate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleRotationRate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleRotationRateMultiplyLife* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleRotationRateMultiplyLife(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleRotationRateMultiplyLife** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleRotationRateMultiplyLife*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleRotationRateMultiplyLife(UObject* target, FString label, UParticleModuleRotationRateMultiplyLife* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleRotationRateMultiplyLife*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleMeshRotationRate_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleMeshRotationRate_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleMeshRotationRate_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleMeshRotationRate_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleMeshRotationRate_Seeded(UObject* target, FString label, UParticleModuleMeshRotationRate_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleMeshRotationRate_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleRotationRate_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleRotationRate_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleRotationRate_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleRotationRate_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleRotationRate_Seeded(UObject* target, FString label, UParticleModuleRotationRate_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleRotationRate_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSize* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSize(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSize** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSize*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSize(UObject* target, FString label, UParticleModuleSize* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSize*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSizeMultiplyLife* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSizeMultiplyLife(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSizeMultiplyLife** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSizeMultiplyLife*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSizeMultiplyLife(UObject* target, FString label, UParticleModuleSizeMultiplyLife* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSizeMultiplyLife*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSizeScale* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSizeScale(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSizeScale** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSizeScale*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSizeScale(UObject* target, FString label, UParticleModuleSizeScale* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSizeScale*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSizeScaleBySpeed* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSizeScaleBySpeed(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSizeScaleBySpeed** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSizeScaleBySpeed*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSizeScaleBySpeed(UObject* target, FString label, UParticleModuleSizeScaleBySpeed* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSizeScaleBySpeed*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSize_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSize_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSize_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSize_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSize_Seeded(UObject* target, FString label, UParticleModuleSize_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSize_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSpawn* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSpawn(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSpawn** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSpawn*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSpawn(UObject* target, FString label, UParticleModuleSpawn* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSpawn*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSpawnPerUnit* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSpawnPerUnit(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSpawnPerUnit** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSpawnPerUnit*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSpawnPerUnit(UObject* target, FString label, UParticleModuleSpawnPerUnit* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSpawnPerUnit*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSubUV* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSubUV(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSubUV** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSubUV*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSubUV(UObject* target, FString label, UParticleModuleSubUV* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSubUV*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleSubUVMovie* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleSubUVMovie(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleSubUVMovie** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleSubUVMovie*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleSubUVMovie(UObject* target, FString label, UParticleModuleSubUVMovie* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleSubUVMovie*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleTrailSource* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleTrailSource(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleTrailSource** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleTrailSource*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleTrailSource(UObject* target, FString label, UParticleModuleTrailSource* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleTrailSource*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleTypeDataAnimTrail* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleTypeDataAnimTrail(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleTypeDataAnimTrail** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleTypeDataAnimTrail*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleTypeDataAnimTrail(UObject* target, FString label, UParticleModuleTypeDataAnimTrail* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleTypeDataAnimTrail*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleTypeDataBeam2* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleTypeDataBeam2(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleTypeDataBeam2** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleTypeDataBeam2*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleTypeDataBeam2(UObject* target, FString label, UParticleModuleTypeDataBeam2* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleTypeDataBeam2*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleTypeDataGpu* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleTypeDataGpu(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleTypeDataGpu** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleTypeDataGpu*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleTypeDataGpu(UObject* target, FString label, UParticleModuleTypeDataGpu* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleTypeDataGpu*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleTypeDataMesh* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleTypeDataMesh(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleTypeDataMesh** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleTypeDataMesh*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleTypeDataMesh(UObject* target, FString label, UParticleModuleTypeDataMesh* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleTypeDataMesh*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleTypeDataRibbon* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleTypeDataRibbon(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleTypeDataRibbon** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleTypeDataRibbon*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleTypeDataRibbon(UObject* target, FString label, UParticleModuleTypeDataRibbon* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleTypeDataRibbon*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVectorFieldGlobal* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVectorFieldGlobal(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVectorFieldGlobal** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVectorFieldGlobal*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVectorFieldGlobal(UObject* target, FString label, UParticleModuleVectorFieldGlobal* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVectorFieldGlobal*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVectorFieldLocal* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVectorFieldLocal(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVectorFieldLocal** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVectorFieldLocal*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVectorFieldLocal(UObject* target, FString label, UParticleModuleVectorFieldLocal* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVectorFieldLocal*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVectorFieldRotation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVectorFieldRotation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVectorFieldRotation** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVectorFieldRotation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVectorFieldRotation(UObject* target, FString label, UParticleModuleVectorFieldRotation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVectorFieldRotation*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVectorFieldRotationRate* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVectorFieldRotationRate(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVectorFieldRotationRate** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVectorFieldRotationRate*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVectorFieldRotationRate(UObject* target, FString label, UParticleModuleVectorFieldRotationRate* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVectorFieldRotationRate*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVectorFieldScale* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVectorFieldScale(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVectorFieldScale** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVectorFieldScale*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVectorFieldScale(UObject* target, FString label, UParticleModuleVectorFieldScale* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVectorFieldScale*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVectorFieldScaleOverLife* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVectorFieldScaleOverLife(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVectorFieldScaleOverLife** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVectorFieldScaleOverLife*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVectorFieldScaleOverLife(UObject* target, FString label, UParticleModuleVectorFieldScaleOverLife* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVectorFieldScaleOverLife*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVelocity* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVelocity(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVelocity** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVelocity*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVelocity(UObject* target, FString label, UParticleModuleVelocity* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVelocity*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVelocityCone* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVelocityCone(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVelocityCone** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVelocityCone*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVelocityCone(UObject* target, FString label, UParticleModuleVelocityCone* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVelocityCone*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVelocityInheritParent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVelocityInheritParent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVelocityInheritParent** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVelocityInheritParent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVelocityInheritParent(UObject* target, FString label, UParticleModuleVelocityInheritParent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVelocityInheritParent*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVelocityOverLifetime* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVelocityOverLifetime(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVelocityOverLifetime** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVelocityOverLifetime*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVelocityOverLifetime(UObject* target, FString label, UParticleModuleVelocityOverLifetime* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVelocityOverLifetime*>(TCHAR_TO_UTF8(*label), value);
    }
}

UParticleModuleVelocity_Seeded* UAbstractBlueprintFunctionLibrary::GetAbsClassVarParticleModuleVelocity_Seeded(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UParticleModuleVelocity_Seeded** result = abstractBasedObject->GetInternal()->GetClassVar<UParticleModuleVelocity_Seeded*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarParticleModuleVelocity_Seeded(UObject* target, FString label, UParticleModuleVelocity_Seeded* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UParticleModuleVelocity_Seeded*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDemoPendingNetGame* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDemoPendingNetGame(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDemoPendingNetGame** result = abstractBasedObject->GetInternal()->GetClassVar<UDemoPendingNetGame*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDemoPendingNetGame(UObject* target, FString label, UDemoPendingNetGame* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDemoPendingNetGame*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCloudStorageBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCloudStorageBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCloudStorageBase** result = abstractBasedObject->GetInternal()->GetClassVar<UCloudStorageBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCloudStorageBase(UObject* target, FString label, UCloudStorageBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCloudStorageBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UInGameAdManager* UAbstractBlueprintFunctionLibrary::GetAbsClassVarInGameAdManager(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UInGameAdManager** result = abstractBasedObject->GetInternal()->GetClassVar<UInGameAdManager*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarInGameAdManager(UObject* target, FString label, UInGameAdManager* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UInGameAdManager*>(TCHAR_TO_UTF8(*label), value);
    }
}

UMicroTransactionBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarMicroTransactionBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UMicroTransactionBase** result = abstractBasedObject->GetInternal()->GetClassVar<UMicroTransactionBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarMicroTransactionBase(UObject* target, FString label, UMicroTransactionBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UMicroTransactionBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTwitterIntegrationBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTwitterIntegrationBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTwitterIntegrationBase** result = abstractBasedObject->GetInternal()->GetClassVar<UTwitterIntegrationBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTwitterIntegrationBase(UObject* target, FString label, UTwitterIntegrationBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTwitterIntegrationBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULocalPlayer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLocalPlayer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULocalPlayer** result = abstractBasedObject->GetInternal()->GetClassVar<ULocalPlayer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLocalPlayer(UObject* target, FString label, ULocalPlayer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULocalPlayer*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNetConnection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNetConnection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNetConnection** result = abstractBasedObject->GetInternal()->GetClassVar<UNetConnection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNetConnection(UObject* target, FString label, UNetConnection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNetConnection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UChildConnection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarChildConnection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UChildConnection** result = abstractBasedObject->GetInternal()->GetClassVar<UChildConnection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarChildConnection(UObject* target, FString label, UChildConnection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UChildConnection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDemoNetConnection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDemoNetConnection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDemoNetConnection** result = abstractBasedObject->GetInternal()->GetClassVar<UDemoNetConnection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDemoNetConnection(UObject* target, FString label, UDemoNetConnection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDemoNetConnection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UReplayNetConnection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarReplayNetConnection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UReplayNetConnection** result = abstractBasedObject->GetInternal()->GetClassVar<UReplayNetConnection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarReplayNetConnection(UObject* target, FString label, UReplayNetConnection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UReplayNetConnection*>(TCHAR_TO_UTF8(*label), value);
    }
}

USimulatedClientNetConnection* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSimulatedClientNetConnection(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USimulatedClientNetConnection** result = abstractBasedObject->GetInternal()->GetClassVar<USimulatedClientNetConnection*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSimulatedClientNetConnection(UObject* target, FString label, USimulatedClientNetConnection* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USimulatedClientNetConnection*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPoseWatchPoseElement* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPoseWatchPoseElement(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPoseWatchPoseElement** result = abstractBasedObject->GetInternal()->GetClassVar<UPoseWatchPoseElement*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPoseWatchPoseElement(UObject* target, FString label, UPoseWatchPoseElement* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPoseWatchPoseElement*>(TCHAR_TO_UTF8(*label), value);
    }
}

UReporterGraph* UAbstractBlueprintFunctionLibrary::GetAbsClassVarReporterGraph(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UReporterGraph** result = abstractBasedObject->GetInternal()->GetClassVar<UReporterGraph*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarReporterGraph(UObject* target, FString label, UReporterGraph* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UReporterGraph*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGameViewportClient* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameViewportClient(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGameViewportClient** result = abstractBasedObject->GetInternal()->GetClassVar<UGameViewportClient*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameViewportClient(UObject* target, FString label, UGameViewportClient* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGameViewportClient*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDialogueSoundWaveProxy* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDialogueSoundWaveProxy(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDialogueSoundWaveProxy** result = abstractBasedObject->GetInternal()->GetClassVar<UDialogueSoundWaveProxy*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDialogueSoundWaveProxy(UObject* target, FString label, UDialogueSoundWaveProxy* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDialogueSoundWaveProxy*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundCue* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundCue(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundCue** result = abstractBasedObject->GetInternal()->GetClassVar<USoundCue*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundCue(UObject* target, FString label, USoundCue* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundCue*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundWave* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundWave(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundWave** result = abstractBasedObject->GetInternal()->GetClassVar<USoundWave*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundWave(UObject* target, FString label, USoundWave* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundWave*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundSourceBus* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundSourceBus(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundSourceBus** result = abstractBasedObject->GetInternal()->GetClassVar<USoundSourceBus*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundSourceBus(UObject* target, FString label, USoundSourceBus* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundSourceBus*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundWaveProcedural* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundWaveProcedural(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundWaveProcedural** result = abstractBasedObject->GetInternal()->GetClassVar<USoundWaveProcedural*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundWaveProcedural(UObject* target, FString label, USoundWaveProcedural* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundWaveProcedural*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundEffectSourcePreset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundEffectSourcePreset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundEffectSourcePreset** result = abstractBasedObject->GetInternal()->GetClassVar<USoundEffectSourcePreset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundEffectSourcePreset(UObject* target, FString label, USoundEffectSourcePreset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundEffectSourcePreset*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundEffectSubmixPreset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundEffectSubmixPreset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundEffectSubmixPreset** result = abstractBasedObject->GetInternal()->GetClassVar<USoundEffectSubmixPreset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundEffectSubmixPreset(UObject* target, FString label, USoundEffectSubmixPreset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundEffectSubmixPreset*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeAssetReferencer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeAssetReferencer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeAssetReferencer** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeAssetReferencer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeAssetReferencer(UObject* target, FString label, USoundNodeAssetReferencer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeAssetReferencer*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeAttenuation* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeAttenuation(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeAttenuation** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeAttenuation*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeAttenuation(UObject* target, FString label, USoundNodeAttenuation* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeAttenuation*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeBranch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeBranch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeBranch** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeBranch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeBranch(UObject* target, FString label, USoundNodeBranch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeBranch*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeConcatenator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeConcatenator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeConcatenator** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeConcatenator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeConcatenator(UObject* target, FString label, USoundNodeConcatenator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeConcatenator*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeDelay* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeDelay(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeDelay** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeDelay*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeDelay(UObject* target, FString label, USoundNodeDelay* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeDelay*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeDialoguePlayer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeDialoguePlayer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeDialoguePlayer** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeDialoguePlayer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeDialoguePlayer(UObject* target, FString label, USoundNodeDialoguePlayer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeDialoguePlayer*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeDistanceCrossFade* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeDistanceCrossFade(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeDistanceCrossFade** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeDistanceCrossFade*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeDistanceCrossFade(UObject* target, FString label, USoundNodeDistanceCrossFade* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeDistanceCrossFade*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeDoppler* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeDoppler(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeDoppler** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeDoppler*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeDoppler(UObject* target, FString label, USoundNodeDoppler* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeDoppler*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeEnveloper* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeEnveloper(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeEnveloper** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeEnveloper*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeEnveloper(UObject* target, FString label, USoundNodeEnveloper* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeEnveloper*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeGroupControl* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeGroupControl(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeGroupControl** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeGroupControl*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeGroupControl(UObject* target, FString label, USoundNodeGroupControl* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeGroupControl*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeLooping* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeLooping(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeLooping** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeLooping*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeLooping(UObject* target, FString label, USoundNodeLooping* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeLooping*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeMature* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeMature(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeMature** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeMature*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeMature(UObject* target, FString label, USoundNodeMature* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeMature*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeMixer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeMixer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeMixer** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeMixer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeMixer(UObject* target, FString label, USoundNodeMixer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeMixer*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeModulator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeModulator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeModulator** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeModulator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeModulator(UObject* target, FString label, USoundNodeModulator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeModulator*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeModulatorContinuous* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeModulatorContinuous(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeModulatorContinuous** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeModulatorContinuous*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeModulatorContinuous(UObject* target, FString label, USoundNodeModulatorContinuous* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeModulatorContinuous*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeOscillator* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeOscillator(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeOscillator** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeOscillator*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeOscillator(UObject* target, FString label, USoundNodeOscillator* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeOscillator*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeQualityLevel* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeQualityLevel(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeQualityLevel** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeQualityLevel*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeQualityLevel(UObject* target, FString label, USoundNodeQualityLevel* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeQualityLevel*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeRandom* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeRandom(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeRandom** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeRandom*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeRandom(UObject* target, FString label, USoundNodeRandom* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeRandom*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeSoundClass* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeSoundClass(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeSoundClass** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeSoundClass*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeSoundClass(UObject* target, FString label, USoundNodeSoundClass* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeSoundClass*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeSwitch* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeSwitch(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeSwitch** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeSwitch*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeSwitch(UObject* target, FString label, USoundNodeSwitch* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeSwitch*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeWaveParam* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeWaveParam(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeWaveParam** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeWaveParam*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeWaveParam(UObject* target, FString label, USoundNodeWaveParam* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeWaveParam*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeWavePlayer* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeWavePlayer(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeWavePlayer** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeWavePlayer*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeWavePlayer(UObject* target, FString label, USoundNodeWavePlayer* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeWavePlayer*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundNodeParamCrossFade* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundNodeParamCrossFade(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundNodeParamCrossFade** result = abstractBasedObject->GetInternal()->GetClassVar<USoundNodeParamCrossFade*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundNodeParamCrossFade(UObject* target, FString label, USoundNodeParamCrossFade* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundNodeParamCrossFade*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEndpointSubmix* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEndpointSubmix(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEndpointSubmix** result = abstractBasedObject->GetInternal()->GetClassVar<UEndpointSubmix*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEndpointSubmix(UObject* target, FString label, UEndpointSubmix* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEndpointSubmix*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundfieldEndpointSubmix* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundfieldEndpointSubmix(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundfieldEndpointSubmix** result = abstractBasedObject->GetInternal()->GetClassVar<USoundfieldEndpointSubmix*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundfieldEndpointSubmix(UObject* target, FString label, USoundfieldEndpointSubmix* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundfieldEndpointSubmix*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundSubmixWithParentBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundSubmixWithParentBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundSubmixWithParentBase** result = abstractBasedObject->GetInternal()->GetClassVar<USoundSubmixWithParentBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundSubmixWithParentBase(UObject* target, FString label, USoundSubmixWithParentBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundSubmixWithParentBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundfieldSubmix* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundfieldSubmix(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundfieldSubmix** result = abstractBasedObject->GetInternal()->GetClassVar<USoundfieldSubmix*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundfieldSubmix(UObject* target, FString label, USoundfieldSubmix* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundfieldSubmix*>(TCHAR_TO_UTF8(*label), value);
    }
}

USoundSubmix* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSoundSubmix(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USoundSubmix** result = abstractBasedObject->GetInternal()->GetClassVar<USoundSubmix*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSoundSubmix(UObject* target, FString label, USoundSubmix* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USoundSubmix*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStereoLayerShapeCubemap* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStereoLayerShapeCubemap(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStereoLayerShapeCubemap** result = abstractBasedObject->GetInternal()->GetClassVar<UStereoLayerShapeCubemap*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStereoLayerShapeCubemap(UObject* target, FString label, UStereoLayerShapeCubemap* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStereoLayerShapeCubemap*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStereoLayerShapeCylinder* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStereoLayerShapeCylinder(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStereoLayerShapeCylinder** result = abstractBasedObject->GetInternal()->GetClassVar<UStereoLayerShapeCylinder*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStereoLayerShapeCylinder(UObject* target, FString label, UStereoLayerShapeCylinder* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStereoLayerShapeCylinder*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStereoLayerShapeEquirect* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStereoLayerShapeEquirect(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStereoLayerShapeEquirect** result = abstractBasedObject->GetInternal()->GetClassVar<UStereoLayerShapeEquirect*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStereoLayerShapeEquirect(UObject* target, FString label, UStereoLayerShapeEquirect* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStereoLayerShapeEquirect*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStereoLayerShapeQuad* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStereoLayerShapeQuad(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStereoLayerShapeQuad** result = abstractBasedObject->GetInternal()->GetClassVar<UStereoLayerShapeQuad*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStereoLayerShapeQuad(UObject* target, FString label, UStereoLayerShapeQuad* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStereoLayerShapeQuad*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkinnedAsset* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkinnedAsset(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkinnedAsset** result = abstractBasedObject->GetInternal()->GetClassVar<USkinnedAsset*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkinnedAsset(UObject* target, FString label, USkinnedAsset* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkinnedAsset*>(TCHAR_TO_UTF8(*label), value);
    }
}

UStaticMesh* UAbstractBlueprintFunctionLibrary::GetAbsClassVarStaticMesh(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UStaticMesh** result = abstractBasedObject->GetInternal()->GetClassVar<UStaticMesh*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarStaticMesh(UObject* target, FString label, UStaticMesh* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UStaticMesh*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTexture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTexture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTexture** result = abstractBasedObject->GetInternal()->GetClassVar<UTexture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTexture(UObject* target, FString label, UTexture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTexture*>(TCHAR_TO_UTF8(*label), value);
    }
}

USkeletalMesh* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSkeletalMesh(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USkeletalMesh** result = abstractBasedObject->GetInternal()->GetClassVar<USkeletalMesh*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSkeletalMesh(UObject* target, FString label, USkeletalMesh* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USkeletalMesh*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTexture2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTexture2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTexture2D** result = abstractBasedObject->GetInternal()->GetClassVar<UTexture2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTexture2D(UObject* target, FString label, UTexture2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTexture2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTexture2DArray* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTexture2DArray(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTexture2DArray** result = abstractBasedObject->GetInternal()->GetClassVar<UTexture2DArray*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTexture2DArray(UObject* target, FString label, UTexture2DArray* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTexture2DArray*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTexture2DDynamic* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTexture2DDynamic(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTexture2DDynamic** result = abstractBasedObject->GetInternal()->GetClassVar<UTexture2DDynamic*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTexture2DDynamic(UObject* target, FString label, UTexture2DDynamic* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTexture2DDynamic*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureCube* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureCube(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureCube** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureCube*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureCube(UObject* target, FString label, UTextureCube* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureCube*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureCubeArray* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureCubeArray(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureCubeArray** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureCubeArray*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureCubeArray(UObject* target, FString label, UTextureCubeArray* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureCubeArray*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureRenderTarget* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureRenderTarget(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureRenderTarget** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureRenderTarget*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureRenderTarget(UObject* target, FString label, UTextureRenderTarget* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureRenderTarget*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVolumeTexture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVolumeTexture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVolumeTexture** result = abstractBasedObject->GetInternal()->GetClassVar<UVolumeTexture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVolumeTexture(UObject* target, FString label, UVolumeTexture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVolumeTexture*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCurveLinearColorAtlas* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCurveLinearColorAtlas(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCurveLinearColorAtlas** result = abstractBasedObject->GetInternal()->GetClassVar<UCurveLinearColorAtlas*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCurveLinearColorAtlas(UObject* target, FString label, UCurveLinearColorAtlas* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCurveLinearColorAtlas*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULightMapTexture2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightMapTexture2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULightMapTexture2D** result = abstractBasedObject->GetInternal()->GetClassVar<ULightMapTexture2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightMapTexture2D(UObject* target, FString label, ULightMapTexture2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULightMapTexture2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULightMapVirtualTexture2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightMapVirtualTexture2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULightMapVirtualTexture2D** result = abstractBasedObject->GetInternal()->GetClassVar<ULightMapVirtualTexture2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightMapVirtualTexture2D(UObject* target, FString label, ULightMapVirtualTexture2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULightMapVirtualTexture2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

URuntimeVirtualTextureStreamingProxy* UAbstractBlueprintFunctionLibrary::GetAbsClassVarRuntimeVirtualTextureStreamingProxy(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (URuntimeVirtualTextureStreamingProxy** result = abstractBasedObject->GetInternal()->GetClassVar<URuntimeVirtualTextureStreamingProxy*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarRuntimeVirtualTextureStreamingProxy(UObject* target, FString label, URuntimeVirtualTextureStreamingProxy* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<URuntimeVirtualTextureStreamingProxy*>(TCHAR_TO_UTF8(*label), value);
    }
}

UShadowMapTexture2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarShadowMapTexture2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UShadowMapTexture2D** result = abstractBasedObject->GetInternal()->GetClassVar<UShadowMapTexture2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarShadowMapTexture2D(UObject* target, FString label, UShadowMapTexture2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UShadowMapTexture2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureLightProfile* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureLightProfile(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureLightProfile** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureLightProfile*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureLightProfile(UObject* target, FString label, UTextureLightProfile* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureLightProfile*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVirtualTexture2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVirtualTexture2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVirtualTexture2D** result = abstractBasedObject->GetInternal()->GetClassVar<UVirtualTexture2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVirtualTexture2D(UObject* target, FString label, UVirtualTexture2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVirtualTexture2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureRenderTarget2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureRenderTarget2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureRenderTarget2D** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureRenderTarget2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureRenderTarget2D(UObject* target, FString label, UTextureRenderTarget2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureRenderTarget2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureRenderTarget2DArray* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureRenderTarget2DArray(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureRenderTarget2DArray** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureRenderTarget2DArray*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureRenderTarget2DArray(UObject* target, FString label, UTextureRenderTarget2DArray* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureRenderTarget2DArray*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureRenderTargetCube* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureRenderTargetCube(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureRenderTargetCube** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureRenderTargetCube*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureRenderTargetCube(UObject* target, FString label, UTextureRenderTargetCube* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureRenderTargetCube*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTextureRenderTargetVolume* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTextureRenderTargetVolume(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTextureRenderTargetVolume** result = abstractBasedObject->GetInternal()->GetClassVar<UTextureRenderTargetVolume*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTextureRenderTargetVolume(UObject* target, FString label, UTextureRenderTargetVolume* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTextureRenderTargetVolume*>(TCHAR_TO_UTF8(*label), value);
    }
}

UCanvasRenderTarget2D* UAbstractBlueprintFunctionLibrary::GetAbsClassVarCanvasRenderTarget2D(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UCanvasRenderTarget2D** result = abstractBasedObject->GetInternal()->GetClassVar<UCanvasRenderTarget2D*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarCanvasRenderTarget2D(UObject* target, FString label, UCanvasRenderTarget2D* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UCanvasRenderTarget2D*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDynamicSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDynamicSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDynamicSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UDynamicSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDynamicSubsystem(UObject* target, FString label, UDynamicSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDynamicSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UGameInstanceSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarGameInstanceSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UGameInstanceSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UGameInstanceSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarGameInstanceSubsystem(UObject* target, FString label, UGameInstanceSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UGameInstanceSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULocalPlayerSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLocalPlayerSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULocalPlayerSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<ULocalPlayerSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLocalPlayerSubsystem(UObject* target, FString label, ULocalPlayerSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULocalPlayerSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldSubsystem(UObject* target, FString label, UWorldSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAudioEngineSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAudioEngineSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAudioEngineSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UAudioEngineSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAudioEngineSubsystem(UObject* target, FString label, UAudioEngineSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAudioEngineSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UEngineSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarEngineSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UEngineSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UEngineSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarEngineSubsystem(UObject* target, FString label, UEngineSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UEngineSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAudioWidgetSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAudioWidgetSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAudioWidgetSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UAudioWidgetSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAudioWidgetSubsystem(UObject* target, FString label, UAudioWidgetSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAudioWidgetSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UContentBundleEngineSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarContentBundleEngineSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UContentBundleEngineSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UContentBundleEngineSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarContentBundleEngineSubsystem(UObject* target, FString label, UContentBundleEngineSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UContentBundleEngineSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataDrivenCVarEngineSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataDrivenCVarEngineSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataDrivenCVarEngineSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UDataDrivenCVarEngineSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataDrivenCVarEngineSubsystem(UObject* target, FString label, UDataDrivenCVarEngineSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataDrivenCVarEngineSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHLODEngineSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHLODEngineSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHLODEngineSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UHLODEngineSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHLODEngineSubsystem(UObject* target, FString label, UHLODEngineSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHLODEngineSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UReplaySubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarReplaySubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UReplaySubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UReplaySubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarReplaySubsystem(UObject* target, FString label, UReplaySubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UReplaySubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorPartitionSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorPartitionSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorPartitionSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UActorPartitionSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorPartitionSubsystem(UObject* target, FString label, UActorPartitionSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorPartitionSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDataLayerSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDataLayerSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDataLayerSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UDataLayerSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDataLayerSubsystem(UObject* target, FString label, UDataLayerSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDataLayerSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UHLODSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarHLODSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UHLODSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UHLODSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarHLODSubsystem(UObject* target, FString label, UHLODSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UHLODSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULevelInstanceSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLevelInstanceSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULevelInstanceSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<ULevelInstanceSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLevelInstanceSubsystem(UObject* target, FString label, ULevelInstanceSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULevelInstanceSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UNetworkSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarNetworkSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UNetworkSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UNetworkSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarNetworkSubsystem(UObject* target, FString label, UNetworkSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UNetworkSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UObjectTraceWorldSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarObjectTraceWorldSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UObjectTraceWorldSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UObjectTraceWorldSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarObjectTraceWorldSubsystem(UObject* target, FString label, UObjectTraceWorldSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UObjectTraceWorldSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UTickableWorldSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarTickableWorldSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UTickableWorldSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UTickableWorldSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarTickableWorldSubsystem(UObject* target, FString label, UTickableWorldSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UTickableWorldSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UViewportStatsSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarViewportStatsSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UViewportStatsSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UViewportStatsSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarViewportStatsSubsystem(UObject* target, FString label, UViewportStatsSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UViewportStatsSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAutoDestroySubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAutoDestroySubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAutoDestroySubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UAutoDestroySubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAutoDestroySubsystem(UObject* target, FString label, UAutoDestroySubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAutoDestroySubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionSubsystem(UObject* target, FString label, UWorldPartitionSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UDeviceProfile* UAbstractBlueprintFunctionLibrary::GetAbsClassVarDeviceProfile(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UDeviceProfile** result = abstractBasedObject->GetInternal()->GetClassVar<UDeviceProfile*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarDeviceProfile(UObject* target, FString label, UDeviceProfile* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UDeviceProfile*>(TCHAR_TO_UTF8(*label), value);
    }
}

USystemTimeTimecodeProvider* UAbstractBlueprintFunctionLibrary::GetAbsClassVarSystemTimeTimecodeProvider(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (USystemTimeTimecodeProvider** result = abstractBasedObject->GetInternal()->GetClassVar<USystemTimeTimecodeProvider*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarSystemTimeTimecodeProvider(UObject* target, FString label, USystemTimeTimecodeProvider* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<USystemTimeTimecodeProvider*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVectorFieldAnimated* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVectorFieldAnimated(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVectorFieldAnimated** result = abstractBasedObject->GetInternal()->GetClassVar<UVectorFieldAnimated*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVectorFieldAnimated(UObject* target, FString label, UVectorFieldAnimated* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVectorFieldAnimated*>(TCHAR_TO_UTF8(*label), value);
    }
}

UVectorFieldStatic* UAbstractBlueprintFunctionLibrary::GetAbsClassVarVectorFieldStatic(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UVectorFieldStatic** result = abstractBasedObject->GetInternal()->GetClassVar<UVectorFieldStatic*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarVectorFieldStatic(UObject* target, FString label, UVectorFieldStatic* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UVectorFieldStatic*>(TCHAR_TO_UTF8(*label), value);
    }
}

ULightMapVirtualTexture* UAbstractBlueprintFunctionLibrary::GetAbsClassVarLightMapVirtualTexture(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (ULightMapVirtualTexture** result = abstractBasedObject->GetInternal()->GetClassVar<ULightMapVirtualTexture*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarLightMapVirtualTexture(UObject* target, FString label, ULightMapVirtualTexture* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<ULightMapVirtualTexture*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionEditorSpatialHash* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionEditorSpatialHash(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionEditorSpatialHash** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionEditorSpatialHash*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionEditorSpatialHash(UObject* target, FString label, UWorldPartitionEditorSpatialHash* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionEditorSpatialHash*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionRuntimeSpatialHashCell* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionRuntimeSpatialHashCell(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionRuntimeSpatialHashCell** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionRuntimeSpatialHashCell*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionRuntimeSpatialHashCell(UObject* target, FString label, UWorldPartitionRuntimeSpatialHashCell* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionRuntimeSpatialHashCell*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionRuntimeLevelStreamingCell* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionRuntimeLevelStreamingCell(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionRuntimeLevelStreamingCell** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionRuntimeLevelStreamingCell*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionRuntimeLevelStreamingCell(UObject* target, FString label, UWorldPartitionRuntimeLevelStreamingCell* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionRuntimeLevelStreamingCell*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionRuntimeSpatialHash* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionRuntimeSpatialHash(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionRuntimeSpatialHash** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionRuntimeSpatialHash*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionRuntimeSpatialHash(UObject* target, FString label, UWorldPartitionRuntimeSpatialHash* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionRuntimeSpatialHash*>(TCHAR_TO_UTF8(*label), value);
    }
}

UWorldPartitionLevelStreamingPolicy* UAbstractBlueprintFunctionLibrary::GetAbsClassVarWorldPartitionLevelStreamingPolicy(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UWorldPartitionLevelStreamingPolicy** result = abstractBasedObject->GetInternal()->GetClassVar<UWorldPartitionLevelStreamingPolicy*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarWorldPartitionLevelStreamingPolicy(UObject* target, FString label, UWorldPartitionLevelStreamingPolicy* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UWorldPartitionLevelStreamingPolicy*>(TCHAR_TO_UTF8(*label), value);
    }
}

UPerfTestComponent* UAbstractBlueprintFunctionLibrary::GetAbsClassVarPerfTestComponent(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UPerfTestComponent** result = abstractBasedObject->GetInternal()->GetClassVar<UPerfTestComponent*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarPerfTestComponent(UObject* target, FString label, UPerfTestComponent* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UPerfTestComponent*>(TCHAR_TO_UTF8(*label), value);
    }
}

Avs3GameModeBase* UAbstractBlueprintFunctionLibrary::GetAbsClassVarvs3GameModeBase(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (Avs3GameModeBase** result = abstractBasedObject->GetInternal()->GetClassVar<Avs3GameModeBase*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarvs3GameModeBase(UObject* target, FString label, Avs3GameModeBase* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<Avs3GameModeBase*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAbstractBlueprintFunctionLibrary* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAbstractBlueprintFunctionLibrary(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAbstractBlueprintFunctionLibrary** result = abstractBasedObject->GetInternal()->GetClassVar<UAbstractBlueprintFunctionLibrary*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAbstractBlueprintFunctionLibrary(UObject* target, FString label, UAbstractBlueprintFunctionLibrary* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAbstractBlueprintFunctionLibrary*>(TCHAR_TO_UTF8(*label), value);
    }
}

UAbstractSubsystem* UAbstractBlueprintFunctionLibrary::GetAbsClassVarAbstractSubsystem(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UAbstractSubsystem** result = abstractBasedObject->GetInternal()->GetClassVar<UAbstractSubsystem*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarAbstractSubsystem(UObject* target, FString label, UAbstractSubsystem* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UAbstractSubsystem*>(TCHAR_TO_UTF8(*label), value);
    }
}

UActorComponent_AbstractBased* UAbstractBlueprintFunctionLibrary::GetAbsClassVarActorComponent_AbstractBased(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UActorComponent_AbstractBased** result = abstractBasedObject->GetInternal()->GetClassVar<UActorComponent_AbstractBased*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarActorComponent_AbstractBased(UObject* target, FString label, UActorComponent_AbstractBased* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UActorComponent_AbstractBased*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTService_AbstractBased* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTService_AbstractBased(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTService_AbstractBased** result = abstractBasedObject->GetInternal()->GetClassVar<UBTService_AbstractBased*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTService_AbstractBased(UObject* target, FString label, UBTService_AbstractBased* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTService_AbstractBased*>(TCHAR_TO_UTF8(*label), value);
    }
}

UBTTask_AbstractBased* UAbstractBlueprintFunctionLibrary::GetAbsClassVarBTTask_AbstractBased(UObject* target, FString label)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        if (UBTTask_AbstractBased** result = abstractBasedObject->GetInternal()->GetClassVar<UBTTask_AbstractBased*>(TCHAR_TO_UTF8(*label)))
        {
            return *result;
        }
    }

    return nullptr;
}

void UAbstractBlueprintFunctionLibrary::SetAbsClassVarBTTask_AbstractBased(UObject* target, FString label, UBTTask_AbstractBased* value)
{
    if (IAbstractBasedInterface* abstractBasedObject = Cast<IAbstractBasedInterface>(target))
    {
        abstractBasedObject->GetInternal()->SetClassVar<UBTTask_AbstractBased*>(TCHAR_TO_UTF8(*label), value);
    }
}

